<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【JavaScript学习笔记总结】</title>
      <link href="/2022/02/20/%E3%80%90JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93%E3%80%91/"/>
      <url>/2022/02/20/%E3%80%90JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93%E3%80%91/</url>
      
        <content type="html"><![CDATA[<h3 id="JavaScript是什么？"><a href="#JavaScript是什么？" class="headerlink" title="JavaScript是什么？"></a>JavaScript是什么？</h3><p>Netscape在最初将其脚本语言命名为LiveScript，后来Netscape在与Sun合作之后将其改名为JavaScript。<strong>JavaScript最初受Java启发而开始设计的，目的之一就是“看上去像Java”，因此语法上有类似之处，一些名称和命名规范也借自Java。</strong>JavaScript与Java名称上的近似，是当时Netscape为了营销考虑与Sun微系统达成协议的结果。</p><p>Java和JavaScript的关系就像张雨和张雨生的关系，只是名字很像。</p><p>JavaScript 运行在客户端(浏览器)的编程语言</p><hr><h3 id="JavaScript现在的意义-应用场景"><a href="#JavaScript现在的意义-应用场景" class="headerlink" title="JavaScript现在的意义(应用场景)"></a>JavaScript现在的意义(应用场景)</h3><p>JavaScript 发展到现在几乎无所不能。</p><ol><li>网页特效</li><li>服务端开发(Node.js)</li><li>命令行工具(Node.js)</li><li>桌面程序(Electron)</li><li>App(Cordova)</li><li>控制硬件-物联网(Ruff)</li><li>游戏开发(cocos2d-js)</li></ol><hr><h3 id="JavaScript和HTML、CSS的区别"><a href="#JavaScript和HTML、CSS的区别" class="headerlink" title="JavaScript和HTML、CSS的区别"></a>JavaScript和HTML、CSS的区别</h3><ol><li>HTML：提供网页的结构，提供网页中的内容</li><li>CSS: 用来美化网页</li><li>JavaScript: 可以用来控制网页内容，给网页增加动态的效果</li></ol><hr><h3 id="JavaScript的组成"><a href="#JavaScript的组成" class="headerlink" title="JavaScript的组成"></a>JavaScript的组成</h3><ul><li>ECMAscript</li><li>BOM</li><li>DOM</li></ul><p>BOM - 浏览器对象模型<br>一套操作浏览器功能的API<br>通过BOM可以操作浏览器窗口，比如：弹出框、控制浏览器跳转、获取分辨率等</p><p>DOM - 文档对象模型<br>一套操作页面元素的API<br>DOM可以把HTML看做是文档树，通过DOM提供的API可以对树上的节点进行操作</p><hr><h3 id="JavaScript的书写方式"><a href="#JavaScript的书写方式" class="headerlink" title="JavaScript的书写方式"></a>JavaScript的书写方式</h3><ol><li>写在行内<pre class="line-numbers language-none"><code class="language-none">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;按钮&quot; onclick&#x3D;&quot;alert(&#39;Hello World&#39;)&quot; &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>写在script标签<pre class="line-numbers language-none"><code class="language-none">&lt;head&gt;&lt;script&gt; alert(&#39;Hello World!&#39;);&lt;&#x2F;script&gt;&lt;&#x2F;head&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>外部js文件在页面引入（script标签内不能写js代码）<pre class="line-numbers language-none"><code class="language-none">&lt;script src&#x3D;&quot;main.js&quot;&gt;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><hr><h3 id="计算机组成"><a href="#计算机组成" class="headerlink" title="计算机组成"></a>计算机组成</h3><h4 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h4><p>应用软件：浏览器(Chrome/IE/Firefox)、QQ、Sublime、Word</p><p>系统软件：Windows、Linux、mac OSX</p><h4 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h4><p>三大件：CPU、内存、硬盘 – 主板</p><p>输入设备：鼠标、键盘、手写板、摄像头等</p><p>输出设备：显示器、打印机、投影仪等</p><hr><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="什么是变量？"><a href="#什么是变量？" class="headerlink" title="什么是变量？"></a>什么是变量？</h4><ul><li><p>什么是变量</p><ul><li>变量是计算机内存中存储数据的标识符，根据变量名称可以获取到内存中存储的数据</li></ul></li><li><p>为什么要使用变量</p><ul><li>使用变量可以方便的获取或者修改内存中的数据</li></ul></li></ul><h4 id="如何使用变量"><a href="#如何使用变量" class="headerlink" title="如何使用变量"></a>如何使用变量</h4><ul><li>声明变量<pre class="line-numbers language-none"><code class="language-none">var age;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>变量赋值<pre class="line-numbers language-none"><code class="language-none">var age;age &#x3D; 18;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>同时声明多个变量<pre class="line-numbers language-none"><code class="language-none">var age, name, sex;age &#x3D; 10;name &#x3D; &#39;zs&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>同时声明多个变量并赋值<pre class="line-numbers language-none"><code class="language-none">var age, name, sex;age &#x3D; 10;name &#x3D; &#39;zs&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><hr><h3 id="变量的命名规则和规范"><a href="#变量的命名规则和规范" class="headerlink" title="变量的命名规则和规范"></a>变量的命名规则和规范</h3><p>规则 - 必须遵守的，不遵守会报错</p><ul><li><strong>由字母、数字、下划线、$符号组成，不能以数字开头</strong></li><li>不能是关键字和保留字，例如：for、while。</li><li>区分大小写</li></ul><p>规范 - 建议遵守的，不遵守不会报错</p><ul><li>变量名必须有意义</li><li>遵守驼峰命名法。首字母小写，后面单词的首字母需要大写。例如：userName、userPassword</li></ul><hr><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="简单数据类型"><a href="#简单数据类型" class="headerlink" title="简单数据类型"></a>简单数据类型</h4><p>Number、String、Boolean、Undefined、Null</p><h5 id="Number类型"><a href="#Number类型" class="headerlink" title="Number类型"></a>Number类型</h5><ul><li><p>数值字面量：数值的固定值的表示法</p><p>110 1024 60.5</p></li><li><p>进制</p><pre class="line-numbers language-none"><code class="language-none">十进制  var num &#x3D; 9;  进行算数计算时，八进制和十六进制表示的数值最终都将被转换成十进制数值。十六进制  var num &#x3D; 0xA;  数字序列范围：0~9以及A~F八进制  var num1 &#x3D; 07;   &#x2F;&#x2F; 对应十进制的7  var num2 &#x3D; 019;  &#x2F;&#x2F; 对应十进制的19  var num3 &#x3D; 08;   &#x2F;&#x2F; 对应十进制的8  数字序列范围：0~7  如果字面值中的数值超出了范围，那么前导零将被忽略，后面的数值将被当作十进制数值解析<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>浮点数</p><pre class="line-numbers language-none"><code class="language-none">浮点数  var n &#x3D; 5e-324;   &#x2F;&#x2F; 科学计数法  5乘以10的-324次方  浮点数值的最高精度是 17 位小数，但在进行算术计算时其精确度远远不如整数 var result &#x3D; 0.1 + 0.2;    &#x2F;&#x2F; 结果不是 0.3，而是：0.30000000000000004 console.log(0.07 * 100); 不要判断两个浮点数是否相等<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>数值范围</p><pre class="line-numbers language-none"><code class="language-none">最小值：Number.MIN_VALUE，这个值为： 5e-324最大值：Number.MAX_VALUE，这个值为： 1.7976931348623157e+308无穷大：Infinity无穷小：-Infinity<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h5></li><li><p>字符串字面量</p><p>‘程序猿’，‘程序媛’, “程序猿NX”</p></li><li><p>字符串长度</p><p>使用length来获取字符串长度</p><pre class="line-numbers language-none"><code class="language-none"> var str &#x3D; &#39;程序猿 Hello World&#39;;console.log(str.length);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>字符串拼接</p><p>字符串用+号进行拼接</p><pre class="line-numbers language-none"><code class="language-none">console.log(11 + 11);console.log(&#39;hello&#39; + &#39; world&#39;);console.log(&#39;100&#39; + &#39;100&#39;);console.log(&#39;11&#39; + 11);console.log(&#39;male:&#39; + true);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>两边只要有一个是字符串，那么+就是字符串拼接功能</li><li>两边如果都是数字，那么就是算术功能。</li></ol></li></ul><h5 id="Boolean类型"><a href="#Boolean类型" class="headerlink" title="Boolean类型"></a>Boolean类型</h5><p>Boolean字面量： true和false，区分大小写</p><p>计算机内部存储：true为1，false为0</p><h5 id="Undefined和Null"><a href="#Undefined和Null" class="headerlink" title="Undefined和Null"></a>Undefined和Null</h5><p>undefined表示一个声明了没有赋值的变量，变量只声明的时候值默认是undefined</p><p>null表示一个空，变量的值如果想为null，必须手动设置</p><h4 id="复杂数据类型"><a href="#复杂数据类型" class="headerlink" title="复杂数据类型"></a>复杂数据类型</h4><p>Object</p><h4 id="获取变量的类型"><a href="#获取变量的类型" class="headerlink" title="获取变量的类型"></a>获取变量的类型</h4><p>  typeof<br>  <pre class="line-numbers language-none"><code class="language-none">var age &#x3D; 18;console.log(typeof age);  &#x2F;&#x2F; &#39;number&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><hr><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><h4 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h4><p>用来描述下面一个或多行代码的作用</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 这是一个变量var name &#x3D; &#39;hm&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h4><p>用来注释多条代码</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;*var age &#x3D; 18;var name &#x3D; &#39;zs&#39;;console.log(name, age);*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><h4 id="转换为字符串类型"><a href="#转换为字符串类型" class="headerlink" title="转换为字符串类型"></a>转换为字符串类型</h4><ul><li><p>toString()</p><pre class="line-numbers language-none"><code class="language-none">var num &#x3D; 5;console.log(num.toString());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>String()</p><pre class="line-numbers language-none"><code class="language-none">String()函数存在的意义：有些值没有toString()，这个时候可以使用String()。比如：undefined和null<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>拼接字符串方式</p><p>num + “”，当 + 两边一个操作符是字符串类型，一个操作符是其它类型的时候，会先把其它类型转换成字符串再进行字符串拼接，返回字符串。</p></li></ul><h4 id="转换成数值类型"><a href="#转换成数值类型" class="headerlink" title="转换成数值类型"></a>转换成数值类型</h4><ul><li>Number()<pre class="line-numbers language-none"><code class="language-none">Number()可以把任意值转换成数值，如果要转换的字符串中有一个不是数值的字符，返回NaN<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ul><li><p>parseInt()</p>  <pre class="line-numbers language-none"><code class="language-none">var num1 &#x3D; parseInt(&quot;12.3abc&quot;);  &#x2F;&#x2F; 返回12，如果第一个字符是数字会解析知道遇到非数字结束var num2 &#x3D; parseInt(&quot;abc123&quot;);   &#x2F;&#x2F; 返回NaN，如果第一个字符不是数字或者符号就返回NaN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>parseFloat()</p><pre class="line-numbers language-none"><code class="language-none">parseFloat()把字符串转换成浮点数parseFloat()和parseInt非常相似，不同之处在与parseFloat会解析第一个. 遇到第二个.或者非数字结束,如果解析的内容里只有整数，解析成整数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>+,-0等运算</p><pre class="line-numbers language-none"><code class="language-none">var str &#x3D; &#39;500&#39;;console.log(+str);        &#x2F;&#x2F; 取正console.log(-str);        &#x2F;&#x2F; 取负console.log(str - 0);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>转换成布尔类型</p><ul><li>Boolean()</li><li>0 ‘’(空字符串) null undefined NaN 会转换成false 其它都会转换成true</li></ul></li></ul><h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4> <pre class="line-numbers language-none"><code class="language-none">+ - * &#x2F; %  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h4><p>  一元运算符：只有一个操作数的运算符</p><p>  5 + 6 两个操作数的运算符 二元运算符</p><p>  ++ 自身加1</p><p>  –自身减1</p><ul><li><p>前置++</p><pre class="line-numbers language-none"><code class="language-none"> var num1 &#x3D; 5;++ num1; var num2 &#x3D; 6;console.log(num1 + ++ num2);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>后置++</p><p> &lt;!–hexoPostRenderEscape:<pre class="line-numbers language-none"><code class="language-none">var num1 &#x3D; 5;</p></li></ul><p>++ num1; </p><p>var num2 &#x3D; 6;<br>console.log(num1 + ++ num2);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>:hexoPostRenderEscape–&gt;</p><ol><li>前置++：先加1，后参与运算</li><li>后置++：先参与运算，后加1<br>上面两个理解后，下面两个自通</li><li>前置– ：先减1，后参与运算</li><li>后置– ：先参与运算，后减1</li></ol><h4 id="逻辑运算符-布尔运算符"><a href="#逻辑运算符-布尔运算符" class="headerlink" title="逻辑运算符(布尔运算符)"></a>逻辑运算符(布尔运算符)</h4><pre class="line-numbers language-none"><code class="language-none">&amp;&amp; 与 两个操作数同时为true，结果为true，否则都是false|| 或 两个操作数有一个为true，结果为true，否则为false!  非  取反<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="关系运算符-比较运算符"><a href="#关系运算符-比较运算符" class="headerlink" title="关系运算符(比较运算符)"></a>关系运算符(比较运算符)</h4><pre class="line-numbers language-none"><code class="language-none">&lt;  &gt;  &gt;&#x3D;  &lt;&#x3D; &#x3D;&#x3D; !&#x3D; &#x3D;&#x3D;&#x3D; !&#x3D;&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>==与===的区别：==只进行值得比较，===类型和值同时相等，则相等</strong></p><pre class="line-numbers language-none"><code class="language-none">var result &#x3D; &#39;55&#39; &#x3D;&#x3D; 55;      &#x2F;&#x2F; truevar result &#x3D; &#39;55&#39; &#x3D;&#x3D;&#x3D; 55;     &#x2F;&#x2F; false 值相等，类型不相等var result &#x3D; 55 &#x3D;&#x3D;&#x3D; 55;     &#x2F;&#x2F; true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><p>= += -= *= /= %=</p><pre class="line-numbers language-none"><code class="language-none">例如：var num &#x3D; 0;num +&#x3D; 5;    &#x2F;&#x2F;相当于  num &#x3D; num + 5;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h4><p><strong>优先级从高到底</strong></p><pre class="line-numbers language-none"><code class="language-none">1. ()  优先级最高2. 一元运算符  ++   --   !3. 算数运算符  先*  &#x2F;  %   后 +   -4. 关系运算符  &gt;   &gt;&#x3D;   &lt;   &lt;&#x3D;5. 相等运算符   &#x3D;&#x3D;   !&#x3D;    &#x3D;&#x3D;&#x3D;    !&#x3D;&#x3D;6. 逻辑运算符 先&amp;&amp;   后||7. 赋值运算符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 练习1：4 &gt;&#x3D; 6 || &#39;人&#39; !&#x3D; &#39;阿凡达&#39; &amp;&amp; !(12 * 2 &#x3D;&#x3D; 144) &amp;&amp; true&#x2F;&#x2F; 练习2：var num &#x3D; 10;5 &#x3D;&#x3D; num &#x2F; 2 &amp;&amp; (2 + 2 * num).toString() &#x3D;&#x3D;&#x3D; &#39;22&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><p>顺序结构： 从上到下执行的代码就是顺序结构，程序默认就是由上到下顺序执行的</p><p>分支结构： 根据不同的情况，执行对应代码</p><p>循环结构： 循环结构：重复做一件事情</p><hr><h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><p><strong>根据不同的情况，执行对应代码</strong></p><h4 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h4><p>语法结构：</p><pre class="line-numbers language-none"><code class="language-none">if (&#x2F;* 条件表达式 *&#x2F;) &#123;  &#x2F;&#x2F; 执行语句&#125;if (&#x2F;* 条件表达式 *&#x2F;)&#123;  &#x2F;&#x2F; 成立执行语句&#125; else &#123;  &#x2F;&#x2F; 否则执行语句&#125;if (&#x2F;* 条件1 *&#x2F;)&#123;  &#x2F;&#x2F; 成立执行语句&#125; else if (&#x2F;* 条件2 *&#x2F;)&#123;  &#x2F;&#x2F; 成立执行语句&#125; else if (&#x2F;* 条件3 *&#x2F;)&#123;  &#x2F;&#x2F; 成立执行语句&#125; else &#123;  &#x2F;&#x2F; 最后默认执行语句&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>案例：<ol><li>求两个数的最大数</li><li>判断一个数是偶数还是奇数</li><li>分数转换，把百分制转换成ABCDE &lt;60 E 60-70 D 70-80 C 80-90 B 90 - 100 A</li></ol></li><li>作业：<ol><li>判断一个年份是闰年还是平年</li><li>闰年：能被4整除，但不能被100整除的年份 或者 能被400整除的年份</li><li>判断一个人的年龄是否满18岁(是否成年)</li></ol></li></ul><h4 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h4><pre class="line-numbers language-none"><code class="language-none">表达式1 ? 表达式2 : 表达式3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>是对if……else语句的一种简化写法</p><p>作业：</p><ol><li>是否年满18岁</li><li>从两个数中找最大值</li></ol><h4 id="Switch语句"><a href="#Switch语句" class="headerlink" title="Switch语句"></a>Switch语句</h4><p>语法格式：</p><pre class="line-numbers language-none"><code class="language-none">switch (expression) &#123;  case 常量1:    语句;    break;  case 常量2:    语句;    break;  case 常量3:    语句;    break;  …  case 常量n:    语句;    break;  default:    语句;    break;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">break可以省略，如果省略，代码会继续执行下一个caseswitch 语句在比较值时使用的是全等操作符, 因此不会发生类型转换（例如，字符串&#39;10&#39; 不等于数值 10）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>案例：<ol><li>显示星期几</li><li>素质教育（把分数变成ABCDE）千万不要写100个case哟</li></ol></li></ul><h4 id="布尔类型的隐式转换"><a href="#布尔类型的隐式转换" class="headerlink" title="布尔类型的隐式转换"></a>布尔类型的隐式转换</h4><p>流程控制语句会把后面的值隐式转换成布尔类型</p><pre class="line-numbers language-none"><code class="language-none">转换为true   非空字符串  非0数字  true 任何对象转换成false  空字符串  0  false  null  undefined<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 结果是什么？var a &#x3D; !!&#39;123&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">var message;&#x2F;&#x2F; 会自动把message转换成falseif (message) &#123;       &#x2F;&#x2F; todo...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><h4 id="While语句"><a href="#While语句" class="headerlink" title="While语句"></a>While语句</h4><p>语法结构:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 当循环条件为true时，执行循环体，&#x2F;&#x2F; 当循环条件为false时，结束循环。while (循环条件) &#123;  &#x2F;&#x2F;循环体&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码示例:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 计算1-100之间所有数的和&#x2F;&#x2F; 初始化变量var i &#x3D; 1;var sum &#x3D; 0;&#x2F;&#x2F; 判断条件while (i &lt;&#x3D; 100) &#123;  &#x2F;&#x2F; 循环体  sum +&#x3D; i;  &#x2F;&#x2F; 自增  i++;&#125;console.log(sum);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>案例：<ul><li>打印100以内 7的倍数</li><li>打印100以内所有偶数</li><li>打印100以内所有偶数的和</li></ul></li><li>作业：<ul><li>打印100以内的奇数</li><li>打印100以内的奇数的和</li></ul></li></ul><h4 id="do…while语句"><a href="#do…while语句" class="headerlink" title="do…while语句"></a>do…while语句</h4><p>do…while循环和while循环非常像，二者经常可以相互替代，但是do…while的特点是不管条件成不成立，都会执行一次。</p><p>语法结构:</p><pre class="line-numbers language-none"><code class="language-none">do &#123;  &#x2F;&#x2F; 循环体;&#125; while (循环条件);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>代码示例:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 初始化变量var i &#x3D; 1;var sum &#x3D; 0;do &#123;  sum +&#x3D; i;&#x2F;&#x2F;循环体  i++;&#x2F;&#x2F;自增&#125; while (i &lt;&#x3D; 100);&#x2F;&#x2F;循环条件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>案例<ul><li>求100以内所有3的倍数的和</li><li>使用do-while循环：输出询问“我爱你，嫁给我吧？”，选择“你喜欢我吗？(y/n):”，如果输入为y则打印”我们形影不离“，若输入为n,则继续询问 </li></ul></li></ul><h4 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h4><p>for语法结构:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; for循环的表达式之间用的是;号分隔的，千万不要写成,for (初始化表达式1; 判断表达式2; 自增表达式3) &#123;  &#x2F;&#x2F; 循环体4&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>执行顺序：1243 —- 243 —–243(直到循环条件变成false)</strong></p><ol><li>初始化表达式</li><li>判断表达式</li><li>自增表达式</li><li>循环体</li></ol> <pre class="line-numbers language-none"><code class="language-none">1、打印9*9乘法表var str &#x3D; &#39;&#39;;for (var i &#x3D; 1; i &lt;&#x3D; 9; i++) &#123;  for (var j &#x3D; i; j &lt;&#x3D;9; j++) &#123;    str +&#x3D; i + &#39; * &#39; + j + &#39; &#x3D; &#39; + i * j + &#39;\t&#39;;  &#125;  str +&#x3D; &#39;\n&#39;;&#125;console.log(str);2、打印直角三角形var start &#x3D; &#39;&#39;;for (var i &#x3D; 0; i &lt; 10; i++) &#123;  for (var j &#x3D; i; j &lt; 10; j++) &#123;    start +&#x3D; &#39;* &#39;;  &#125;  start +&#x3D; &#39;\n&#39;;&#125;console.log(start);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>作业：</p><ul><li>求1-100之间所有数的乘积</li><li>求1-100之间所有奇数的和</li><li>计算1-100之间能3整除的数的和</li><li>计算1-100之间不能被7整除的数的和</li></ul><h4 id="continue和break"><a href="#continue和break" class="headerlink" title="continue和break"></a>continue和break</h4><blockquote><p>break:立即跳出整个循环，即循环结束，开始执行循环后面的内容（直接跳到大括号）continue:立即跳出当前循环，继续下一次循环（跳到i++的地方）</p></blockquote><ul><li>作业<ul><li>求整数1～100的累加值，但要求碰到个位为3的数则停止累加</li><li>求整数1～100的累加值，但要求跳过所有个位为3的数</li></ul></li></ul><h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><ul><li><p>过去JavaScript调试方式</p><ul><li>alert</li><li>console.log</li></ul></li><li><p>断点调试</p><blockquote><p>断点调试是指自己在程序的某一行设置一个断点，调试时，程序运行到这一行就会停住，然后你可以一步一步往下调试，调试过程中可以看各个变量当前的值，出错的话，调试到出错的代码行即显示错误，停下。</p></blockquote><p>调试步骤:</p><pre class="line-numbers language-none"><code class="language-none">浏览器中按F12--&gt;sources--&gt;找到需要调试的文件--&gt;在程序的某一行设置断点<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><hr><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="数组的概念"><a href="#数组的概念" class="headerlink" title="数组的概念"></a>数组的概念</h4><blockquote><p>所谓数组，就是将多个元素（通常是同一类型）按一定顺序排列放到一个集合中，那么这个集合我们就称之为数组。</p></blockquote><p>通过数组字面量创建数组</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 创建一个空数组var arr1 &#x3D; []; &#x2F;&#x2F; 创建一个包含3个数值的数组，多个数组项以逗号隔开var arr2 &#x3D; [1, 3, 4]; &#x2F;&#x2F; 创建一个包含2个字符串的数组var arr3 &#x3D; [&#39;a&#39;, &#39;c&#39;]; &#x2F;&#x2F; 可以通过数组的length属性获取数组的长度console.log(arr3.length);&#x2F;&#x2F; 可以设置length属性改变数组中元素的个数arr3.length &#x3D; 0;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="获取元素数组"><a href="#获取元素数组" class="headerlink" title="获取元素数组"></a>获取元素数组</h4><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 格式：数组名[下标]    下标又称索引&#x2F;&#x2F; 功能：获取数组对应下标的那个值，如果下标不存在，则返回undefined。var arr &#x3D; [&#39;red&#39;, &#39;green&#39;, &#39;blue&#39;];arr[0];    &#x2F;&#x2F; redarr[2]; &#x2F;&#x2F; bluearr[3]; &#x2F;&#x2F; 这个数组的最大下标为2,因此返回undefined<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h4><blockquote><p>遍历：遍及所有，对数组的每一个元素都访问一次就叫遍历。</p></blockquote><p>数组遍历的基本语法:</p><pre class="line-numbers language-none"><code class="language-none">for(var i &#x3D; 0; i &lt; arr.length; i++) &#123;    &#x2F;&#x2F; 数组遍历的固定结构&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="数组新增元素"><a href="#数组新增元素" class="headerlink" title="数组新增元素"></a>数组新增元素</h4><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 格式：数组名[下标&#x2F;索引] &#x3D; 值;&#x2F;&#x2F; 如果下标有对应的值，会把原来的值覆盖，如果下标不存在，会给数组新增一个元素。var arr &#x3D; [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;];&#x2F;&#x2F; 把red替换成了yellowarr[0] &#x3D; &quot;yellow&quot;;&#x2F;&#x2F; 给数组新增加了一个blue的值arr[3] &#x3D; &quot;blue&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数组作业"><a href="#数组作业" class="headerlink" title="数组作业"></a>数组作业</h4><ul><li>求一组数中的所有数的和和平均值</li><li>求一组数中的最大值和最小值，以及所在位置</li><li>将字符串数组用|或其他符号分割</li><li>要求将数组中的0项去掉，将不为0的值存入一个新的数组，生成新的数组</li><li>翻转数组</li><li>冒泡排序，从小到大</li></ul><hr><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="什么是函数？"><a href="#什么是函数？" class="headerlink" title="什么是函数？"></a>什么是函数？</h4><blockquote><p>把一段相对独立的具有特定功能的代码块封装起来，形成一个独立实体，就是函数，起个名字（函数名），在后续开发中可以反复调用，函数的作用就是封装一段代码，将来可以重复使用</p></blockquote><h4 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h4><ul><li>函数声明<pre class="line-numbers language-none"><code class="language-none">function 函数名()&#123;&#x2F;&#x2F; 函数体&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>函数表达式<pre class="line-numbers language-none"><code class="language-none">var fn &#x3D; function() &#123;&#x2F;&#x2F; 函数体&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>特点<blockquote><p>函数声明的时候，函数体并不会执行，只要当函数被调用的时候才会执行。<br>函数一般都用来干一件事情，需用使用动词+名词，表示做一件事情 tellStory sayHello等</p></blockquote></li></ul><h4 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h4><p>语法:</p><pre class="line-numbers language-none"><code class="language-none">函数名();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>特点：</p><ol><li>函数体只有在调用的时候才会执行，调用需要()进行调用。</li><li>可以调用多次(重复使用)</li></ol><p>案例：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 声明函数function sayHi() &#123;  console.log(&quot;吃了没？&quot;);&#125;&#x2F;&#x2F; 调用函数sayHi();&#x2F;&#x2F; 求1-100之间所有数的和function getSum() &#123;  var sum &#x3D; 0;  for (var  i &#x3D; 0; i &lt; 100; i++) &#123;    sum +&#x3D; i;  &#125;  console.log(sum);&#125;&#x2F;&#x2F; 调用getSum();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h4><ul><li>为什么要有参数？</li></ul><pre class="line-numbers language-none"><code class="language-none">function getSum() &#123;  var sum &#x3D; 0;  for (var i &#x3D; 1; i &lt;&#x3D; 100; i++) &#123;    sum +&#x3D; i;  &#125;  console.log();&#125;&#x2F;&#x2F; 虽然上面代码可以重复调用，但是只能计算1-100之间的值&#x2F;&#x2F; 如果想要计算n-m之间所有数的和，应该怎么办呢？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>语法</li></ul><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 函数内部是一个封闭的环境，可以通过参数的方式，把外部的值传递给函数内部&#x2F;&#x2F; 带参数的函数声明function 函数名(形参1, 形参2, 形参...)&#123;  &#x2F;&#x2F; 函数体&#125;&#x2F;&#x2F; 带参数的函数调用函数名(实参1, 实参2, 实参3);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>形式参数：在声明一个函数的时候，为了函数的功能更加灵活，有些值是固定不了的，对于这些固定不了的值。我们可以给函数设置参数。这个参数没有具体的值，仅仅起到一个占位置的作用，我们通常称之为形式参数，也叫形参。</p></blockquote><blockquote><p>实际参数：如果函数在声明时，设置了形参，那么在函数调用的时候就需要传入对应的参数，我们把传入的参数叫做实际参数，也叫实参。</p></blockquote><pre class="line-numbers language-none"><code class="language-none">var x &#x3D; 5, y &#x3D; 6;fn(x,y); function fn(a, b) &#123;  console.log(a + b);&#125;&#x2F;&#x2F;x,y实参，有具体的值。函数执行的时候会把x,y复制一份给函数内部的a和b，函数内部的值是复制的新值，无法修改外部的x,y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>作业</li></ul><ol><li>求1-n之间所有数的和</li><li>求n-m之间所有数额和</li><li>圆的面积</li><li>求2个数中的最大值</li><li>求3个数中的最大值</li><li>判断一个数是否是素数</li></ol><h4 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h4><blockquote><p>当函数执行完的时候，并不是所有时候都要把结果打印。我们期望函数给我一些反馈（比如计算的结果返回进行后续的运算），这个时候可以让函数返回一些东西。也就是返回值。函数通过return返回一个返回值</p></blockquote><p>返回值语法:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;声明一个带返回值的函数function 函数名(形参1, 形参2, 形参...)&#123;  &#x2F;&#x2F;函数体  return 返回值;&#125;&#x2F;&#x2F;可以通过变量来接收这个返回值var 变量 &#x3D; 函数名(实参1, 实参2, 实参3);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数的调用结果就是返回值，因此我们可以直接对函数调用结果进行操作。</p><p>返回值详解：</p><ul><li>如果函数没有显示的使用 return语句 ，那么函数有默认的返回值：undefined</li><li>如果函数使用 return语句，那么跟再return后面的值，就成了函数的返回值</li><li>如果函数使用 return语句，但是return后面没有任何值，那么函数的返回值也是：undefined</li><li>函数使用return语句后，这个函数会在执行完 return 语句之后停止并立即退出，也就是说return后面的所有其他代码都不会再执行。</li></ul><p>作业</p><ol><li>求阶乘</li><li>求1!+2!+3!+…+n!</li><li>求一组数中的最大值</li><li>求一组数中的最小值</li></ol><hr><h3 id="其它函数"><a href="#其它函数" class="headerlink" title="其它函数"></a>其它函数</h3><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><blockquote><p>匿名函数：没有名字的函数</p></blockquote><p>匿名函数如何使用：</p><pre class="line-numbers language-none"><code class="language-none">将匿名函数赋值给一个变量，这样就可以通过变量进行调用匿名函数自调用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="自调用函数"><a href="#自调用函数" class="headerlink" title="自调用函数"></a>自调用函数</h4><p>关于自执行函数（匿名函数自调用）的作用：防止全局变量污染。</p><blockquote><p>匿名函数不能通过直接调用来执行，因此可以通过匿名函数的自调用的方式来执行</p></blockquote><pre class="line-numbers language-none"><code class="language-none">(function () &#123;  alert(123);&#125;)();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><blockquote><p>作用域：变量可以起作用的范围</p></blockquote><p>全局变量和局部变量</p><ul><li>全局变量</li></ul><blockquote><p>在任何地方都可以访问到的变量就是全局变量，对应全局作用域</p></blockquote><ul><li>局部变量</li></ul><blockquote><p>只在固定的代码片段内可访问到的变量，最常见的例如函数内部。对应局部作用域(函数作用域)</p></blockquote><pre class="line-numbers language-none"><code class="language-none">不使用var声明的变量是全局变量，不推荐使用。变量退出作用域之后会销毁，全局变量关闭网页或浏览器才会销毁<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h4><p>任何一对花括号（｛和｝）中的语句集都属于一个块，在这之中定义的所有变量在代码块外都是不可见的，我们称之为块级作用域。<br>在es5之前没有块级作用域的的概念,只有函数作用域，现阶段可以认为JavaScript没有块级作用域</p><h4 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h4><p>变量的作用域是在定义时决定而不是执行时决定，也就是说词法作用域取决于源码，通过静态分析就能确定，因此词法作用域也叫做静态作用域。</p><h4 id="在-js-中词法作用域规则"><a href="#在-js-中词法作用域规则" class="headerlink" title="在 js 中词法作用域规则:"></a>在 js 中词法作用域规则:</h4><ul><li>函数允许访问函数外的数据.</li><li>整个代码结构中只有函数可以限定作用域.</li><li>作用域规则首先使用提升规则分析</li><li>如果当前作用规则中有名字了, 就不考虑外面的名字</li></ul><pre class="line-numbers language-none"><code class="language-none">var num &#x3D; 123;function foo() &#123;  console.log( num );&#125;foo();if ( false ) &#123;    var num &#x3D; 123;&#125;console.log( num ); &#x2F;&#x2F; undefiend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h4><blockquote><p>只有函数可以制造作用域结构， 那么只要是代码，就至少有一个作用域, 即全局作用域。凡是代码中有函数，那么这个函数就构成另一个作用域。如果函数中还有函数，那么在这个作用域中就又可以诞生一个作用域。</p></blockquote><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 案例1：function f1() &#123;    function f2() &#123;    &#125;&#125;var num &#x3D; 456;function f3() &#123;    function f4() &#123;        &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 案例2function f1() &#123;    var num &#x3D; 123;    function f2() &#123;        console.log( num );    &#125;    f2();&#125;var num &#x3D; 456;f1();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h3><blockquote><p>JavaScript代码的执行是由浏览器中的JavaScript解析器来执行的。JavaScript解析器执行JavaScript代码的时候，分为两个过程：预解析过程和代码执行过程</p></blockquote><p>预解析过程：</p><ol><li>把变量的声明提升到当前作用域的最前面，只会提升声明，不会提升赋值。</li><li>把函数的声明提升到当前作用域的最前面，只会提升声明，不会提升调用。</li><li>先提升var，在提升function</li></ol><p>JavaScript的执行过程:</p><pre class="line-numbers language-none"><code class="language-none">var a &#x3D; 25;function abc ()&#123;  alert(a);&#x2F;&#x2F;undefined  var a &#x3D; 10;&#125;abc();&#x2F;&#x2F; 如果变量和函数同名的话，函数优先console.log(a);function a() &#123;  console.log(&#39;aaaaa&#39;);&#125;var a &#x3D; 1;console.log(a);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="全局解析规则"><a href="#全局解析规则" class="headerlink" title="全局解析规则"></a>全局解析规则</h4><ul><li><p>变量提升</p><blockquote><p>定义变量的时候，变量的声明会被提升到作用域的最上面，变量的赋值不会提升。</p></blockquote></li><li><p>函数提升</p><blockquote><p>JavaScript解析器首先会把当前作用域的函数声明提前到整个作用域的最前面</p></blockquote></li></ul><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 1、-----------------------------------var num &#x3D; 10;fun();function fun() &#123;  console.log(num);  var num &#x3D; 20;&#125;&#x2F;&#x2F;2、-----------------------------------var a &#x3D; 18;f1();function f1() &#123;  var b &#x3D; 9;  console.log(a);  console.log(b);  var a &#x3D; &#39;123&#39;;&#125;&#x2F;&#x2F; 3、-----------------------------------f1();console.log(c);console.log(b);console.log(a);function f1() &#123;  var a &#x3D; b &#x3D; c &#x3D; 9;  console.log(a);  console.log(b);  console.log(c);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><h4 id="为什么要有对象？"><a href="#为什么要有对象？" class="headerlink" title="为什么要有对象？"></a>为什么要有对象？</h4><pre class="line-numbers language-none"><code class="language-none">function printPerson(name, age, sex....) &#123;&#125;&#x2F;&#x2F; 函数的参数如果特别多的话，可以使用对象简化function printPerson(person) &#123;  console.log(person.name);  ……&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="什么是对象？"><a href="#什么是对象？" class="headerlink" title="什么是对象？"></a>什么是对象？</h4><pre class="line-numbers language-现实生活中：万物皆对象，对象是一个具体的事物，一个具体的事物就会有行为和特征。" data-language="现实生活中：万物皆对象，对象是一个具体的事物，一个具体的事物就会有行为和特征。"><code class="language-现实生活中：万物皆对象，对象是一个具体的事物，一个具体的事物就会有行为和特征。">举例： 一部车，一个手机车是一类事物，门口停的那辆车才是对象    特征：红色、四个轮子    行为：驾驶、刹车<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>JavaScript事物的特征在对象中用属性来表示。</strong></p><p><strong>JavaScript事物的行为在对象中用方法来表示。</strong></p><h4 id="对象创建方式"><a href="#对象创建方式" class="headerlink" title="对象创建方式"></a>对象创建方式</h4><ul><li>对象字面量 </li></ul><pre class="line-numbers language-none"><code class="language-none">var o &#x3D; &#123;  name: &#39;zs&#39;,  age: 18,  sex: true,  sayHi: function () &#123;    console.log(this.name);  &#125;&#125;;   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>new Object()创建对象</p><pre class="line-numbers language-none"><code class="language-none">var person &#x3D; new Object();person.name &#x3D; &#39;lisi&#39;;person.age &#x3D; 35;person.job &#x3D; &#39;actor&#39;;person.sayHi &#x3D; function()&#123;console.log(&#39;Hello,everyBody&#39;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>工厂函数创建对象</p><pre class="line-numbers language-none"><code class="language-none">function createPerson(name, age, job) &#123;var person &#x3D; new Object();person.name &#x3D; name;person.age &#x3D; age;person.job &#x3D; job;person.sayHi &#x3D; function()&#123;  console.log(&#39;Hello,everyBody&#39;);&#125;return person;&#125;var p1 &#x3D; createPerson(&#39;张三&#39;, 22, &#39;actor&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>自定义构造函数</p><pre class="line-numbers language-none"><code class="language-none">function Person(name,age,job)&#123;this.name &#x3D; name;this.age &#x3D; age;this.job &#x3D; job;this.sayHi &#x3D; function()&#123;    console.log(&#39;Hello,everyBody&#39;);&#125;&#125;var p1 &#x3D; new Person(&#39;张三&#39;, 22, &#39;actor&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h3 id="new关键字"><a href="#new关键字" class="headerlink" title="new关键字"></a>new关键字</h3><blockquote><p>构造函数 ，是一种特殊的函数。主要用来在创建对象时初始化对象， 即为对象成员变量赋初始值，总与new运算符一起使用在创建对象的语句中。</p></blockquote><ol><li>构造函数用于创建一类对象，首字母要大写。</li><li>构造函数要和new一起使用才有意义。</li></ol><p><strong>new在执行时会做四件事情</strong></p><pre class="line-numbers language-none"><code class="language-none">new会在内存中创建一个新的空对象new 会让this指向这个新的对象执行构造函数  目的：给这个新对象加属性和方法new会返回这个新对象<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="this详解"><a href="#this详解" class="headerlink" title="this详解"></a>this详解</h3><pre class="line-numbers language-none"><code class="language-none">JavaScript中的this指向问题，有时候会让人难以捉摸，随着学习的深入，我们可以逐渐了解现在我们需要掌握函数内部的this几个特点    1. 函数在定义的时候this是不确定的，只有在调用的时候才可以确定    2. 一般函数直接执行，内部this指向全局window    3. 函数作为一个对象的方法，被该对象所调用，那么this指向的是该对象    4. 构造函数中的this其实是一个隐式对象，类似一个初始化的模型，所有方法和属性都挂载到了这个隐式对象身上，后续通过new关键字来调用，从而实现实例化<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="对象的使用"><a href="#对象的使用" class="headerlink" title="对象的使用"></a>对象的使用</h3><h4 id="遍历对象的属性"><a href="#遍历对象的属性" class="headerlink" title="遍历对象的属性"></a>遍历对象的属性</h4><blockquote><p>通过for…in语法可以遍历一个对象</p></blockquote><pre class="line-numbers language-none"><code class="language-none">var obj &#x3D; &#123;&#125;;for (var i &#x3D; 0; i &lt; 10; i++) &#123;  obj[i] &#x3D; i * 2;&#125;for(var key in obj) &#123;  console.log(key + &quot;&#x3D;&#x3D;&quot; + obj[key]);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除对象的属性"><a href="#删除对象的属性" class="headerlink" title="删除对象的属性"></a>删除对象的属性</h4><pre class="line-numbers language-none"><code class="language-none">function fun() &#123;   this.name &#x3D; &#39;mm&#39;;&#125;var obj &#x3D; new fun(); console.log(obj.name); &#x2F;&#x2F; mm delete obj.name;console.log(obj.name); &#x2F;&#x2F; undefined<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="简单类型和复杂类型的区别"><a href="#简单类型和复杂类型的区别" class="headerlink" title="简单类型和复杂类型的区别"></a>简单类型和复杂类型的区别</h4><blockquote><p>基本类型又叫做值类型，复杂类型又叫做引用类型</p></blockquote><p>值类型：简单数据类型，基本数据类型，在存储时，变量中存储的是值本身，因此叫做值类型。</p><p>引用类型：复杂数据类型，在存储是，变量中存储的仅仅是地址（引用），因此叫做引用数据类型。</p><ul><li>堆和栈【注意：JavaScript中没有堆和栈的概念，此处我们用堆和栈来讲解，目的方便理解和方便以后的学习。】<pre class="line-numbers language-none"><code class="language-none">堆栈空间分配区别：　　1、栈（操作系统）：由操作系统自动分配释放 ，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈；　　2、堆（操作系统）： 存储复杂类型(对象)，一般由程序员分配释放， 若程序员不释放，由垃圾回收机制回收，分配方式倒是类似于链表。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><hr><h3 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h3><h4 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h4><pre class="line-numbers language-none"><code class="language-none">Math.PI                        &#x2F;&#x2F; 圆周率Math.random()                &#x2F;&#x2F; 生成随机数Math.floor()&#x2F;Math.ceil()     &#x2F;&#x2F; 向下取整&#x2F;向上取整Math.round()                &#x2F;&#x2F; 取整，四舍五入Math.abs()                    &#x2F;&#x2F; 绝对值Math.max()&#x2F;Math.min()         &#x2F;&#x2F; 求最大和最小值Math.sin()&#x2F;Math.cos()         &#x2F;&#x2F; 正弦&#x2F;余弦Math.pow()&#x2F;Math.sqrt()     &#x2F;&#x2F; 求指数次幂&#x2F;求平方根<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Data对象"><a href="#Data对象" class="headerlink" title="Data对象"></a>Data对象</h4><blockquote><p>创建 Date 实例用来处理日期和时间。Date 对象基于1970年1月1日（世界标准时间）起的毫秒数。</p></blockquote><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 获取当前时间，UTC世界时间，距1970年1月1日（世界标准时间）起的毫秒数var now &#x3D; new Date();console.log(now.valueOf());    &#x2F;&#x2F; 获取距1970年1月1日（世界标准时间）起的毫秒数Date构造函数的参数1. 毫秒数 1498099000356        new Date(1498099000356)2. 日期格式字符串  &#39;2015-5-1&#39;     new Date(&#39;2015-5-1&#39;)3. 年、月、日……                  new Date(2015, 4, 1)   &#x2F;&#x2F; 月份从0开始<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>获取日期的毫秒形式</li></ul><pre class="line-numbers language-none"><code class="language-none">var now &#x3D; new Date();&#x2F;&#x2F; valueOf用于获取对象的原始值console.log(date.valueOf())    &#x2F;&#x2F; HTML5中提供的方法，有兼容性问题var now &#x3D; Date.now();    &#x2F;&#x2F; 不支持HTML5的浏览器，可以用下面这种方式var now &#x3D; + new Date();            &#x2F;&#x2F; 调用 Date对象的valueOf() <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>日期格式化方法</li></ul><pre class="line-numbers language-none"><code class="language-none">toString()        &#x2F;&#x2F; 转换成字符串valueOf()        &#x2F;&#x2F; 获取毫秒值&#x2F;&#x2F; 下面格式化日期的方法，在不同浏览器可能表现不一致，一般不用toDateString()toTimeString()toLocaleDateString()toLocaleTimeString()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>获取日期指定部分</li></ul><pre class="line-numbers language-none"><code class="language-none">getTime()        &#x2F;&#x2F; 返回毫秒数和valueOf()结果一样，valueOf()内部调用的getTime()getMilliseconds() getSeconds()  &#x2F;&#x2F; 返回0-59getMinutes()  &#x2F;&#x2F; 返回0-59getHours()    &#x2F;&#x2F; 返回0-23getDay()      &#x2F;&#x2F; 返回星期几 0周日   6周6getDate()     &#x2F;&#x2F; 返回当前月的第几天getMonth()    &#x2F;&#x2F; 返回月份，***从0开始***getFullYear() &#x2F;&#x2F;返回4位的年份  如 2016<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>案例</strong></p><ul><li>写一个函数，格式化日期对象，返回yyyy-MM-dd HH:mm:ss的形式<pre class="line-numbers language-none"><code class="language-none">function formatDate(d) &#123;&#x2F;&#x2F;如果date不是日期对象，返回if (!date instanceof Date) &#123;  return;&#125;var year &#x3D; d.getFullYear(),    month &#x3D; d.getMonth() + 1,     date &#x3D; d.getDate(),     hour &#x3D; d.getHours(),     minute &#x3D; d.getMinutes(),     second &#x3D; d.getSeconds();month &#x3D; month &lt; 10 ? &#39;0&#39; + month : month;date &#x3D; date &lt; 10 ? &#39;0&#39; + date : date;hour &#x3D; hour &lt; 10 ? &#39;0&#39; + hour : hour;minute &#x3D; minute &lt; 10 ? &#39;0&#39; + minute:minute;second &#x3D; second &lt; 10 ? &#39;0&#39; + second:second;return year + &#39;-&#39; + month + &#39;-&#39; + date + &#39; &#39; + hour + &#39;:&#39; + minute + &#39;:&#39; + second;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>计算时间差，返回相差的天/时/分/秒<pre class="line-numbers language-none"><code class="language-none">function getInterval(start, end) &#123;var day, hour, minute, second, interval;interval &#x3D; end - start;interval &#x2F;&#x3D; 1000;day &#x3D; Math.round(interval &#x2F; 60 &#x2F;60 &#x2F; 24);hour &#x3D; Math.round(interval &#x2F; 60 &#x2F;60 % 24);minute &#x3D; Math.round(interval &#x2F; 60 % 60);second &#x3D; Math.round(interval % 60);return &#123;  day: day,  hour: hour,  minute: minute,  second: second&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="Array对象"><a href="#Array对象" class="headerlink" title="Array对象"></a>Array对象</h4><p>创建数组对象的两种方式</p><ul><li>字面量方式</li><li>new Array()</li></ul><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 1. 使用构造函数创建数组对象&#x2F;&#x2F; 创建了一个空数组var arr &#x3D; new Array();&#x2F;&#x2F; 创建了一个数组，里面存放了3个字符串var arr &#x3D; new Array(&#39;zs&#39;, &#39;ls&#39;, &#39;ww&#39;);&#x2F;&#x2F; 创建了一个数组，里面存放了4个数字var arr &#x3D; new Array(1, 2, 3, 4);&#x2F;&#x2F; 2. 使用字面量创建数组对象var arr &#x3D; [1, 2, 3];&#x2F;&#x2F; 获取数组中元素的个数console.log(arr.length);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>检测一个对象是否是数组</p><ul><li>instanceof</li><li>Array.isArray() HTML5中提供的方法，有兼容性问题<br>函数的参数，如果要求是一个数组的话，可以用这种方式来进行判断</li></ul></li><li><p>toString()/valueOf()</p><ul><li>toString() 把数组转换成字符串，逗号分隔每一项</li><li>valueOf() 返回数组对象本身</li></ul></li></ul><p>数组常用方法</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 1 栈操作(先进后出)push()pop()         &#x2F;&#x2F;取出数组中的最后一项，修改length属性&#x2F;&#x2F; 2 队列操作(先进先出)push()shift()        &#x2F;&#x2F;取出数组中的第一个元素，修改length属性unshift()     &#x2F;&#x2F;在数组最前面插入项，返回数组的长度&#x2F;&#x2F; 3 排序方法reverse()    &#x2F;&#x2F;翻转数组sort();     &#x2F;&#x2F;即使是数组sort也是根据字符，从小到大排序&#x2F;&#x2F; 带参数的sort是如何实现的？&#x2F;&#x2F; 4 操作方法concat()      &#x2F;&#x2F;把参数拼接到当前数组slice()     &#x2F;&#x2F;从当前数组中截取一个新的数组，不影响原来的数组，参数start从0开始,end从1开始splice()    &#x2F;&#x2F;删除或替换当前数组的某些项目，参数start, deleteCount, options(要替换的项目)&#x2F;&#x2F; 5 位置方法indexOf()、lastIndexOf()   &#x2F;&#x2F;如果没找到返回-1&#x2F;&#x2F; 6 迭代方法 不会修改原数组(可选)every()、filter()、forEach()、map()、some()&#x2F;&#x2F; 7 方法将数组的所有元素连接到一个字符串中。join()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>清空数组<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 方式1 推荐 arr &#x3D; [];&#x2F;&#x2F; 方式2 arr.length &#x3D; 0;&#x2F;&#x2F; 方式3arr.splice(0, arr.length);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>案例</strong></p><ul><li><p>将一个字符串数组输出为|分割的形式，比如“刘备|张飞|关羽”。使用两种方式实现</p><p>&lt;!–hexoPostRenderEscape:<pre class="line-numbers language-none"><code class="language-none">function myJoin(array, seperator) &#123;<br>seperator &#x3D; seperator || &#39;,&#39;;<br>array &#x3D; array || [];<br>if (array.length &#x3D;&#x3D; 0)&#123;<br>  return &#39;&#39;;<br>&#125;<br>var str &#x3D; array[0];<br>for (var i &#x3D; 1; i &lt; array.length; i++) &#123;<br>  str +&#x3D; seperator + array[i];<br>&#125;<br>return str;<br>&#125;<br>var array &#x3D; [6, 3, 5, 6, 7, 8, 0];<br>console.log(myJoin(array, &#39;-&#39;));</p></li></ul><p>console.log(array.join(&#39;-&#39;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>:hexoPostRenderEscape–&gt;</p><ul><li>将一个字符串数组的元素的顺序进行反转。[“a”, “b”, “c”, “d”] -&gt; [ “d”,“c”,“b”,“a”]。使用两种种方式实现。提示：第i个和第length-i-1个进行交换</li></ul><pre class="line-numbers language-none"><code class="language-none">function myReverse(arr) &#123;  if (!arr || arr.length &#x3D;&#x3D; 0) &#123;    return [];  &#125;  for (var i &#x3D; 0; i &lt; arr.length &#x2F; 2; i++) &#123;    var tmp &#x3D; arr[i];    arr[i] &#x3D; arr[this.length - i - 1];    arr[arr.length - i - 1] &#x3D; tmp;  &#125;  return arr;&#125;var array &#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;];console.log(myReverse(array));console.log(array.reverse());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>工资的数组[1500, 1200, 2000, 2100, 1800],把工资超过2000的删除</li></ul><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 方式1var array &#x3D;  [1500,1200,2000,2100,1800];var tmpArray &#x3D; [];for (var i &#x3D; 0; i &lt; array.length; i++) &#123;  if(array[i] &lt; 2000) &#123;    tmpArray.push(array[i]);  &#125;&#125;console.log(tmpArray);&#x2F;&#x2F; 方式2var array &#x3D;  [1500, 1200, 2000, 2100, 1800];array &#x3D; array.filter(function (item, index) &#123;  if (item &lt; 2000) &#123;    return true;  &#125;  return false;&#125;);console.log(array);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>[“c”, “a”, “z”, “a”, “x”, “a”]找到数组中每一个a出现的位置</li></ul><pre class="line-numbers language-none"><code class="language-none">var array &#x3D;  [&#39;c&#39;, &#39;a&#39;, &#39;z&#39;, &#39;a&#39;, &#39;x&#39;, &#39;a&#39;];do &#123;  var index &#x3D; array.indexOf(&#39;a&#39;,index + 1);  if (index !&#x3D; -1)&#123;    console.log(index);  &#125;&#125; while (index &gt; 0);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>编写一个方法去掉一个数组的重复元素</li></ul><pre class="line-numbers language-none"><code class="language-none">var array &#x3D;  [&#39;c&#39;, &#39;a&#39;, &#39;z&#39;, &#39;a&#39;, &#39;x&#39;, &#39;a&#39;];function clear() &#123;  var o &#x3D; &#123;&#125;;  for (var i &#x3D; 0; i &lt; array.length; i++) &#123;    var item &#x3D; array[i];    if (o[item]) &#123;      o[item]++;    &#125;else&#123;      o[item] &#x3D; 1;    &#125;  &#125;  var tmpArray &#x3D; [];  for(var key in o) &#123;    if (o[key] &#x3D;&#x3D; 1) &#123;      tmpArray.push(key);    &#125;else&#123;      if(tmpArray.indexOf(key) &#x3D;&#x3D; -1)&#123;        tmpArray.push(key);      &#125;    &#125;  &#125;  returm tmpArray;&#125;console.log(clear(array));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="基本包装类型"><a href="#基本包装类型" class="headerlink" title="基本包装类型"></a>基本包装类型</h4><p>为了方便操作基本数据类型，JavaScript还提供了三个特殊的引用类型：String/Number/Boolean</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 下面代码的问题？&#x2F;&#x2F; s1是基本类型，基本类型是没有方法的var s1 &#x3D; &#39;zhangsan&#39;;var s2 &#x3D; s1.substring(5);&#x2F;&#x2F; 当调用s1.substring(5)的时候，先把s1包装成String类型的临时对象，再调用substring方法，最后销毁临时对象, 相当于：var s1 &#x3D; new String(&#39;zhangsan&#39;);var s2 &#x3D; s1.substring(5);s1 &#x3D; null;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 创建基本包装类型的对象var num &#x3D; 18;                  &#x2F;&#x2F;数值，基本类型var num &#x3D; Number(&#39;18&#39;);     &#x2F;&#x2F;类型转换var num &#x3D; new Number(18);     &#x2F;&#x2F;基本包装类型，对象&#x2F;&#x2F; Number和Boolean基本包装类型基本不用，使用的话可能会引起歧义。例如：var b1 &#x3D; new Boolean(false);var b2 &#x3D; b1 &amp;&amp; true;        &#x2F;&#x2F; 结果是什么<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="String对象"><a href="#String对象" class="headerlink" title="String对象"></a>String对象</h4><ul><li>字符串的不可变<pre class="line-numbers language-none"><code class="language-none">var str &#x3D; &#39;abc&#39;;str &#x3D; &#39;hello&#39;;&#x2F;&#x2F; 当重新给str赋值的时候，常量&#39;abc&#39;不会被修改，依然在内存中&#x2F;&#x2F; 重新给字符串赋值，会重新在内存中开辟空间，这个特点就是字符串的不可变&#x2F;&#x2F; 由于字符串的不可变，在大量拼接字符串的时候会有效率问题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>创建字符串对象</li></ul><pre class="line-numbers language-none"><code class="language-none">var str &#x3D; new String(&#39;Hello World&#39;);&#x2F;&#x2F; 获取字符串中字符的个数console.log(str.length);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>字符串对象的常用方法<br>字符串所有的方法，都不会修改字符串本身(字符串是不可变的)，操作完成会返回一个新的字符串</li></ul><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 1 字符方法charAt()        &#x2F;&#x2F;获取指定位置处字符charCodeAt()      &#x2F;&#x2F;获取指定位置处字符的ASCII码str[0]           &#x2F;&#x2F;HTML5，IE8+支持 和charAt()等效&#x2F;&#x2F; 2 字符串操作方法concat()           &#x2F;&#x2F;拼接字符串，等效于+，+更常用slice()            &#x2F;&#x2F;从start位置开始，截取到end位置，end取不到substring()     &#x2F;&#x2F;从start位置开始，截取到end位置，end取不到substr()           &#x2F;&#x2F;从start位置开始，截取length个字符&#x2F;&#x2F; 3 位置方法indexOf()       &#x2F;&#x2F;返回指定内容在元字符串中的位置lastIndexOf()     &#x2F;&#x2F;从后往前找，只找第一个匹配的&#x2F;&#x2F; 4 去除空白   trim()          &#x2F;&#x2F;只能去除字符串前后的空白&#x2F;&#x2F; 5 大小写转换方法to(Locale)UpperCase()     &#x2F;&#x2F;转换大写to(Locale)LowerCase()     &#x2F;&#x2F;转换小写&#x2F;&#x2F; 6 其它search()replace()split()fromCharCode()&#x2F;&#x2F; String.fromCharCode(101, 102, 103);     &#x2F;&#x2F;把ASCII码转换成字符串<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>案例</strong></p><ul><li>截取字符串”我爱中华人民共和国”，中的”中华”</li></ul><pre class="line-numbers language-none"><code class="language-none">var s &#x3D; &quot;我爱中华人民共和国&quot;;s &#x3D; s.substr(2,2);console.log(s);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>“abcoefoxyozzopp”查找字符串中所有o出现的位置</li></ul><pre class="line-numbers language-none"><code class="language-none">var s &#x3D; &#39;abcoefoxyozzopp&#39;;var array &#x3D; [];do &#123;  var index &#x3D; s.indexOf(&#39;o&#39;, index + 1);  if (index !&#x3D; -1) &#123;    array.push(index);  &#125;&#125; while (index &gt; -1);console.log(array);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>把字符串中所有的o替换成!</li></ul><pre class="line-numbers language-none"><code class="language-none">var s &#x3D; &#39;abcoefoxyozzopp&#39;;do &#123;  s &#x3D; s.replace(&#39;o&#39;, &#39;&#39;);&#125; while (s.indexOf(&#39;o&#39;) &gt; -1);console.log(s);console.log(s.replace(&#x2F;o&#x2F;ig, &#39;&#39;));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>判断一个字符串中出现次数最多的字符，统计这个次数</li></ul><pre class="line-numbers language-none"><code class="language-none">var s &#x3D; &#39;abcoefoxyozzopp&#39;;var o &#x3D; &#123;&#125;;for (var i &#x3D; 0; i &lt; s.length; i++) &#123;  var item &#x3D; s.charAt(i);  if (o[item]) &#123;    o[item] ++;  &#125;else&#123;    o[item] &#x3D; 1;  &#125;&#125;var max &#x3D; 0;var char ;for(var key in o) &#123;  if (max &lt; o[key]) &#123;    max &#x3D; o[key];    char &#x3D; key;  &#125;&#125;console.log(max);console.log(char);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 【学习笔记】 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CSS学习笔记总结】</title>
      <link href="/2022/02/20/Untitled/"/>
      <url>/2022/02/20/Untitled/</url>
      
        <content type="html"><![CDATA[<p>本文档参考了以下网站，如详细了解，请移步：</p><ul><li><a href="https://www.w3cschool.cn/css3/htkn4flf.html">https://www.w3cschool.cn/css3/htkn4flf.html</a></li><li><a href="http://www.runoob.com/css3/css3-tutorial.html">http://www.runoob.com/css3/css3-tutorial.html</a> </li><li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html%EF%BC%88Flex%E5%B8%83%E5%B1%80%EF%BC%89">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html（Flex布局）</a></li></ul><hr><h3 id="CSS边框"><a href="#CSS边框" class="headerlink" title="CSS边框"></a>CSS边框</h3><p>边框属性：</p><ul><li>border-radius：创建圆角边框</li><li>box-Shadow：附加一个或者多个下拉框的阴影</li><li>border-image（不支持IE）：使用图像创建一个边框</li></ul><hr><h3 id="CSS圆角"><a href="#CSS圆角" class="headerlink" title="CSS圆角"></a>CSS圆角</h3><p>指定border-radius的每个圆角，如果只指定一个值，则生成四个圆角；若在每个角上指定，则使用如下规则：</p><ul><li>四个值：四个值分别指定左上角、右上角、右下角、左下角。</li><li>三个值：第一个值为左上角，第二个值为右上角和左下角，第三个值为右下角。</li><li>两个值：第一个值为左上角和右下角，第二个值为右上角和左下角。</li><li>一个值：四个圆角值相同。</li></ul><h4 id="创建椭圆边角："><a href="#创建椭圆边角：" class="headerlink" title="创建椭圆边角："></a>创建椭圆边角：</h4><ul><li>border-radius：50px/15px;</li><li>border-radius:  50%;</li></ul><p><strong>圆角属性：</strong></p><ul><li><strong>border-radius</strong> 所有四个边角属性的缩写</li><li><strong>border-top-left-radius</strong> 左上角的弧度</li><li><strong>border-top-right-radius</strong> 右上角的弧度</li><li><strong>border-bottom-left-radius</strong> 左下角的弧度</li><li><strong>border-bottom-right-radius</strong> 右下角的弧度</li></ul><hr><h3 id="CSS3背景"><a href="#CSS3背景" class="headerlink" title="CSS3背景"></a>CSS3背景</h3><p>四种背景属性：</p><ul><li>background-image：添加背景图片。不同的背景图像和图像用逗号隔开。</li><li>background-size：指定背景图像的大小，可指定像素或者百分比的大小，是相对于父元素的宽度和高度的百分比的大小。</li><li>background-origin：指定了背景图像的位置区域</li><li>background-clip：背景裁剪属性是从指定位置开始绘制。</li></ul><hr><h3 id="CSS3渐变"><a href="#CSS3渐变" class="headerlink" title="CSS3渐变"></a>CSS3渐变</h3><p><strong>渐变可以让我们在两个或者多个颜色之间显示平稳的过渡。</strong></p><p><strong>两种类型的渐变：</strong></p><p><strong>Linear Gradients：线性渐变-向下/向上/向左/向右/对角方向</strong></p><p><strong>Radial Gradients：径向渐变，由它们的中心定义</strong></p><h4 id="线性渐变："><a href="#线性渐变：" class="headerlink" title="线性渐变："></a>线性渐变：</h4><p><strong>语法：background：linear-gradient(direction, color-stop1, color-stop2, …);</strong></p><p>线性渐变默认情况是从上到下。</p><h5 id="从左到右的线性渐变："><a href="#从左到右的线性渐变：" class="headerlink" title="从左到右的线性渐变："></a>从左到右的线性渐变：</h5><p>#grad {undefined</p><p>background: -webkit-linear-gradient(left, red, blue);</p><p>background: -o-liner-gradient(right, red, blue);</p><p>background: -moz-linear-gradient(right, red, blue);</p><p>background: linear-gradient(to right, red, blue);/<em>标准语法</em>/</p><p>}</p><h5 id="从左上角开始到右下角的渐变："><a href="#从左上角开始到右下角的渐变：" class="headerlink" title="从左上角开始到右下角的渐变："></a>从左上角开始到右下角的渐变：</h5><p>设置方向为：left top/bottom right/to bottom right(标准语法下)</p><h5 id="使用角度对方向进行设置："><a href="#使用角度对方向进行设置：" class="headerlink" title="使用角度对方向进行设置："></a>使用角度对方向进行设置：</h5><p>这里的角度是指水平线和渐变线之间的角度。So 0deg将创建一个从下到上的渐变，90deg将创建一个从左到右的渐变。</p><h5 id="使用透明度："><a href="#使用透明度：" class="headerlink" title="使用透明度："></a>使用透明度：</h5><p>支持透明度，用于创建减弱变淡的效果。</p><ul><li>为了添加透明度，使用rgba()函数来定义颜色结点。rgba()函数中的最后一个参数可以是从0到1的值，它定义了颜色的透明度：0表示完全透明，1表示完全不透明。</li></ul><h5 id="重复的线性渐变："><a href="#重复的线性渐变：" class="headerlink" title="重复的线性渐变："></a>重复的线性渐变：</h5><p>repeating-linear-gradient()函数用于重复的线性渐变。</p><h4 id="径向渐变："><a href="#径向渐变：" class="headerlink" title="径向渐变："></a>径向渐变：</h4><p>我们可以指定渐变的中心、形状（圆形或者椭圆形）、大小，默认情况下，渐变的中心是center（表示在中心点），渐变的形状是ellipse（表示椭圆形），渐变的大小是farthest-corner（表示到最远的角落）。</p><p><strong>语法: background: radial-gradient(center, shape size, start-color, …, last-color);</strong></p><p>颜色结点分布不均匀的径向渐变：</p><p>#grad{</p><p>background: -webkit-radial-gradient(red 5%, green 15%, blue 60%);</p><p>}</p><h5 id="Size参数定义了渐变的大小，可以是以下四个值："><a href="#Size参数定义了渐变的大小，可以是以下四个值：" class="headerlink" title="Size参数定义了渐变的大小，可以是以下四个值："></a>Size参数定义了渐变的大小，可以是以下四个值：</h5><ul><li>closest-side/farthest-side/closest-corner/farthest-corner</li></ul><h5 id="重复的径向渐变："><a href="#重复的径向渐变：" class="headerlink" title="重复的径向渐变："></a>重复的径向渐变：</h5><ul><li>Reperting-radial-gradient()函数用于重复径向渐变。</li></ul><hr><h3 id="CSS3文本效果"><a href="#CSS3文本效果" class="headerlink" title="CSS3文本效果"></a>CSS3文本效果</h3><p>包含属性：</p><ul><li><p>text-shadow：适用于文本阴影，可以指定是水平阴影还是垂直阴影、模糊的距离以及阴影的颜色。</p></li><li><p>box-shadow：适用于盒子阴影。同上。可以在::after和::before两个伪元素中添加阴影效果。</p></li><li><p>text-overflow：文本溢出属性指定应向用户如何显示溢出内容</p></li></ul><p><strong>有两个属性：ellipsis（以省略号的形式隐藏内容）和clip（直接截断内容）</strong></p><ul><li><p>word-wrap：强制换行，但是单词中间不换行</p></li><li><p>word-break：单词可进行拆分然后换行</p></li></ul><hr><h3 id="CSS3字体"><a href="#CSS3字体" class="headerlink" title="CSS3字体"></a>CSS3字体</h3><p>@font-face规则，若使用，首先定义字体的名称，然后指向该文字字体。</p><p>通过font-family属性来引用字体的名称。</p><hr><h3 id="CSS3-2D转换"><a href="#CSS3-2D转换" class="headerlink" title="CSS3 2D转换"></a>CSS3 2D转换</h3><p>2D变换方法：</p><ul><li><p>translate()：平移</p></li><li><p>rotate()：在一个给定度数顺时针旋转的元素</p></li><li><p>scale()</p></li><li><p>skew()</p></li><li><p>matrix()</p></li></ul><hr><h3 id="CSS3过渡"><a href="#CSS3过渡" class="headerlink" title="CSS3过渡"></a>CSS3过渡</h3><p><strong>为了添加某种效果可以从一个样式转变到另一个的时候，无需使用flash动画或JavaScript，只需要鼠标移动到上面就可以。</strong></p><p>我们要实现这样的效果，必须规定两项内容：<br>指定要添加效果的CSS属性和效果的持续时间</p><p><strong>所有的过渡属性：</strong></p><ul><li><p>transition：简写属性，用于在一个属性中设置四个过渡属性</p></li><li><p>transition-property：规定应用过渡的CSS属性的名称</p></li><li><p>transition-duration：定义过渡效果花费的时间，默认是0</p></li><li><p>transition-timing-function：规定过渡效果的时间曲线，默认是‘ease‘</p></li><li><p>transition-delay：规定过渡时间何时开始，默认是0</p></li></ul><pre class="line-numbers language-none"><code class="language-none">div &#123;    transition-property: width;    transition-duration: 1s;    transition-timing-function: linear;    transition-delay: 2s;&#125;&#x2F;&#x2F;等价于div&#123; transition: width 1s linear 2s; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="CSS3动画"><a href="#CSS3动画" class="headerlink" title="CSS3动画"></a>CSS3动画</h3><p><strong>创建动画，可以取代许多网页动画图像，Flash动画和JavaScript.</strong></p><p>CSS3@keyframes规则</p><p>该规则是创建动画。@keyframes规则内指定一个CSS样式和动画将逐步从目前的样式更改为新的样式。</p><p>当@keyframes创建动画时，把它绑定到一个选择器，否则不会有任何效果。<br>指定至少两个CSS3的动画属性绑定向一个选择器：规定动画的名称和动画的时长。</p><pre class="line-numbers language-none"><code class="language-none">div &#123;width: 100px;height: 100px;background: red;animation: myfirst 5s;&#125;@keyframes myfirst &#123;from &#123; background: red;&#125;to &#123; backgroung: yellow;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>我们可以改变任意多的样式任意多的次数。请用百分比来规定变化发生的时间，或用关键词“from”和“to”，等同于0%和100%。0%是动画的开始，100%是动画的完成。</strong></p><p>所有的动画属性：</p><ul><li>@keyframes    规定动画。</li><li>animation    所有动画属性的简写属性。    </li><li>animation-name    规定 @keyframes 动画的名称。    </li><li>animation-duration    规定动画完成一个周期所花费的秒或毫秒。默认是 0。    </li><li>animation-timing-function    规定动画的速度曲线。默认是 “ease”。    </li><li>animation-fill-mode    规定当动画不播放时（当动画完成时，或当动画有一个延迟未开始播放时），要应用到元素的样式。    </li><li>animation-delay    规定动画何时开始。默认是 0。    </li><li>animation-iteration-count    规定动画被播放的次数。默认是 1。    </li><li>animation-direction    规定动画是否在下一周期逆向地播放。默认是 “normal”。    </li><li>animation-play-state    规定动画是否正在运行或暂停。默认是 “running”。</li></ul><hr><h3 id="CSS多列"><a href="#CSS多列" class="headerlink" title="CSS多列"></a>CSS多列</h3><p> 多列属性：</p><ul><li>column-count：指定元素的列数应分为几列。</li></ul><pre class="line-numbers language-none"><code class="language-none">div &#123;-moz-column-count:3;&#x2F;*Firefox*&#x2F;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>column-gap：指定的列之间的差距</li><li>column-rule：设置列之间的宽度、样式和颜色</li><li>column-rule-color：指定的列之间颜色规则</li><li>column-rule-style：指定的列之间的样式规则</li><li>column-rule-width：指定的列之间的宽度规则</li><li>column-width：指定列的宽度</li><li>column-span：指定一个元素应该横跨多少列</li><li>columns：缩写属性设置列宽和列数</li><li>column-fill：指定如何填充列</li></ul><hr><h3 id="CSS3用户界面"><a href="#CSS3用户界面" class="headerlink" title="CSS3用户界面"></a>CSS3用户界面</h3><p>新增加了一些新的用户界面特性来调整元素尺寸、框尺寸和外边框。</p><p>用户界面属性：</p><ul><li>resize：指定一个元素是否应该由用户去调整大小</li><li>box-sizing：允许以确切的方式定义适应某个区域的具体内容</li><li>outline-offset：对轮廓进行偏移，并在超出边框边缘的位置绘制轮廓。轮廓与边框不同，轮廓不占用空间，而且可能是非矩形。</li></ul><hr><h3 id="CSS3盒子模型"><a href="#CSS3盒子模型" class="headerlink" title="CSS3盒子模型"></a>CSS3盒子模型</h3><p><strong>所有HTML元素可以看作盒子。<br>CSS盒模型本质上是一个盒子，封装周围的HTML元素，包括：边距、边框、填充和实际内容。</strong></p><ul><li><p>Margin：外边距，清除边框外的区域，外边距是透明的。</p></li><li><p>Border：边框，围绕在内边距和内容外的边框。</p></li><li><p>Padding：内边距，清除内容周围的区域，内边距是透明的。</p></li><li><p>Content：盒子的内容，显示文本和图像。</p></li></ul><p><strong>总元素的宽度 = 宽度 + 左填充（padding） + 右填充 + 左边框 + 右边框 + 左边距 + 右边距</strong></p><p>两种盒模型的比较：</p><ul><li>盒模型分为W3C的标准盒模型和IE盒模型。</li></ul><p><strong>标准盒模型的宽度就是content的宽度，高度是content的高度，而IE盒模型的宽度是content+padding+border的总和。</strong></p><p>切换盒模型的方法：设置box-sizing属性。</p><ul><li>box-sizing: content-box //W3C盒子模型</li><li>box-sizing:border-box //IE盒子模型</li></ul><hr><h3 id="CSS3弹性盒子-Flex-Box"><a href="#CSS3弹性盒子-Flex-Box" class="headerlink" title="CSS3弹性盒子(Flex Box)"></a>CSS3弹性盒子(Flex Box)</h3><p><strong>弹性盒子是一种当页面需要适应不同的屏幕大小以及设备类型时确保元素拥有恰当的行为的布局方式。一定要掌握这一部分的知识点，面试中会经常问到。</strong></p><p>弹性盒子由弹性容器和弹性子元素组成。</p><p>弹性容器通过设置display属性的值为flex或inline-flex（行内元素设置为Flex布局）将其定义为弹性容器。</p><p>注：设为了Flex布局以后，子元素的float、clear和virtical-align属性将失效。</p><p>弹性容器内包含一个或多个弹性子元素。</p><p>注意：弹性容器外及弹性子元素内是正常渲染的，弹性盒子只定义了弹性元素的如何在弹性容器内布局。弹性子元素通常在弹性盒子内一行显示，默认情况每个容器只有一行。</p><p>修改排列方式：rtl(right to left)</p><pre class="line-numbers language-none"><code class="language-none">body &#123; direction: rtl; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>弹性容器上的属性共有6个：</strong></p><ul><li><p>flex-direction</p></li><li><p>flex-wrap</p></li><li><p>flex-flow</p></li><li><p>justify-content</p></li><li><p>align-items</p></li><li><p>align-content</p></li></ul><h4 id="①flex-direcion："><a href="#①flex-direcion：" class="headerlink" title="①flex-direcion："></a>①flex-direcion：</h4><p>决定了主轴的方向（即弹性子元素在父容器中的排列方向）。</p><p>语法：flex-direction: row | row-reverse | column | column-reverse</p><ul><li><p>row：横向从左到右排列。默认的排列方式。</p></li><li><p>row-reverse：反转横向排列（右对齐，从后往前排，最后一项排在最前面）</p></li><li><p>column：纵向排列。</p></li><li><p>column-reverse：反转纵向排列，从后往前排，最后一项排在最上面。</p></li></ul><h4 id="②flex-wrap："><a href="#②flex-wrap：" class="headerlink" title="②flex-wrap："></a>②flex-wrap：</h4><p>默认情况下，项目都排在一条线上，该属性定义如果一条轴线排不下，如何换行。</p><p>语法：flex-wrap: nowrap | wrap | wrap-reverse</p><h4 id="③flex-flow："><a href="#③flex-flow：" class="headerlink" title="③flex-flow："></a>③flex-flow：</h4><p>该属性是flex-direction属性和flex-wrap属性的简写形式，默认值是row nowrap。</p><h4 id="④justify-content："><a href="#④justify-content：" class="headerlink" title="④justify-content："></a>④justify-content：</h4><p>定义了项目在主轴上的对齐方式，把弹性项沿着弹性容器的主轴线对齐。</p><p>语法：justify-content: flex-start | flex-end | center | space-between | space-around</p><ul><li><p>flex-start：左对齐</p></li><li><p>flex-end：右对齐</p></li><li><p>center：居中</p></li><li><p>space-between：两端对齐，项目之间的间隔都是相等的</p></li><li><p>space-around：每个项目两侧的间隔相等，所以项目之间的间隔比项目与边框的间隔大一倍。</p></li></ul><h4 id="⑤align-items："><a href="#⑤align-items：" class="headerlink" title="⑤align-items："></a>⑤align-items：</h4><p>定义项目在交叉轴上如何对齐。</p><p>语法：align-items: flex-start | flex-end | center | baseline | strench</p><p>baseline：项目的第一行文字的基线对齐</p><p>strench（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</p><h4 id="⑥align-content："><a href="#⑥align-content：" class="headerlink" title="⑥align-content："></a>⑥align-content：</h4><p>定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p><p>语法：align-content: flex-start | flex-end | center | space-between | space-around | strench(默认值)</p><p>弹性子元素上的6个属性：</p><ul><li><p>①order :定义弹性子元素的排列顺序。数值越小，排列越靠前，默认为0。</p><ul><li>语法：order: <integer></li></ul></li></ul><ul><li><p>②flex-grow:定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</p><ul><li>语法：flex-grow: <number></li></ul></li></ul><ul><li><p>③flex-shrink:定义项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。负值对该属性无效。</p><ul><li>语法：flex-shrink: <number></li></ul></li></ul><ul><li><p>④flex-basis：定义了在分配多余空间之前，项目占据的主轴空间。默认值为auto</p></li><li><p>⑤flex属性是flex-grow、flex-shrink、flex-basis的简写，默认值是 0 1 auto。<strong>建议优先使用这个属性。该属性有两个快捷值： auto(1 1 auto) 和none(0 0 auto)。</strong></p></li></ul><ul><li>⑥align-self：允许单个弹性子元素有与其他子元素不一样的对齐方式。可覆盖align-items属性，默认值为auto，表示继承弹性容器的align-items属性，如果没有父元素，则等同于strench。</li></ul><hr><h3 id="多媒体查询"><a href="#多媒体查询" class="headerlink" title="多媒体查询"></a>多媒体查询</h3><p>CSS中我们可以根据不同的媒体类型（包括显示器、便携设备、电视机等）来设置不同的样式规则。</p><p>在CSS3中根据设置自适应显示。</p><p>媒体查询可用于检测很多事情：</p><ul><li>Viewport（视图）的宽度和高度</li><li>设备的宽度和高度</li><li>朝向（智能手机横屏，竖屏）</li></ul><p>多媒体类型</p><ul><li>all    用于所有多媒体类型设备</li><li>print    用于打印机</li><li>screen    用于电脑屏幕，平板，智能手机等。</li><li>speech    用于屏幕阅读器</li></ul><hr><h3 id="CSS网格布局"><a href="#CSS网格布局" class="headerlink" title="CSS网格布局"></a>CSS网格布局</h3><ul><li><p>column-gap：指定列之间的间隙</p></li><li><p>gap：row-gap 和 column-gap 的简写属性</p></li><li><p>grid：    grid-template-rows, grid-template-columns, grid-template-areas, grid-auto-rows, grid-auto-columns, 以及 grid-auto-flow 的简写属性</p></li><li><p>grid-area：    指定网格元素的名称，或者也可以是 grid-row-start, grid-column-start, grid-row-end, 和 grid-column-end 的简写属性</p></li><li><p>grid-auto-columns：    指的默认的列尺寸</p></li><li><p>grid-auto-flow：    指定自动布局算法怎样运作，精确指定在网格中被自动布局的元素怎样排列。</p></li><li><p>grid-auto-rows：    指的默认的行尺寸</p></li><li><p>grid-column：    grid-column-start 和 grid-column-end 的简写属性</p></li><li><p>grid-column-end：    指定网格元素列的结束位置</p></li><li><p>grid-column-gap：    指定网格元素的间距大小</p></li><li><p>grid-column-start：    指定网格元素列的开始位置</p></li><li><p>grid-gap：    grid-row-gap 和 grid-column-gap 的简写属性</p></li><li><p>grid-row：    grid-row-start 和 grid-row-end 的简写属性</p></li><li><p>grid-row-end：    指定网格元素行的结束位置</p></li><li><p>grid-row-gap：    指定网格元素的行间距</p></li><li><p>grid-row-start：    指定网格元素行的开始位置</p></li><li><p>grid-template：    grid-template-rows, grid-template-columns 和 grid-areas 的简写属性</p></li><li><p>grid-template-areas：    指定如何显示行和列，使用命名的网格元素</p></li><li><p>grid-template-columns：    指定列的大小，以及网格布局中设置列的数量</p></li><li><p>grid-template-rows：    指定网格布局中行的大小</p></li><li><p>row-gap：    指定两个行之间的间距</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 【学习笔记】 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>静态网站练习项目一</title>
      <link href="/2022/02/19/%E8%B1%AA%E6%B3%B0%E8%AF%81%E5%88%B8%E7%BD%91%E7%AB%99/"/>
      <url>/2022/02/19/%E8%B1%AA%E6%B3%B0%E8%AF%81%E5%88%B8%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<p><strong>HTML代码:</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;head&gt;    &lt;title&gt;豪泰证券官方网站 | HaoTai&lt;&#x2F;title&gt;    &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;css&#x2F;index.css&quot; &#x2F;&gt;&lt;&#x2F;head&gt;&lt;body&gt;    &lt;div class&#x3D;&quot;top&quot;&gt;        &lt;div class&#x3D;&quot;top01 container&quot;&gt;            &lt;span class&#x3D;&quot;zgs&quot;&gt;&lt;a href&#x3D;&quot;#&quot;&gt;豪泰集团及子公司&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;            &lt;span class&#x3D;&quot;login&quot;&gt;&lt;a href&#x3D;&quot;#&quot;&gt;旧版官网回顾&amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp&amp;nbspEN&amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp登录&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;        &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;container&quot;&gt;        &lt;div class&#x3D;&quot;nav&quot;&gt;            &lt;img src&#x3D;&quot;images&#x2F;logo.png&quot; &#x2F;&gt;            &lt;div class&#x3D;&quot;navF&quot;&gt;                &lt;a href&#x3D;&quot;#&quot;&gt;首页&lt;&#x2F;a&gt;                &lt;a href&#x3D;&quot;#&quot;&gt;走进豪泰&lt;&#x2F;a&gt;                &lt;a class&#x3D;&quot;dropdown&quot; href&#x3D;&quot;#&quot;&gt;我们的服务&lt;&#x2F;a&gt;                &lt;a href&#x3D;&quot;#&quot;&gt;豪泰观点&lt;&#x2F;a&gt;                &lt;a href&#x3D;&quot;#&quot;&gt;新闻中心&lt;&#x2F;a&gt;                &lt;a href&#x3D;&quot;#&quot;&gt;工作在豪泰&lt;&#x2F;a&gt;            &lt;&#x2F;div&gt;        &lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;lbt&quot;&gt;            &lt;img src&#x3D;&quot;images&#x2F;lunbotu1.png&quot; &#x2F;&gt;        &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;dTmk1 container&quot;&gt;        &lt;div class&#x3D;&quot;dt&quot;&gt;            &lt;img src&#x3D;&quot;images&#x2F;dtmd.png&quot; &#x2F;&gt;            &lt;div class&#x3D;&quot;news&quot;&gt;                &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;title&quot;&gt;豪泰证券金融科技投资峰会：金融机构大规模采用开源技术是大势所趋&lt;&#x2F;a&gt;                &lt;p class&#x3D;&quot;data&quot;&gt;2021.12.21&lt;&#x2F;p&gt;                &lt;p class&#x3D;&quot;nr&quot;&gt;12月16日，2021豪泰证券金融科技投资峰会在南京举办。年轻新锐的科技公司创始人、CTO与海外技术大咖、华泰的金融科技专家齐聚一堂，碰撞灵                    感，就金融数字化转型、财富与资管科技、下一代计算机架构等...&lt;&#x2F;p&gt;                &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;nrtz&quot;&gt;阅读全文&gt;&lt;&#x2F;a&gt;            &lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;list&quot;&gt;                &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;listone&quot;&gt;荣昌生物科创板成功注册，华泰联合证券陪伴中国生物制药领军                    企业打造...&lt;&#x2F;a&gt;                &lt;p class&#x3D;&quot;onedata&quot;&gt;2022.01.04&lt;&#x2F;p&gt;                &lt;hr&gt;                &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;listtwo&quot;&gt;2021年度上市省管企业补充公告薪酬信息披露&lt;&#x2F;a&gt;                &lt;p class&#x3D;&quot;twodata&quot;&gt;2021.12.26&lt;&#x2F;p&gt;                &lt;br&gt;                &lt;hr&gt;                &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;listthree&quot;&gt;关于警惕假冒“华泰证券”名义 从事非法证券活动的重要提示&lt;&#x2F;a&gt;                &lt;p class&#x3D;&quot;threedata&quot;&gt;2021.12.14&lt;&#x2F;p&gt;            &lt;&#x2F;div&gt;        &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;gsgg container&quot;&gt;        &lt;div class&#x3D;&quot;gg&quot;&gt;            &lt;h4&gt;公司公告&lt;&#x2F;h4&gt;            &lt;img src&#x3D;&quot;..&#x2F;前端静态网站练习项目2：豪泰证券集团&#x2F;images&#x2F;gsimg.png&quot;&gt;            &lt;a class&#x3D;&quot;gg-a&quot; href&#x3D;&quot;#&quot;&gt;豪泰证券：豪泰证券H股公告（截至2021年12月31日股份发行人的证券变动月报...&lt;&#x2F;a&gt;            &lt;p class&#x3D;&quot;aonedata&quot;&gt;2022.01.07&lt;&#x2F;p&gt;            &lt;ul&gt;                &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;豪泰证券：豪泰证券股份有限公司关于增资豪泰国际金融控股有限公司的公告&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;                &lt;li&gt;                    &lt;hr&gt;&lt;a href&#x3D;&quot;#&quot;&gt;豪泰证券：豪泰证券H股公告（截至2021年11月30日股份发行人的证券变动...&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;                        &lt;hr&gt;豪泰证券：豪泰证券股份有限公司第五届董事会第二十次会议决议公告&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;                        &lt;hr&gt;豪泰证券：豪泰证券股份有限公司关于江苏省国信集团有限公司增持股份结果...&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;            &lt;&#x2F;ul&gt;        &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;wmdfw container&quot;&gt;        &lt;div class&#x3D;&quot;title&quot;&gt;            &lt;span&gt;我们的服务&lt;&#x2F;span&gt;            &lt;p&gt;WHAT WE DO&lt;&#x2F;p&gt;        &lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;one&quot;&gt;            &lt;a href&#x3D;&quot;#&quot;&gt;                &lt;img src&#x3D;&quot;images&#x2F;fwone.png&quot; &#x2F;&gt;                &lt;h1&gt;财富管理&lt;&#x2F;h1&gt;                &lt;p&gt;我们依托移动端“涨乐财富通”APP与PC端专业平台、分公司与证券期货营业部、华泰国际及其下属境外子公司，以线上线下和境内境外联动模式，向各类客户提供多元化财富管理服务，包括代理交易、资产配置、证券                    金融等业务，致力打造人与人、人与平台无缝融合的财富管理服务。&lt;&#x2F;p&gt;            &lt;&#x2F;a&gt;        &lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;two&quot;&gt;            &lt;a href&#x3D;&quot;#&quot;&gt;                &lt;img src&#x3D;&quot;images&#x2F;fwtwo.png&quot; &#x2F;&gt;                &lt;h1&gt;机构服务&lt;&#x2F;h1&gt;                &lt;p&gt;我们整合投资银行、机构投资者服务和投资交易资源，同时通过机构销售进行有效衔接，为各类企业及金融机构客户提供全方位的综合金融服务，主要包括投资银行业务、投资交易业务、主经纪商（PB）业务、研究与机构销售业务。                &lt;&#x2F;p&gt;            &lt;&#x2F;a&gt;        &lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;three&quot;&gt;            &lt;a href&#x3D;&quot;#&quot;&gt;                &lt;img src&#x3D;&quot;images&#x2F;fwthree.png&quot; &#x2F;&gt;                &lt;h1&gt;投资管理&lt;&#x2F;h1&gt;                &lt;p&gt;我们接受客户资金委托，依托专业化的投资研究平台和庞大的客户基础，创设和提供各类金融产品并管理客户资产，有效满足客户投融资需求，主要包括：证券公司资产管理、私募股权基金管理及基金公司资产管理业务等。                &lt;&#x2F;p&gt;            &lt;&#x2F;a&gt;        &lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;four&quot;&gt;            &lt;a href&#x3D;&quot;#&quot;&gt;                &lt;img src&#x3D;&quot;images&#x2F;fwfour.png&quot; &#x2F;&gt;                &lt;h1&gt;国际业务&lt;&#x2F;h1&gt;                &lt;p&gt;我们接受客户资金委托，依托专业化的投资研究平台和庞大的客户基础，创设和提供各类金融产品并管理客户资产，有效满足客户投融资需求，主要包括：证券公司资产管理、私募股权基金管理及基金公司资产管理业务等。                &lt;&#x2F;p&gt;            &lt;&#x2F;a&gt;        &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;!--页脚--&gt;    &lt;div class&#x3D;&quot;footer&quot;&gt;        &lt;div class&#x3D;&quot;container&quot;&gt;            &lt;div class&#x3D;&quot;htzx&quot;&gt;                &lt;p&gt;豪泰中心&lt;&#x2F;p&gt;                &lt;ul&gt;                    &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;豪泰国际&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;豪泰联合证券&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;豪泰资产管理&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;豪泰紫金投资&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;豪泰期货&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;豪泰创新&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;南方基金&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;豪泰柏瑞&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;                &lt;&#x2F;ul&gt;            &lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;htzx&quot;&gt;                &lt;p&gt;友情链接&lt;&#x2F;p&gt;                &lt;ul&gt;                    &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;中国证监会&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;香港证监会&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;上海证券交易所&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;深圳证券交易所&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;香港联合交易所&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;伦敦证券交易所&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;中国证券业协会&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;中国投资者网&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;                &lt;&#x2F;ul&gt;            &lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;fwzx&quot;&gt;                &lt;p&gt;服务中心&lt;&#x2F;p&gt;                &lt;ul&gt;                    &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;联系我们&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;投诉与建议&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;免责条款&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;纪检信箱&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;                &lt;&#x2F;ul&gt;            &lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;fwrx&quot;&gt;                &lt;p&gt;服务热线&lt;&#x2F;p&gt;                &lt;h4&gt;我们7*24小时为您服务&lt;&#x2F;h4&gt;                &lt;h4&gt;中国江苏省南京市江东中路228号豪泰证券广场&lt;&#x2F;h4&gt;                &lt;h4&gt;总机：+86 25 83389999&lt;&#x2F;h4&gt;                &lt;h4&gt;投诉：+86 4008895597&lt;&#x2F;h4&gt;                &lt;h4&gt;传真：+86 25 83387337&lt;&#x2F;h4&gt;                &lt;h4&gt;邮箱：95597@htsc.com&lt;&#x2F;h4&gt;            &lt;&#x2F;div&gt;        &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>CSS代码:</strong></p><pre class="line-numbers language-none"><code class="language-none">*&#123;    padding: 0;    margin: 0;&#125;&#x2F;* 网站容器（固定宽度、高度大小） *&#x2F;.container&#123;    margin:auto;    padding: 0;    width:1720px;&#125;&#x2F;* 头部 *&#x2F;.top&#123;    background-color: #062a77;    height: 48px;    &#x2F;* 行高 *&#x2F;    line-height: 41px;&#125;.top .zgs&#123;    &#x2F;* float浮动 向左浮动 *&#x2F;    float: left;    &#x2F;* 相对定位 遵循常规流 通过自身的top right bottom left定位 *&#x2F;    position: relative;    left: 137px;&#125;.top .login&#123;    float: right;    &#x2F;* 宽度 *&#x2F;    width: 210px;    &#x2F;* 高度 *&#x2F;    height: 38px;    position: relative;    &#x2F;* 右边定位 （元素向右移动）*&#x2F;    right: 225px;&#125;.top span a&#123;    &#x2F;* text-decoration设置下划线 none为取消 *&#x2F;    text-decoration: none;    color: white;&#125;&#x2F;* 导航栏 *&#x2F;.nav&#123;    height: 91px;    line-height: 91px;    position: absolute;    left: auto;    right: auto;&#125;&#x2F;* .nav img这种属于后代选择器 其中img是元素选择器 *&#x2F;.nav img&#123;    width: 175px;    height: 46px;    &#x2F;* 盒子内边距 上左下右 *&#x2F;    padding: 21px 0;    float: left;    position: relative;    left: 120px;&#125;.nav .navF&#123;    float: right;    width: 861px;    position: relative;    left: 500px;&#125;.nav .navF a&#123;    &#x2F;* display定义盒子的类型 inline-block是行内块级元素 *&#x2F;    display: inline-block;    height: 81px;    padding: 0 28px;    text-decoration: none;    color: white;&#125;.nav .navF a:hover&#123;    color: rgb(180, 41, 41);    &#x2F;* border为边框 border-bottom为下边框 *&#x2F;    border-bottom: 4px solid rgb(105, 22, 22);    height: 71px;    &#x2F;* 字体宽度 *&#x2F;    font-weight: bold;&#125;.lbt img&#123;    height: 600px;    width: 100%;&#125;&#x2F;* 下拉菜单位未制作 *&#x2F;&#x2F;* 动态模块 *&#x2F;.dTmk1&#123;    background-color: rgb(248, 245, 245);    padding: 62px 0 62px 0;&#125;.dTmk1 .dt&#123;    background-color: white;    width: 1240px;    height: 418px;    position: relative;&#x2F;*相对定位*&#x2F;    left: 160px;    &#x2F;* 阴影 *&#x2F;    box-shadow:3px 3px 5px #888888;&#125;.dTmk1 .dt img&#123;    width: 400px;    height: 418px;&#125;.dTmk1 .dt .news&#123;    width: 400px;    height: 418px;    position: relative;    left: 435px;    bottom: 400px;&#125;.dTmk1 .dt .news .title&#123;    display: inline-block;    color: black;    margin: 0px 0px 19px;    font-size: 20px;&#x2F;*字体大小*&#x2F;    text-decoration: none;&#125;.dTmk1 .dt .news .data&#123;    color: #9b9b9b;&#125;.dTmk1 .dt .news .nr&#123;    position: relative;    bottom: -50px;    &#x2F;* 盒子外边距 *&#x2F;    margin: 0px 0px 19px;    font-size: 19px;    color: gray;&#125;.dTmk1 .dt .news .nrtz&#123;    position: relative;    top: 120px ;    left: 300px;    text-decoration: none;    color: #9b9b9b;&#125;.dTmk1 .dt .news .title:hover&#123;    color: rgb(105, 22, 22);    font-weight: bold;&#125;.dTmk1 .dt .news .nrtz:hover&#123;    color: rgb(105, 22, 22);    font-weight: bold;&#125;.dTmk1 .dt .list&#123;    width: 350px;    height: 418px;    position: relative;    left: 840px;    bottom: 850px;    padding: 30px;&#125;.dTmk1 .dt .list a&#123;    text-decoration: none;    color: black;&#125;.dTmk1 .dt .list .onedata&#123;    position: relative;    top: 4px;    right: 20px;    color: #9b9b9b;    padding: 19px;&#125;.dTmk1 .dt .list .listtwo&#123;    position: relative;    top: 30px;&#125;.dTmk1 .dt .list a:hover&#123;    color: rgb(105, 22, 22);    font-weight: bold;&#125;.dTmk1 .dt .list .listthree&#123;    position: relative;    top: 40px;&#125;.dTmk1 .dt .list .twodata&#123;    position: relative;    top: 30px;    right: 20px;    color: #9b9b9b;    padding: 19px;&#125;.dTmk1 .dt .list .threedata&#123;    position: relative;    top: 50px;    right: 20px;    color: #9b9b9b;    padding: 19px;&#125;&#x2F;* 公告模块 *&#x2F;.gsgg&#123;    height: 380px;    background-image: url(..&#x2F;images&#x2F;gsgg.png);    padding: 36px 0;&#125;.gsgg .gg&#123;    width: 1200px;    height: 389px;    position: relative;    left: 160px;&#125;.gsgg .gg h4&#123;    font-size: 34px;    color: white;    margin: 0 0 25px 0;&#125;.gsgg .gg img&#123;    margin: 0 0 25px 0;&#125;.gsgg .gg .gg-a&#123;    width: 333px;    height: 59px;    display: block;    margin: 0 0 8px 0;    text-decoration: none;    color: white;    font-size: 20px;&#125;.gsgg .gg .aonedata&#123;    width: 333px;    height: 36px;    position: relative;    top: 40px;    color: #9b9b9b;&#125;ul&#123;    display: inline-block;&#125;.gsgg .gg ul li&#123;    width: 700px;    height: 36px;    position: relative;    bottom: 380px;    left: 500px;    color: #9b9b9b;    &#x2F;* 列表类型 none为取消列表类型 *&#x2F;    list-style-type: none;    padding:30px 0 20px 0;&#125;.gsgg .gg ul li a&#123;    text-decoration: none;    color:white;    font-size: 20px;&#125;.gsgg .gg ul li a:hover&#123;    color: rgb(105, 22, 22);    font-weight: bold;&#125;&#x2F;* 服务详情模块 *&#x2F;.wmdfw&#123;    height: 1480px;    background-color: rgb(248, 245, 245);&#125;.wmdfw .title&#123;    text-align: center;    font-size: 40px;    padding: 80px 0;    font-weight: bold;&#125;.wmdfw .title p&#123;    font-size: 19px;    color: #ababab;    margin: 24px 0;    font-weight: 400;&#125;.wmdfw img&#123;    width: 100%;    border-radius: 25px;&#125;.wmdfw h1&#123;    font-size: 30px;    color: #062a77;    font-weight: 700;    margin-bottom: 18px;&#x2F;*下外边距*&#x2F;    line-height: 1;    margin-top: 28px;&#x2F;*上外边距*&#x2F;    padding-left: 30px;&#x2F;*左内边距*&#x2F;&#125;.wmdfw a&#123;    text-decoration: none;&#125;.wmdfw .one &#123;    display: inline-block;    width: 572px;    height: 542px;    position: relative;    left: 269px;    bottom: 50px;    background-color: white;    border-radius: 25px;&#125;.wmdfw .one p, .two p, .three p, .four p&#123;    font-size:16px;    color: #ababab;    margin: 0 0 24px;    padding: 0px 30px;&#125;.wmdfw .two&#123;    display: inline-block;    width: 572px;    height: 542px;    position: relative;    left: 299px;    bottom: 49px;    background-color: white;    border-radius: 25px;&#125;.wmdfw .three &#123;    display: inline-block;    width: 572px;    height: 542px;    position: relative;    left: 269px;    bottom: 10px;    background-color: white;    border-radius: 25px;&#x2F;*边框圆角*&#x2F;&#125;.wmdfw .four&#123;    display: inline-block;    width: 572px;    height: 542px;    position: relative;    left: 299px;    bottom: 9px;    background-color: white;    border-radius: 25px;&#125;.wmdfw .one,.two,.three,.four&#123;    &#x2F;*阴影*&#x2F;    box-shadow:3px 3px 5px #888888;&#125;&#x2F;* 页脚 *&#x2F;.footer&#123;    background-color: #252525;    height: 400px;    padding: 25px 0px 22px;&#125;.footer .htzx&#123;    display: inline-block;    position: relative;    left: 239px;    margin: 0 50px;&#125;.footer .htzx p,.fwzx p,.fwrx p&#123;    color: white;    font-size: 30px;    margin-bottom: 15px;    border-bottom: 1px solid #9b9b9b;    line-height: 50px;&#125;.footer ul li&#123;    list-style-type: none;    width: 222px;    height: 35px;&#125;.footer ul li a&#123;    text-decoration: none;    color: #9b9b9b;    line-height: 2.5;&#125;.footer .fwzx&#123;    display: inline-block;    position: relative;    left: 239px;    margin: 0 50px;    bottom:140px;&#125;.footer .fwrx&#123;    display: inline-block;    position: relative;    left: 239px;    margin: 0 50px;    bottom:44px;&#125;.footer .fwrx h4&#123;    text-decoration: none;    color: #9b9b9b;    line-height: 2.5;    font-size: 300;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src= "/img/loading.gif" data-lazy-src="%5Cimg%5C%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E7%BB%83%E4%B9%A0%E9%A1%B9%E7%9B%AE%E4%B8%80.png" alt="upload successful"><br><a href="https://gitee.com/carry574/lam-blog-applet/tree/master/%E5%89%8D%E7%AB%AF%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E7%BB%83%E4%B9%A0%E9%A1%B9%E7%9B%AE1%EF%BC%9A%E8%90%9D%E5%8D%9C%E5%B8%AE%E5%B8%AE%E7%A7%91%E6%8A%80">https://gitee.com/carry574/lam-blog-applet/tree/master/前端静态网站练习项目1：萝卜帮帮科技</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript关键特性</title>
      <link href="/2022/02/01/JavaScript%E5%85%B3%E9%94%AE%E7%89%B9%E6%80%A7/"/>
      <url>/2022/02/01/JavaScript%E5%85%B3%E9%94%AE%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="数组语法"><a href="#数组语法" class="headerlink" title="数组语法"></a>数组语法</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> myarray1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建数组同时赋值</span><span class="token keyword">var</span> myarray2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 直接输入一个数组（称“字面量数组”）</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myarray1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myarray2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><a id="more"></a><hr /><h2 id="数组序号"><a href="#数组序号" class="headerlink" title="数组序号"></a>数组序号</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">索引值从<span class="token number">0</span>开始<span class="token keyword">var</span> color <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token string">"yellow"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>color<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns "red"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>color<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns "green"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>color<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns "blue"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>color<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns "yellow"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>color<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>color<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr /><h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> student <span class="token operator">=</span> <span class="token punctuation">[</span>      <span class="token punctuation">[</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token string">"18"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token string">"女"</span><span class="token punctuation">,</span> <span class="token string">"20"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>student<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns "18"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr /><h2 id="修改数组"><a href="#修改数组" class="headerlink" title="修改数组"></a>修改数组</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> color <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token string">"yellow"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>color<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"black"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns ["black", "green", "blue", "yellow"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr /><h2 id="获取数组长度"><a href="#获取数组长度" class="headerlink" title="获取数组长度"></a>获取数组长度</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> color <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token string">"yellow"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>color<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr /><h2 id="通过-split-方法，将字符串转换为数组"><a href="#通过-split-方法，将字符串转换为数组" class="headerlink" title="通过 split() 方法，将字符串转换为数组"></a>通过 split() 方法，将字符串转换为数组</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"1:2:3:4"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns ["1", "2", "3", "4"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"|a|b|c"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns ["", "a", "b", "c"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr /><h2 id="join-方法将数组转换为字符串"><a href="#join-方法将数组转换为字符串" class="headerlink" title="join() 方法将数组转换为字符串"></a>join() 方法将数组转换为字符串</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns "1:2:3:4"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns "|a|b|c"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr /><h2 id="push-方法"><a href="#push-方法" class="headerlink" title="push() 方法"></a>push() 方法</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token string">"6"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns ["1", "2", "3", "4", "5", "6"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr /><h2 id="toString-方法把数字转换成字符串"><a href="#toString-方法把数字转换成字符串" class="headerlink" title="toString()方法把数字转换成字符串"></a>toString()方法把数字转换成字符串</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> myNum <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">var</span> myString <span class="token operator">=</span> myNum<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// typeof 是判断数据类型</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> myString<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr /><h2 id="index-of-方法来完成查找"><a href="#index-of-方法来完成查找" class="headerlink" title="index of()方法来完成查找"></a>index of()方法来完成查找</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"Blue Sky"</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"Blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns  0</span><span class="token string">"Blue Sky"</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"Ble"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns -1</span><span class="token string">"Blue Sky"</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"Sky"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns  5</span><span class="token string">"Blue Sky"</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"Sky"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns  5</span><span class="token string">"Blue Sky"</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"Sky"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns  5</span><span class="token string">"Blue Sky"</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"Sky"</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns -1</span><span class="token string">"Blue Sky"</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns  0</span><span class="token string">"Blue Sky"</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns 5</span><span class="token string">"Blue Sky"</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns 8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr /><h2 id="字符串方法-toLowerCase-和-toUpperCase-字符串并将所有字符分别转换为小写或大写"><a href="#字符串方法-toLowerCase-和-toUpperCase-字符串并将所有字符分别转换为小写或大写" class="headerlink" title="字符串方法 toLowerCase() 和 toUpperCase() 字符串并将所有字符分别转换为小写或大写"></a>字符串方法 toLowerCase() 和 toUpperCase() 字符串并将所有字符分别转换为小写或大写</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"I like study"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns "i like study"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns "I LIKE STUDY"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr /><h2 id="数字-字符串-字符串"><a href="#数字-字符串-字符串" class="headerlink" title="数字 + 字符串 = 字符串"></a>数字 + 字符串 = 字符串</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> numtosTring <span class="token operator">=</span> <span class="token number">12</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> numtosTring<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr /><h2 id="number-字符串转换为数值"><a href="#number-字符串转换为数值" class="headerlink" title="number() 字符串转换为数值"></a>number() 字符串转换为数值</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true 返回 1，false 返回 0</span><span class="token keyword">var</span> num2 <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回 NaN</span><span class="token keyword">var</span> num3 <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回 0</span><span class="token keyword">var</span> num4 <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"syl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回 NaN</span><span class="token keyword">var</span> num5 <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"   "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果是空字符串返回 0</span><span class="token keyword">var</span> num6 <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num6<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回123，如果是数字型的字符，返回数字</span><span class="token keyword">var</span> num7 <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"123abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num7<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回 NaN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr /><h2 id="parseInt-把字符串转换成整数"><a href="#parseInt-把字符串转换成整数" class="headerlink" title="parseInt() 把字符串转换成整数"></a>parseInt() 把字符串转换成整数</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"12.3abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回 12，如果第一个字符是数字会解析知道遇到非数字结束，只取整，不是约等于</span><span class="token keyword">var</span> num2 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"abc123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回 NaN，如果第一个字符不是数字或者符号就返回 NaN</span><span class="token keyword">var</span> num3 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 空字符串返回 NaN，但是 Number("")返回 0</span><span class="token keyword">var</span> num4 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"520"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回 520</span><span class="token keyword">var</span> num5 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"0xA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr /><h2 id="if-条件语句"><a href="#if-条件语句" class="headerlink" title="if 条件语句"></a>if 条件语句</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我真帅"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"不可能"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>结果输出为：我真帅<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr /><h2 id="if-else-条件语句"><a href="#if-else-条件语句" class="headerlink" title="if else 条件语句"></a>if else 条件语句</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>d <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"今天星期天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>d <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"今天星期一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>d <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"今天星期二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"好多啊，我不想写了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr /><h2 id="switch-case-语句"><a href="#switch-case-语句" class="headerlink" title="switch case 语句"></a>switch case 语句</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"今天星期天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"今天星期一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"今天星期二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"今天星期三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"今天星期四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"今天星期五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"今天星期六"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr /><h2 id="三元运算"><a href="#三元运算" class="headerlink" title="三元运算"></a>三元运算</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">条件表达式？结果 <span class="token number">1</span><span class="token operator">:</span>结果 <span class="token number">2</span><span class="token number">3</span> <span class="token operator">></span> <span class="token number">2</span> <span class="token operator">?</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"3 比 2 大"</span><span class="token punctuation">)</span> <span class="token operator">:</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"3 比 2 小"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr /><h2 id="For-循环"><a href="#For-循环" class="headerlink" title="For 循环"></a>For 循环</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">break</span> 跳出循环<span class="token keyword">continue</span> 跳出迭代<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr /><h2 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr /><h2 id="创建函数"><a href="#创建函数" class="headerlink" title="创建函数"></a>创建函数</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 创建一个名为 f 的函数，它有两个形参 a，b</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用函数 f，传入实参 2 和 3，最终运行结果为在控制台上打印出 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr /><ul><li>sort() 方法，将数组进行排序。</li><li>shift() 方法，删除并返回数组的第一个元素。</li><li>unshift() 方法，向数组的开头添加一个或更多元素，并返回新的长度。</li><li>slice() 方法，从某个已有的数组返回选定的元素。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"z"</span><span class="token punctuation">,</span> <span class="token string">"k"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> <span class="token string">"x"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>arr1 <span class="token operator">+</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">"&lt;br />"</span> <span class="token operator">+</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>arr2 <span class="token operator">+</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>arr2<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br />"</span> <span class="token operator">+</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>arr3 <span class="token operator">+</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>arr3<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br />"</span> <span class="token operator">+</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">function</span> <span class="token function">sortNum1</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span> <span class="token comment">// 从小到大排序</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">var</span> arr4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>arr4 <span class="token operator">+</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>arr4<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>sortNum1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br />"</span> <span class="token operator">+</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">function</span> <span class="token function">sortNum2</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> b <span class="token operator">-</span> a<span class="token punctuation">;</span> <span class="token comment">// 从大到小排序</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">var</span> arr4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>arr4 <span class="token operator">+</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>arr4<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>sortNum2<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br />"</span> <span class="token operator">+</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr /><h2 id="charAt-方法，获取指定位置处字符"><a href="#charAt-方法，获取指定位置处字符" class="headerlink" title="charAt() 方法，获取指定位置处字符"></a>charAt() 方法，获取指定位置处字符</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"Hello world!"</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 以上代码输出为 l</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr /><h2 id="charCodeAt-方法-获取指定位置处字符的-Unicode-编码"><a href="#charCodeAt-方法-获取指定位置处字符的-Unicode-编码" class="headerlink" title="charCodeAt()方法,获取指定位置处字符的 Unicode 编码"></a>charCodeAt()方法,获取指定位置处字符的 Unicode 编码</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"Hello world!"</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 以上代码输出为 l08</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr /><h2 id="concat-方法"><a href="#concat-方法" class="headerlink" title="concat() 方法"></a>concat() 方法</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">-</span> <span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法，连接字符串，等效于 “<span class="token operator">+</span>”，“<span class="token operator">+</span>” 更常用。与数组中的 <span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法相似。<span class="token operator">-</span> <span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法，提取字符串的片断，并在新的字符串中返回被提取的部分（字符串<span class="token operator">-</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法，检索字符串。<span class="token operator">-</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法，返回字符串。<span class="token operator">-</span> <span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法，把字符串转换为小写。<span class="token operator">-</span> <span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法，把字符串转换为大写。<span class="token operator">-</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法，替换字符串中的某部分。<span class="token operator">-</span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法，把字符串分割为字符串数组。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr /><h2 id="Date-对象方法："><a href="#Date-对象方法：" class="headerlink" title="Date 对象方法："></a>Date 对象方法：</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：返回当日的日期和时间（输出的是中国标准时间）。      <span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：从 Date <span class="token function">对象返回一个月中的某一天</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">~</span> <span class="token number">31</span><span class="token punctuation">)</span>。      <span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：从 Date <span class="token function">对象返回一周中的某一天</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">~</span> <span class="token number">6</span><span class="token punctuation">)</span>。      <span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：从 Date <span class="token function">对象返回月份</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">~</span> <span class="token number">11</span><span class="token punctuation">)</span>。      <span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：从 Date 对象以四位数字返回年份。      <span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：返回 Date <span class="token function">对象的小时</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">~</span> <span class="token number">23</span><span class="token punctuation">)</span>。      <span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：返回 Date <span class="token function">对象的分钟</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">~</span> <span class="token number">59</span><span class="token punctuation">)</span>。      <span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：返回 Date <span class="token function">对象的秒数</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">~</span> <span class="token number">59</span><span class="token punctuation">)</span>。      <span class="token function">getMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：返回 Date <span class="token function">对象的毫秒</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">~</span> <span class="token number">999</span><span class="token punctuation">)</span>。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr /><h2 id="Math-对象的常用属性："><a href="#Math-对象的常用属性：" class="headerlink" title="Math 对象的常用属性："></a>Math 对象的常用属性：</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token constant">E</span> ：返回常数 <span class="token function">e</span> <span class="token punctuation">(</span><span class="token number">2.718281828</span><span class="token operator">...</span><span class="token punctuation">)</span>。      <span class="token constant">LN2</span> ：返回 <span class="token number">2</span> <span class="token function">的自然对数</span> <span class="token punctuation">(</span>ln <span class="token number">2</span><span class="token punctuation">)</span>。      <span class="token constant">LN10</span> ：返回 <span class="token number">10</span> <span class="token function">的自然对数</span> <span class="token punctuation">(</span>ln <span class="token number">10</span><span class="token punctuation">)</span>。      <span class="token constant">LOG2E</span> ：返回以 <span class="token number">2</span> 为底的 e <span class="token function">的对数</span> <span class="token punctuation">(</span>log2e<span class="token punctuation">)</span>。      <span class="token constant">LOG10E</span> ：返回以 <span class="token number">10</span> 为底的 e <span class="token function">的对数</span> <span class="token punctuation">(</span>log10e<span class="token punctuation">)</span>。      <span class="token constant">PI</span> ：返回 π（<span class="token number">3.1415926535</span><span class="token operator">...</span><span class="token punctuation">)</span>。      <span class="token constant">SQRT1_2</span> ：返回 <span class="token number">1</span><span class="token operator">/</span><span class="token number">2</span> 的平方根。      <span class="token constant">SQRT2</span> ：返回 <span class="token number">2</span> 的平方根。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr /><h2 id="Math-对象的常用方法："><a href="#Math-对象的常用方法：" class="headerlink" title="Math 对象的常用方法："></a>Math 对象的常用方法：</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">abs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> ：返回 x 的绝对值。      <span class="token function">round</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> ：返回 x 四舍五入后的值。      <span class="token function">sqrt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> ：返回 x 的平方根。      <span class="token function">ceil</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> ：返回大于等于 x 的最小整数。      <span class="token function">floor</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> ：返回小于等于 x 的最大整数。      <span class="token function">sin</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> ：返回 x 的正弦。      <span class="token function">cos</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> ：返回 x 的余弦。      <span class="token function">tan</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> ：返回 x 的正切。      <span class="token function">acos</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> ：返回 x 的反余弦值（余弦值等于 x 的角度），用弧度表示。      <span class="token function">asin</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> ：返回 x 的反正弦值。      <span class="token function">atan</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> ：返回 x 的反正切值。      <span class="token function">exp</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> ：返回 e 的 x <span class="token function">次幂</span> <span class="token punctuation">(</span>e<span class="token operator">^</span>x<span class="token punctuation">)</span>。      <span class="token function">pow</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span> ：返回 n 的 m <span class="token function">次幂</span> <span class="token punctuation">(</span>nm<span class="token punctuation">)</span>。      <span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> ：返回 x <span class="token function">的自然对数</span> <span class="token punctuation">(</span>ln x<span class="token punctuation">)</span>。      <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> ：返回 a<span class="token punctuation">,</span> b 中较大的数。      <span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> ：返回 a<span class="token punctuation">,</span> b 中较小的数。      <span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ：返回大于 <span class="token number">0</span> 小于 <span class="token number">1</span> 的一个随机数。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr /><h2 id="通过对象字面量来创建对象"><a href="#通过对象字面量来创建对象" class="headerlink" title="通过对象字面量来创建对象"></a>通过对象字面量来创建对象</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> student <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        name<span class="token operator">:</span> <span class="token string">"zhangsan"</span><span class="token punctuation">,</span>        age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>        gender<span class="token operator">:</span> <span class="token string">"male"</span><span class="token punctuation">,</span>        <span class="token function-variable function">sayHi</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hi,my name is "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr /><h2 id="通过-new-Object-创建对象"><a href="#通过-new-Object-创建对象" class="headerlink" title="通过 new Object() 创建对象"></a>通过 new Object() 创建对象</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span>student<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span>student<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span>student<span class="token punctuation">.</span>gender <span class="token operator">=</span> <span class="token string">"male"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hi,my name is "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr /><h2 id="通过工厂函数创建对象"><a href="#通过工厂函数创建对象" class="headerlink" title="通过工厂函数创建对象"></a>通过工厂函数创建对象</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createStudent</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> gender</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        student<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        student<span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hi,my name is "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> student<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token function">createStudent</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"male"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr /><h2 id="自定义构造函数"><a href="#自定义构造函数" class="headerlink" title="自定义构造函数"></a>自定义构造函数</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> gender</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hi,my name is "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"male"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr /><h2 id="通过-for…in-语句用于遍历数组或者对象的属性-对数组或者对象的属性进行循环操作"><a href="#通过-for…in-语句用于遍历数组或者对象的属性-对数组或者对象的属性进行循环操作" class="headerlink" title="通过 for…in 语句用于遍历数组或者对象的属性,对数组或者对象的属性进行循环操作"></a>通过 for…in 语句用于遍历数组或者对象的属性,对数组或者对象的属性进行循环操作</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> student <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        name<span class="token operator">:</span> <span class="token string">"zhangsan"</span><span class="token punctuation">,</span>        age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>        gender<span class="token operator">:</span> <span class="token string">"male"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> student<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>student<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr /><h2 id="格式化日期对象"><a href="#格式化日期对象" class="headerlink" title="格式化日期对象"></a>格式化日期对象</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">formatDate</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果 d 不是日期对象的实例，返回空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>d <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">var</span> year <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          month <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>          date <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          hour <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          minute <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          second <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        month <span class="token operator">=</span> month <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">"0"</span> <span class="token operator">+</span> month <span class="token operator">:</span> month<span class="token punctuation">;</span>        date <span class="token operator">=</span> date <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">"0"</span> <span class="token operator">+</span> date <span class="token operator">:</span> date<span class="token punctuation">;</span>        hour <span class="token operator">=</span> hour <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">"0"</span> <span class="token operator">+</span> hour <span class="token operator">:</span> hour<span class="token punctuation">;</span>        minute <span class="token operator">=</span> minute <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">"0"</span> <span class="token operator">+</span> minute <span class="token operator">:</span> minute<span class="token punctuation">;</span>        second <span class="token operator">=</span> second <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">"0"</span> <span class="token operator">+</span> second <span class="token operator">:</span> second<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>          year <span class="token operator">+</span>          <span class="token string">"/"</span> <span class="token operator">+</span>          month <span class="token operator">+</span>          <span class="token string">"/"</span> <span class="token operator">+</span>          date <span class="token operator">+</span>          <span class="token string">" "</span> <span class="token operator">+</span>          hour <span class="token operator">+</span>          <span class="token string">":"</span> <span class="token operator">+</span>          minute <span class="token operator">+</span>          <span class="token string">":"</span> <span class="token operator">+</span>          second        <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">formatDate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr /><h2 id="删除数组中的重复元素"><a href="#删除数组中的重复元素" class="headerlink" title="删除数组中的重复元素"></a>删除数组中的重复元素</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">function</span> <span class="token function">clearArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">var</span> item <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            o<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            o<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">var</span> tmpArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            tmpArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tmpArray<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              tmpArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> tmpArray<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">clearArray</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr /><h2 id="判断一个字符串中出现次数最多的字符，并统计次数"><a href="#判断一个字符串中出现次数最多的字符，并统计次数" class="headerlink" title="判断一个字符串中出现次数最多的字符，并统计次数"></a>判断一个字符串中出现次数最多的字符，并统计次数</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"daskljahiagnaknscsjdwfanalvnahdpwod"</span><span class="token punctuation">;</span>      <span class="token keyword">function</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">var</span> item <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            o<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            o<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">var</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>max <span class="token operator">&lt;</span> o<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            max <span class="token operator">=</span> o<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> tmp<span class="token punctuation">;</span>            tmp <span class="token operator">=</span> key<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"出现次数最多的字符是:"</span> <span class="token operator">+</span> tmp <span class="token operator">+</span> <span class="token string">"出现次数为："</span> <span class="token operator">+</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token function">max</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 蓝桥云课 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5</title>
      <link href="/2022/02/01/HTML5/"/>
      <url>/2022/02/01/HTML5/</url>
      
        <content type="html"><![CDATA[<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span>500px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>300px<span class="token punctuation">;</span><span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">></span></span>支出表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>第一行第一列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>第一行第二列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>第二行第一列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>第二行第二列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><a id="more"></a> <hr /><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>姓名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>密码:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>性别:            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>男            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>女        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>爱好:            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>music<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>唱歌            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>runing<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>跑步            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>swiming<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>游泳        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>照片:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file_img<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>个人描述:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>textarea<span class="token punctuation">"</span></span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>35<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>籍贯:            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>成都<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>成都<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>广州<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>广州<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>四川<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>四川<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>上海<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>上海<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>重置<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br /><hr /><h2 id="日期选择器"><a href="#日期选择器" class="headerlink" title="日期选择器"></a>日期选择器</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>日期选择器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        Date: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_date<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        Month: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>month<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_month<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr /><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>"nav"标签定义导航链接的部分<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>HTML<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>CSS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>JavaScript<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>"header"标签定义文档的页眉<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>网站标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>网站副标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>"footer"标签定义 section 或 document 的页脚<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Copyright @2013-2019 实验楼在线教育<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>aside> 标签表示一个和其余页面内容几乎无关的部分(侧边)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>实验楼简介<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>一个在线学习的网站<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr /><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>datalist 元素用于为文本框提供一个可供选择的列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myColor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>What's your favorite color?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myColor<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myColor<span class="token punctuation">"</span></span> <span class="token attr-name">list</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mySuggestion<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>datalist</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mySuggestion<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>black<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>blue<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>green<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>red<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>white<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>yellow<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>datalist</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr /><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>autocomplete 属性规定表单是否应该启用自动完成功能：自动完成允许浏览器预测对字段的输入，当用户在字段开始键入时，浏览器基于之前键入过的值，应该显示出在字段中填写的选项<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span> <span class="token attr-name">autocomplete</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>on<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        Name:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        E-mail: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">autocomplete</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>off<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr /><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>autofocus 属性规定在页面加载时，域自动地获得焦点。适用于所有"input"标签的类型。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        Name：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_name<span class="token punctuation">"</span></span> <span class="token attr-name">autofocus</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>autofocus<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr /><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>placeholder属性提供一种提示(hint),描述输入域所期待的值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_search<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>实验楼<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr /><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>required 属性规定必须在提交之前填写输入域（不能为空）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_search<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>required<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr /><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>email 类型用于应该包含 e-mail 地址的输入域。在提交表单时，会自动验证 email 域的值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        E-mail: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_email<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr /><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>url 类型用于应该包含 URL 地址的输入域。在提交表单时，会自动验证 url 域的值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    Url: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_url<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr /><h2 id="Canvas绘制三角形"><a href="#Canvas绘制三角形" class="headerlink" title="Canvas绘制三角形"></a>Canvas绘制三角形</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>使用canvas绘制三角形<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mycanvasone<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>520px<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1314px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        对不起，你的浏览器不支持canvas    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token comment">//获取canvas元素</span>        <span class="token keyword">var</span> myCanvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"mycanvasone"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取Context上下文</span>        <span class="token keyword">var</span> ctx <span class="token operator">=</span> myCanvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 开始路径绘制</span>        ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置路径起点，坐标为(20,20)</span>        ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 添加一个(200,200)的新点</span>        ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 添加一个(400,20)的新点</span>        ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建从当前点回到起始点的路径</span>        ctx<span class="token punctuation">.</span><span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置线宽</span>        ctx<span class="token punctuation">.</span>lineWidth <span class="token operator">=</span> <span class="token number">2.0</span><span class="token punctuation">;</span>        <span class="token comment">// 设置线的颜色</span>        ctx<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span> <span class="token string">"#9b9b9b"</span><span class="token punctuation">;</span>        <span class="token comment">// 绘制已定义的路径</span>        ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr /><h2 id="简单Web留言本"><a href="#简单Web留言本" class="headerlink" title="简单Web留言本"></a>简单Web留言本</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>简单Web留言本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>memo<span class="token punctuation">"</span></span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>60<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>新增留言<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>saveStorage(<span class="token punctuation">'</span>memo<span class="token punctuation">'</span>);<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>清空数据<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clearStorage();<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>清空最后一个数据<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clearsingleStorage();<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token comment">//savaStorage是一个新增留言的函数</span>        <span class="token keyword">function</span> <span class="token function">saveStorage</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//获取textarea的value值</span>            <span class="token keyword">var</span> data <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token comment">//获取当前时间</span>            <span class="token keyword">var</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUTCString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//将当前时间作为键名，textarea的value值（也就是用户输入的值）的值作为键值</span>            localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>time<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//显示留言</span>            <span class="token function">showMsg</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//showMsg是一个显示留言的函数</span>        <span class="token keyword">function</span> <span class="token function">showMsg</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">'&lt;table border="1">'</span><span class="token punctuation">;</span>            <span class="token comment">//遍历本地储存数据</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> localStorage<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//获取key值</span>                <span class="token keyword">var</span> key <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//获取value值</span>                <span class="token keyword">var</span> value <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//显示数据</span>                result <span class="token operator">+=</span> <span class="token string">"&lt;tr>&lt;td>"</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token string">"&lt;/td>&lt;td>"</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">"&lt;/td>&lt;/tr>"</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            result <span class="token operator">+=</span> <span class="token string">"&lt;/table>"</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> target <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>            target<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//显示留言</span>        <span class="token function">showMsg</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//clearStorage是一个清空留言的函数</span>        <span class="token keyword">function</span> <span class="token function">clearStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//清空数据</span>            localStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//显示留言</span>            <span class="token function">showMsg</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//clearsingleStorage是一个删除单个数据的函数</span>        <span class="token keyword">function</span> <span class="token function">clearsingleStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//显示留言</span>            <span class="token function">showMsg</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 蓝桥云课 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端知识图谱</title>
      <link href="/2022/01/23/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/"/>
      <url>/2022/01/23/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/</url>
      
        <content type="html"><![CDATA[<h2 id="网络知识"><a href="#网络知识" class="headerlink" title="网络知识"></a>网络知识</h2><ol><li>网络工作原理<br>计算机网络原理：<a href="https://www.bilibili.com/video/BV1xJ41137Q3">https://www.bilibili.com/video/BV1xJ41137Q3</a></li><li>什么是HTTP<br>HTTP协议详解：<a href="https://www.bilibili.com/video/BV1js411g7Fw">https://www.bilibili.com/video/BV1js411g7Fw</a></li><li>浏览器及工作方式<br>浏览器是如何运作的？：<a href="https://www.bilibili.com/video/BV1x54y1B7RE">https://www.bilibili.com/video/BV1x54y1B7RE</a><a id="more"></a></li><li>DNS 及其工作原理<br>DNS基本工作原理：<a href="https://www.bilibili.com/video/BV1GW411j7Ts">https://www.bilibili.com/video/BV1GW411j7Ts</a><br>直观DNS科普：<a href="https://www.bilibili.com/video/BV1F54y1R7BC">https://www.bilibili.com/video/BV1F54y1R7BC</a></li><li>域名相关知识<br>域名解析完整讲解：<a href="https://www.bilibili.com/video/BV1zA411x7Pj">https://www.bilibili.com/video/BV1zA411x7Pj</a></li><li>云服务相关知识<br>揭秘阿里云服务器：<a href="https://www.bilibili.com/video/BV1Rt411u7k4">https://www.bilibili.com/video/BV1Rt411u7k4</a><h2 id="超文本标记语言"><a href="#超文本标记语言" class="headerlink" title="超文本标记语言"></a>超文本标记语言</h2>（HTML）</li><li>HTML基础知识学习<br>HTML全套基础教程：<a href="https://www.bilibili.com/video/BV11t411K74Q">https://www.bilibili.com/video/BV11t411K74Q</a></li><li>HTML 编写规则 和语义化写法<br>HTML 速成：<a href="https://www.bilibili.com/video/BV1vs411M7aT">https://www.bilibili.com/video/BV1vs411M7aT</a></li><li>表单和验证<br>html5表单验证：<a href="https://www.bilibili.com/video/BV16K4y1Z7Gb">https://www.bilibili.com/video/BV16K4y1Z7Gb</a></li><li>公约和最佳实践方法<br>前端代码规范秘籍：<a href="https://www.bilibili.com/video/BV19P4y147Jz">https://www.bilibili.com/video/BV19P4y147Jz</a></li><li>SEO 基础知识<br>SEO优化学习教程：<a href="https://www.bilibili.com/video/BV1fE411J7ya">https://www.bilibili.com/video/BV1fE411J7ya</a><br>层叠样式表<br>（CSS)</li><li>CSS 基础知识学习<br>CSS3基础教程：<a href="https://www.bilibili.com/video/BV1Bx411u7cS">https://www.bilibili.com/video/BV1Bx411u7cS</a><br>CSS3全套教程：<a href="https://www.bilibili.com/video/BV1et411q74F">https://www.bilibili.com/video/BV1et411q74F</a></li><li>页面切图和布局实现<ul><li>浮动布局</li><li>浮动布局：<a href="https://www.bilibili.com/video/BV1Zs411j7Z3">https://www.bilibili.com/video/BV1Zs411j7Z3</a></li><li>定位布局</li><li>CSS定位布局：<a href="https://www.bilibili.com/video/BV1ni4y1g7tc">https://www.bilibili.com/video/BV1ni4y1g7tc</a></li><li>Display</li><li>display&amp;visibility：<a href="https://www.bilibili.com/video/BV1HJ411M7CM">https://www.bilibili.com/video/BV1HJ411M7CM</a></li><li>盒子模型</li><li>CSS盒子模型与定位：<a href="https://www.bilibili.com/video/BV1P7411G7BW">https://www.bilibili.com/video/BV1P7411G7BW</a></li><li>Grid 布局</li><li>如何用grid：<a href="https://www.bilibili.com/video/BV14C4y1W7oA">https://www.bilibili.com/video/BV14C4y1W7oA</a></li><li>Flex 布局</li><li>Flex伸缩布局：<a href="https://www.bilibili.com/video/BV1BJ41197XE">https://www.bilibili.com/video/BV1BJ41197XE</a></li></ul></li><li>页面响应式布局设计<br>六个案例学会响应式布局：<a href="https://www.bilibili.com/video/BV1ov411k7sm">https://www.bilibili.com/video/BV1ov411k7sm</a><br>浏览器脚本语言<br>(JavaScript)</li><li>JavaScript基础语法和知识<br>JavaScript基础语法：<a href="https://www.bilibili.com/video/BV1Sy4y1C7ha">https://www.bilibili.com/video/BV1Sy4y1C7ha</a></li><li>使用JavaScript 操作 DOM元素<br>JS必会的DOM BOM操作：<a href="https://www.bilibili.com/video/BV1k4411w7sV">https://www.bilibili.com/video/BV1k4411w7sV</a></li><li>Ajax 异步请求相关知识学习<br>Ajax入门到精通：<a href="https://www.bilibili.com/video/BV1WC4y1b78y">https://www.bilibili.com/video/BV1WC4y1b78y</a></li><li>ES6 以上版本 的JavaScript<br>ES6-ES11新特性：<a href="https://www.bilibili.com/video/BV1uK411H7on">https://www.bilibili.com/video/BV1uK411H7on</a><h2 id="版本控制管理系统"><a href="#版本控制管理系统" class="headerlink" title="版本控制管理系统"></a>版本控制管理系统</h2>Version Control System</li><li>Git的基本用法<br>Git最新教程：<a href="https://www.bilibili.com/video/BV1FE411P7B3">https://www.bilibili.com/video/BV1FE411P7B3</a></li><li>相关平台/软件的使用<ul><li>GitHub</li><li>十分钟学会Github：<a href="https://www.bilibili.com/video/BV1yo4y1d7UK">https://www.bilibili.com/video/BV1yo4y1d7UK</a></li><li>GitLab</li><li>gitlab使用说明：<a href="https://www.bilibili.com/video/BV11E411x7Uv">https://www.bilibili.com/video/BV11E411x7Uv</a></li><li>Gitee</li><li>这个看中文网址就可以了，目前B站还没有很好的视频介绍<br>网络安全相关知识<br>Web Security Knowledge</li></ul></li><li>HTTPS 原理和使用<br>你连HTTPS原理都不懂：<a href="https://www.bilibili.com/video/BV1Up4y1i7PG">https://www.bilibili.com/video/BV1Up4y1i7PG</a></li><li>CORS 跨域请求和安全知识<br>什么是CORS：<a href="https://www.bilibili.com/video/BV1Kt411E76z">https://www.bilibili.com/video/BV1Kt411E76z</a></li><li>内容安全策略<br>网络渗透：<a href="https://www.bilibili.com/video/BV1kh411W7Vv">https://www.bilibili.com/video/BV1kh411W7Vv</a></li><li>OWASP 安全风险知识<br>OWASP  TOP10：<a href="https://www.bilibili.com/video/BV1ey4y1V7Jj">https://www.bilibili.com/video/BV1ey4y1V7Jj</a><br>包管理工具<br>Package Managers</li><li>npm<br>包管理工具：<a href="https://www.bilibili.com/video/BV1Dv411W7XP">https://www.bilibili.com/video/BV1Dv411W7XP</a></li><li>yarn<br>Yarn入门：<a href="https://www.imooc.com/learn/766">https://www.imooc.com/learn/766</a>  (B站没有，推荐这个免费)<br>CSS 预处理 语言<br>CSS Preprocessors</li><li>Sass<br>SCSS从入门到实战：<a href="https://www.bilibili.com/video/BV1Zg4y1v75U">https://www.bilibili.com/video/BV1Zg4y1v75U</a></li><li>PostCSS<br>B站没太好的视频，建议买书《深入PostCSS Web设计》</li><li>Less<br>前端less教程：<a href="https://www.bilibili.com/video/BV1YW411T7vd">https://www.bilibili.com/video/BV1YW411T7vd</a><br>构建工具<br>Build Tools</li><li>任务执行命令<br>[Task Runners]<ul><li>npm scripts</li><li>npm包管理应用：<a href="https://www.bilibili.com/video/BV1Dv411W7XP">https://www.bilibili.com/video/BV1Dv411W7XP</a></li><li>Gulp</li><li>Gulp入门：<a href="https://www.bilibili.com/video/BV1yA411s72G">https://www.bilibili.com/video/BV1yA411s72G</a></li></ul></li><li>打包工具<ul><li>Webpack</li><li>Webpack从入门到精通：<a href="https://www.bilibili.com/video/BV1e7411j7T5">https://www.bilibili.com/video/BV1e7411j7T5</a></li><li>Parcel</li><li>Parcel初体验：<a href="https://www.bilibili.com/video/BV1Pa4y147Kf">https://www.bilibili.com/video/BV1Pa4y147Kf</a></li></ul></li><li>代码格式化工具<ul><li>Prettier</li><li>Prettier和ESLint使用：<a href="https://www.bilibili.com/video/BV183411r7YK">https://www.bilibili.com/video/BV183411r7YK</a></li><li>ESLint</li><li>ESLint基础入门：<a href="https://space.bilibili.com/390120104/search/video?keyword=ESLint">https://space.bilibili.com/390120104/search/video?keyword=ESLint</a><h2 id="三大前端框架"><a href="#三大前端框架" class="headerlink" title="三大前端框架"></a>三大前端框架</h2>Web Framework<br>React.js<br>React基础视频：<a href="https://www.bilibili.com/video/BV1g4411i7po">https://www.bilibili.com/video/BV1g4411i7po</a><br>React全家桶：<a href="https://www.bilibili.com/video/BV1wy4y1D7JT">https://www.bilibili.com/video/BV1wy4y1D7JT</a><br>React实战博客：<a href="https://www.bilibili.com/video/BV1CJ411377B">https://www.bilibili.com/video/BV1CJ411377B</a><br>React商城实战：<a href="https://www.bilibili.com/video/BV1i5411c7xp">https://www.bilibili.com/video/BV1i5411c7xp</a><br>Vue.js<br>Vue2全家桶：<a href="https://www.jspang.com/detailed?id=57">https://www.jspang.com/detailed?id=57</a><br>Vue3全家桶：<a href="https://www.jspang.com/detailed?id=67">https://www.jspang.com/detailed?id=67</a><br>vuejs从入门到精通：<a href="https://www.bilibili.com/video/BV1Zy4y1K7SH">https://www.bilibili.com/video/BV1Zy4y1K7SH</a><br>Angular<br>Angular基础：<a href="https://www.bilibili.com/video/BV1Wx411R7qt">https://www.bilibili.com/video/BV1Wx411R7qt</a><h2 id="Web-组件化编程"><a href="#Web-组件化编程" class="headerlink" title="Web 组件化编程"></a>Web 组件化编程</h2>Web Components<br>HTML Templates<br>Custom Elements<br>Shadow DOM<br>概要: 此部分内容没有找到合适视频<h2 id="CSS-相关框架"><a href="#CSS-相关框架" class="headerlink" title="CSS 相关框架"></a>CSS 相关框架</h2>CSS Frameworks<br>BootStrap<br>一周学会BootStrap：<a href="https://www.bilibili.com/video/BV1Lx411v73k">https://www.bilibili.com/video/BV1Lx411v73k</a><br>Material UI<br>Material  UI入门教程：<a href="https://www.bilibili.com/video/BV12J411s75b">https://www.bilibili.com/video/BV12J411s75b</a><br>Materialize CSS<br>Materialize CSS Crash Course：<a href="https://www.bilibili.com/video/BV1gx411h7Y5">https://www.bilibili.com/video/BV1gx411h7Y5</a><br>ReactStrap<h2 id="JavaScript-语法糖"><a href="#JavaScript-语法糖" class="headerlink" title="JavaScript 语法糖"></a>JavaScript 语法糖</h2>Type Checkers<br>TypeScript<br>TypeScript从入门到精通：<a href="https://www.bilibili.com/video/BV1qV41167VD">https://www.bilibili.com/video/BV1qV41167VD</a><br>Flow<h2 id="服务端渲染"><a href="#服务端渲染" class="headerlink" title="服务端渲染"></a>服务端渲染</h2>Server Side  Rendering （SSR）<br>React.js</li><li>Next.js</li><li>Next.js入门教程：<a href="https://www.bilibili.com/video/BV13441117KK">https://www.bilibili.com/video/BV13441117KK</a></li><li>GatsbyJS</li><li>GatsbyJS 实战：<a href="https://www.bilibili.com/video/BV1i4411T7AR">https://www.bilibili.com/video/BV1i4411T7AR</a> （英文）<br>Vue.js</li><li>Nuxt.js</li><li>Nuxt.js入门：<a href="https://www.bilibili.com/video/BV1Xt41117Kg">https://www.bilibili.com/video/BV1Xt41117Kg</a><br>Angular</li><li>Universal<h2 id="图形化编程"><a href="#图形化编程" class="headerlink" title="图形化编程"></a>图形化编程</h2>GraphQL<br>Cocos Creator<br>Cocos 图形游戏开发：<a href="https://www.bilibili.com/video/BV1sA411Y7x4">https://www.bilibili.com/video/BV1sA411Y7x4</a><br>Three.js<br>Three.js基础教程-英文：<a href="https://www.bilibili.com/video/BV1ks411W78i">https://www.bilibili.com/video/BV1ks411W78i</a><br>Three.js教程：<a href="https://www.bilibili.com/video/BV1va4y1p7QB">https://www.bilibili.com/video/BV1va4y1p7QB</a><h2 id="静态站点生成器"><a href="#静态站点生成器" class="headerlink" title="静态站点生成器"></a>静态站点生成器</h2>Static Site Generators<br>Next.js<br>Next.js入门教程：<a href="https://www.bilibili.com/video/BV13441117KK">https://www.bilibili.com/video/BV13441117KK</a><br>GatsbyJS<br>GatsbyJS 实战：<a href="https://www.bilibili.com/video/BV1i4411T7AR">https://www.bilibili.com/video/BV1i4411T7AR</a> （英文）<br>Nuxt.js<br>Nuxt.js入门：<a href="https://www.bilibili.com/video/BV1Xt41117Kg">https://www.bilibili.com/video/BV1Xt41117Kg</a><br>Vuepress<br>Vuepress入门到精通：<a href="https://www.bilibili.com/video/BV1vb411m7NY">https://www.bilibili.com/video/BV1vb411m7NY</a><br>Hugo<br>10分钟搭建个人网站：<a href="https://www.bilibili.com/video/BV1x64y117PX">https://www.bilibili.com/video/BV1x64y117PX</a><h2 id="移动App开发"><a href="#移动App开发" class="headerlink" title="移动App开发"></a>移动App开发</h2>Mobile Applications<br>React  Native<br>ReactNatvie基础：<a href="https://www.bilibili.com/video/BV1Eg4y16735">https://www.bilibili.com/video/BV1Eg4y16735</a><br>ReactNatvie实战：<a href="https://www.bilibili.com/video/BV15K411s75p">https://www.bilibili.com/video/BV15K411s75p</a><br>UniApp<br>Uni-App从入门到实战：<a href="https://www.bilibili.com/video/BV1BJ411W7pX">https://www.bilibili.com/video/BV1BJ411W7pX</a><br>Uni-App美团外卖：<a href="https://www.bilibili.com/video/BV1Zt4y117RR">https://www.bilibili.com/video/BV1Zt4y117RR</a><br>Flutter<br>Flutter基础：<a href="https://www.bilibili.com/video/BV15t411U7yf">https://www.bilibili.com/video/BV15t411U7yf</a><br>Flutter实战：<a href="https://www.bilibili.com/video/BV1kt411B7mu">https://www.bilibili.com/video/BV1kt411B7mu</a><br>Ionic<br>Ionic入门：<a href="https://www.bilibili.com/video/BV1Ub41117q5">https://www.bilibili.com/video/BV1Ub41117q5</a><h2 id="桌面应用开发"><a href="#桌面应用开发" class="headerlink" title="桌面应用开发"></a>桌面应用开发</h2>Desktop Applications<br>Electron<br>Electron入门：<a href="https://www.bilibili.com/video/BV1QB4y1F722">https://www.bilibili.com/video/BV1QB4y1F722</a><br>Electron基础：<a href="https://www.bilibili.com/video/BV177411s7Lt">https://www.bilibili.com/video/BV177411s7Lt</a></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技术胖收藏夹分享</title>
      <link href="/2022/01/23/%E6%8A%80%E6%9C%AF%E8%83%96%E6%94%B6%E8%97%8F%E5%A4%B9%E5%88%86%E4%BA%AB/"/>
      <url>/2022/01/23/%E6%8A%80%E6%9C%AF%E8%83%96%E6%94%B6%E8%97%8F%E5%A4%B9%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="自学前端程序-私藏工具和网站分享"><a href="#自学前端程序-私藏工具和网站分享" class="headerlink" title="自学前端程序 私藏工具和网站分享"></a>自学前端程序 私藏工具和网站分享</h1><h2 id="01-JavaScript"><a href="#01-JavaScript" class="headerlink" title="01.JavaScript"></a>01.JavaScript</h2><ul><li><a href="https://wangdoc.com/javascript/">JavaScript 教程 | 通俗易懂的JavaScript教程</a></li><li><a href="https://es6.ruanyifeng.com/">ES6 入门教程 | 通俗易懂的ES6入门教程</a></li><li><a href="https://javascript30.com/">JavaScript 30  |  使用原生JavaScript在30天内完成30个项目</a><a id="more"></a></li><li><a href="https://zh.javascript.info/">现代 JavaScript 教程 |  最近很流行的JavaScript教程</a></li><li><a href="https://blog.poetries.top/node-learning-notes/">Node.js学习指南 | 系统的Node.js学习教程和笔记系统整理</a></li><li><a href="https://github.com/ryanmcdermott/clean-code-javascript">JS 代码规范 | 优秀的 JS代码规范</a></li><li><a href="https://github.com/xcatliu/typescript-tutorial">TypeScript 教程 | 通俗易懂的TypeScript教程</a></li><li><a href="https://jspang.com/detailed?id=63">TypeScript 教程 |  最好的TypeScript 视频+图文教程</a></li></ul><h2 id="02-CSS样式"><a href="#02-CSS样式" class="headerlink" title="02.CSS样式"></a>02.CSS样式</h2><ul><li><a href="https://lhammer.cn/You-need-to-know-css/#/zh-cn/">CSS Tricks 效果大全 | CSS的各种效果实现 有很多动画效果</a></li><li><a href="https://github.com/chokcoco/CSS-Inspiration">CSS Inspiration |  CSS灵感的诞生地  我每天都的网站</a></li><li><a href="https://github.com/QiShaoXuan/css_tricks"> CSS 常用样式 |  有很多常用的CSS样式</a></li><li><a href="https://animista.net/"> Animista | CSS动画库  主打按需定制CSS动画效果</a></li><li><a href="https://animista.net/"> Animista | CSS动画库  主打按需定制CSS动画效果</a></li><li><a href="https://cssminifier.com/"> CSS Minifier | 在线CSS代码简化/压缩工具</a></li><li><a href="https://sass.bootcss.com/documentation"> Sass: Sass 文档 | Sass 中文网  成熟、稳定、强大的CSS扩展语言</a></li><li><a href="https://less.bootcss.com/"> Less 快速入门 | Less.js 中文文档 将CSS赋予了动态语言特性的样式语言</a></li><li><a href="https://stylus-lang.com/"> stylus | CSS扩展  富有变现里、动态、健壮的CSS</a></li></ul><h2 id="03-算法数据"><a href="#03-算法数据" class="headerlink" title="03.算法数据"></a>03.算法数据</h2><ul><li><a href="http://github.com/trekhleb/javascript-algorithms"> JavaScript 算法与数据结构 | 多种基于JavaScript的算法与数据结构</a></li><li><a href="https://github.com/azl397985856/leetcode"> leetcode 解题之路 |  私藏LeetCode解题攻略 </a></li><li><a href="https://github.com/MisterBooo/LeetCodeAnimation"> 五分钟学算法 |  每天拿出五分钟  学学算法  比如上个厕所就学了 </a></li><li><a href="https://github.com/biaochenxuying/blog/issues/43">数据结构与算法项目推荐 | Github上170K+Star的前端学习数据结构和算法题目 </a></li><li><a href="https://github.com/biaochenxuying/blog/issues/42">JavaScript  十大经典排序算法 | JavaScript排序必会题目  作者功力很深 值得学习 </a></li><li><a href="https://github.com/algorithm-visualizer/algorithm-visualizer">算法可视化工具 |  用可视化工具和交互方式 让你从代码中可视化算法 </a></li><li><a href="https://visualgo.net/en">算法可视化来源 </a></li><li><a href="https://github.com/skidding/illustrated-algorithms">算法的工作方式 | 变量和操作的可视化表示 增强了控制流和实际源代码 </a></li></ul><h2 id="04-前端面试"><a href="#04-前端面试" class="headerlink" title="04.前端面试"></a>04.前端面试</h2><ul><li><a href="https://blog.poetries.top/FE-Interview-Questions/">前端面试常考问题整理 |  按模块和知识点分类</a></li><li><a href="https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions">前端开发面试题</a></li><li><a href="https://github.com/h5bp/Front-end-Developer-Interview-Questions/">WEB前端面试宝典</a></li><li><a href="https://github.com/shfshanyue/blog/blob/master/post/juejin-interview.md">掘金前端面试题合集</a></li><li><a href="https://yuchengkai.cn/">前端面试图谱</a></li><li><a href="https://github.com/biaochenxuying/blog/issues/47">前端面试开源项目汇总 | Github上100K+ Star 的前端面试开源项目汇总</a></li></ul><h2 id="05-技术社区"><a href="#05-技术社区" class="headerlink" title="05.技术社区"></a>05.技术社区</h2><ul><li><a href="https://github.com/">GitHub  |  高质量内容创作和分享平台</a></li><li><a href="https://stackoverflow.com/">Stackoverflow |一个回答技术问题的网站</a></li><li><a href="https://juejin.cn/">掘金 | 国内的很多优质前端文章都掘金</a></li><li><a href="https://www.cnblogs.com/">博客园  | 一个很纯粹的技术博客平台</a></li><li><a href="https://www.zhihu.com/">知乎 |  很多程序人喜欢泡在知乎</a></li><li><a href="https://www.csdn.net/">CSDN  | 老牌社区  程序员必上的一个社区</a></li><li><a href="https://www.v2ex.com/">v2ex  | 程序员分享和探索的社区</a></li><li><a href="https://segmentfault.com/">segmentfault  | 低调技术博客社区</a></li><li><a href="https://cnodejs.org/">Node.js 中文社区 |  node专业中文社区</a></li><li><a href="https://www.smashingmagazine.com/">博客杂志站点 | 一个 web 技术类的博客杂志站点</a></li><li><a href="https://www.jstips.co/">JS 技术的网站 | 每天推出一个JS技巧的网站</a></li><li><a href="https://www.jstips.co/">W3Cplus | 推广国内行业的技术博客</a></li><li><a href="https://docschina.org/">印记中文 | 最权威的技术中文文档社区</a></li></ul><h2 id="06-前端博客"><a href="#06-前端博客" class="headerlink" title="06.前端博客"></a>06.前端博客</h2><ul><li><a href="https://jspang.com/">技术胖博客 |  专注前端 每年100集免费前端视频</a></li><li><a href="http://www.alloyteam.com/">腾讯Alloy Team  | 腾讯前端博客 每天必看</a></li><li><a href="https://isux.tencent.com/">腾讯用户体验博客 | 专注于前端用户体验</a></li><li><a href="https://fed.taobao.org/">淘系前端博客 |  淘宝前端博客 代表中国最强前端实力</a></li><li><a href="https://aotu.io/">京东凹凸实验室  |  京东前端技术博客</a></li><li><a href="https://zhuanlan.zhihu.com/ElemeFE">饿了么前端博客  |  知乎上的最强前端博客</a></li><li><a href="http://fex.baidu.com/">百度前端博客  |  百度前端团队旗下博客</a></li><li><a href="https://75.team/">360奇舞团  |  360公司前端团队</a></li><li><a href="https://tech.meituan.com/">美团技术博客  |  美团技术团队博客</a></li></ul><h2 id="07-构建工具"><a href="#07-构建工具" class="headerlink" title="07.构建工具"></a>07.构建工具</h2><ul><li><a href="https://www.npmjs.com/">NPM |  包管理 和 项目构建工具</a></li><li><a href="https://webpack.js.org/">webpack  | 前端最流行的项目构建工具</a></li><li><a href="https://yarnpkg.com/">Yarn  |  后起之秀 优秀的包管理和构建工具</a></li><li><a href="https://www.gulpjs.com.cn/">Gulp  |  老牌构建工具</a></li><li><a href="https://babeljs.io/">Babel  | ES6构建转换工具</a></li><li><a href="https://cn.eslint.org/">ESLint  | 可组装的JavaScript和JSX检查工具</a></li><li><a href="https://www.postcss.com.cn/">PostCSS | 用JavaScript转换CSS代码的工具</a></li></ul><h2 id="08-部署工具"><a href="#08-部署工具" class="headerlink" title="08.部署工具"></a>08.部署工具</h2><ul><li><a href="https://pages.github.com/">Github Page  | Github提供的免费静态网站托管服务</a></li><li><a href="https://www.netlify.com/">Netlify  |  30秒内部署你的网站</a></li><li><a href="https://vercel.com/">Vercel  |  快速部署你的网站 国外很流行</a></li><li><a href="https://surge.sh/">Surge  |  一个命令部署你的网站</a></li><li><a href="https://www.heroku.com/">Heroku  |  运动构建 、 运行你的网站和应用</a></li></ul><h2 id="09-静态站点搭建"><a href="#09-静态站点搭建" class="headerlink" title="09.静态站点搭建"></a>09.静态站点搭建</h2><ul><li><a href="https://hexo.io/zh-cn/">Hexo  |  最流行的静态博客程序 Markdown编写 生成静态站点</a></li><li><a href="https://www.vuepress.cn/">VuePress  |  Vue驱动的静态网站生成器</a></li><li><a href="https://www.gitbook.com/">GitBook  | 现代化的文档平台，支持团队协作</a></li></ul><h2 id="10-前端代码规范"><a href="#10-前端代码规范" class="headerlink" title="10.前端代码规范"></a>10.前端代码规范</h2><ul><li><a href="https://tgideas.qq.com/doc/index.html">Tgideas | 腾讯前端代码规范 值得参考</a></li><li><a href="https://guide.aotu.io/index.html">京东  |  京东前端代码规范文档 分类详细</a></li><li><a href="https://codeguide.bootcss.com/">Bootstrap编码规范  |  适合个人和小团队使用的代码规范 不复杂</a></li><li><a href="https://es6.ruanyifeng.com/#docs/style">ES6 编程风格  | 阮一峰编写的ES6代码规范  值得每个人阅读并参考</a></li><li><a href="https://github.com/airbnb/javascript">Airbnb  前端代码规范  |  国外企业的前端代码规范</a></li><li><a href="https://eslint.org/">ESLint  |  代码规范检查和格式化工具</a></li><li><a href="https://prettier.io/">Prettier  | VSCode 最热门的代码格式化工具  让你写出漂亮的代码</a></li></ul><h2 id="11-调试抓包"><a href="#11-调试抓包" class="headerlink" title="11.调试抓包"></a>11.调试抓包</h2><ul><li><a href="https://wproxy.org/whistle/">Whistle  |  代理抓包工具  我一直在用的工具 很好很强大</a></li><li><a href="https://www.telerik.com/fiddler">Fiddler  |  使用人数最多的抓包工具</a></li></ul><h2 id="12-在线工具"><a href="#12-在线工具" class="headerlink" title="12.在线工具"></a>12.在线工具</h2><ul><li><a href="https://codepen.io/">CodePen  |  前端在线测试和演示工具  国外站点</a></li><li><a href="https://caniuse.com/">Can  I  use |  Web前端兼容性列表</a></li><li><a href="https://tinypng.com/">TinyPNG  |  PNG/JPG 图片在线压缩工具</a></li><li><a href="https://www.umeng.com/">CNZZ |  老牌站点统计工具  5年前国内站长必上网站</a></li><li><a href="https://web.dev/measure/">web.dev  |  评测网站性能  基于Lighthouse</a></li><li><a href="https://www.shapedivider.app/">Shape Divider  | 定制各种形状SVG的工具</a></li><li><a href="https://gtmetrix.com/">GTmetrix  |  网页性能在线分析工具</a></li><li><a href="https://carbon.now.sh/">Carbon  |  代码转图片工具  </a></li><li><a href="https://www.wappalyzer.com/">Wappalyzer  |  检测某个网站的技术栈  </a></li><li><a href="https://unbug.github.io/codelf">CODEIF | 变量方法起名工具  人工智能加持  </a></li><li><a href="https://tool.lu/"> tool.lu  |  程序员在线工具大全   </a></li></ul><h2 id="13-开发工具"><a href="#13-开发工具" class="headerlink" title="13.开发工具"></a>13.开发工具</h2><ul><li><a href="https://code.visualstudio.com/"> VSCode  |  前端最流行的编辑器   </a></li><li><a href="https://www.sublimetext.com/"> Sublime Text  |  轻量级代码编辑工具 曾经我的最爱   </a></li><li><a href="https://www.jetbrains.com/webstorm/"> WebStom |  忠爱粉最多的编辑器 </a></li><li><a href="https://atom.io/"> Atom  |   用的人很多  我却不喜欢的编辑器 </a></li><li><a href="https://www.typora.io/"> Typora |  程序人Mrakdown笔记  一直在用的笔记工具 </a></li></ul><h2 id="14-开发者大会"><a href="#14-开发者大会" class="headerlink" title="14.开发者大会"></a>14.开发者大会</h2><ul><li><a href="https://fequan.com/"> Vue.js开发者大会 |  前端人必须关注的前端大会 </a></li><li><a href="https://jsconfchina.com/"> 中国JS开发者大会  |  公司每年必组织参加的技术大会 </a></li><li><a href="https://css.w3ctech.com/"> CSS开发者大会 |  提高CSS技术的开发者大会  打开视野 面向世界 </a></li><li><a href="https://www.alibabaf2e.com/"> D2前端开发者大会 |  阿里组织的大会 可以看直播  </a></li></ul><h2 id="15-WEB图标"><a href="#15-WEB图标" class="headerlink" title="15.WEB图标"></a>15.WEB图标</h2><ul><li><a href="http://www.fontawesome.com.cn/"> Font Awesome  |  网站开发最流行的图标集  </a></li><li><a href="https://feathericons.com/"> Feather |  简洁美观的开源图标  </a></li><li><a href="https://material.io/resources/icons/"> Material  Design Icons  |  轻快、精美的符号图标  </a></li><li><a href="https://tablericons.com/"> Tabler Icons | 681枚可定制的开源SVG图标  </a></li><li><a href="https://simpleicons.org/"> 常见品牌的SVG图标  </a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DAY04  笔记</title>
      <link href="/2022/01/16/DAY04-%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/01/16/DAY04-%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>1、开发第一个Java程序：HelloWorld</p><a id="more"></a><p>   1.1、程序写完之后，一定要Ctrl + S 进行保存<br>        ⚠另外需要注意的是：Java源代码只要修改，必须重新编译。<br>        重新生成.class字节码文件。</p><p>1.2、编译阶段<br>        怎么编译？使用什么命令？这个命令怎么用？<br>        需要使用的命令是：javac.exe（存放在C盘的Java目录里）<br>        这个命令需要先测试一下，打开DOS命令窗口，看看javac命令是否可用。</p><p>测试javac后发现windows找不到文件在哪？<br>            配置path环境变量。<br>            配置path环境变量的步骤：<br>                桌面计算机上右键- -&gt;属性- -&gt;高级系统设置- -&gt;环境变量<br>            让javac.exe能用，配置哪个路径到path中？<br>                找到javac.exe的文件路径复制到path变量里。</p><p>⚠注意：修改完环境变量后，DOS命令窗口必须关闭重新打开才会起作用。</p><p>java命令怎么用？<br>    语法格式：<br>        javac java源文件的路径<br>什么是java源文件？</p><pre><code>   java源文件的名字是以“.java”结尾，该文件中写了java源代码。○ java源文件的路径：直接把Java源文件拖入DOS命令窗口就出现java源文件的路径。○ 在java源文件上方的路径里输入cmd即可帮助cmd快速定位到java源文件路径。</code></pre><p>1.3、运行阶段</p><pre><code>运行的前提是：class文件（字节码）生成了。没有字节码文件程序是无法运行的。假设该文件的名字叫做：HelloWorld.class那么HelloWorld就称为一个类名。</code></pre><p>怎么运行？使用哪个命令？</p><pre><code>使用JDK的bin目录下的：javac.exe命令来运行。</code></pre><p>先在DOS命令窗口中测试javac.exe命令是否可以使用。</p><pre><code>    Java -version</code></pre><p>“java.exe“这个命令怎么用，语法格式是什么？？</p><pre><code>格式：Java + 空格 +类名</code></pre><p>运行java程序需要哪些步骤？<br>        第一步：先使用cd命令切换到xxx.class文件所在的路径。<br>                或者在文件所在路径输入cmd定位。<br>            第二步：执行java 类名<br>                切记：Java命令后面只要是跟路径，就一定不行，只能是跟类名。</p><p>2、“java HelloWorld”的执行过程及原理</p><pre><code>C:\Users\Carry\Desktop\JAVA&gt;java java1 敲完回车后发生什么？    第一步：会先启动JVM（java虚拟机）    第二步：JVM启动之后，JVM会去启动&quot;类加载器classloader“        类加载器的作用：加载类的，本质上类加载器负责去找“类”对应的“字节码”文件。        假设是“java HelloWorld”，那么类加载器会去硬盘上搜索：HelloWorld.class文件。        假设是“java test”，那么类加载器会去硬盘上搜索：test.class文件。</code></pre><p>类加载器如果在硬盘上找不到对应的字节码文件的话会报错，报错什么内容？</p><p>错误：找不到或无法加载主类<br>            类加载器如果在硬盘上找到了对应的字节码文件，类加载器会将该字节码文件装载到JVM当中，JVM启动“解释器”将字节码解释为“10101011…”这种的二进制码，操作系统执行二进制码和硬件交互。</p><p>问题1：默认情况下，类加载器去硬盘哪里找对应的字节码文件？<br>        Java 类目执行后，类加载器会在当前路径下找对应的字节码文件加载。</p><p>问题2：能不能给类加载器指定一个路径，让类加载器去指定的路径下加载字节码文件？<br>        可以的，但我们要设置一个环境变量，叫做：class.path。</p><p>问题3：class.path是一个环境变量，是给谁指路的？<br>        是给“类加载器”指路的。<br>        classpath环境变量不属于windows，classpath环境变量隶属于java。<br>        在没有配置环境变量的classpath的时候，默认从但前路径下加载。<br>        如果配置了classpath环境变量之后，只能去指定的路径下加载了。</p><p>⚠非常重要的一个特点：配置了classpath=D:\xxxx目录之后，类加载器只会去xxxx目录找对应的字节码文件。<br>        classpath环境变量不需要配置，到JavaWeb时才需要配置classpath环境变量。</p><p>3、在高版本的JDK当中，有这样一个特性，可以一步到位：<br>    Java x\z\y.java<br>    java后面加源文件的路径。<br>    这个特性是为了简化开发而提出，但实际上底层的实现原理还是和以前一样的，以上命令在执行过程中，还是会先进行编译，然后再运行。<br>    并且以上的运行方式，编译生成的class文件在硬盘上不存在，看不见。</p><p>4、关于第一个Java程序代码的解释说明（注释）：<br>    注释在程序中不起作用，只是对程序进行解释说明。<br>    /* 1、什么是注释，有什么用？<br>        注释是对Java源代码的解释说明<br>        注释可以帮程序员更好地理解程序<br>    2、注释信息只保存在Java源文件当中，Java源文件编译生成的字节码class文件中是没有注释信息的<br>    3、程序员应有良好的写注释习惯。<br>    4、另外这种注释可以注释多行内容。 */</p><pre><code>// 这种是单行注释，只注释两个斜杠后面的内容。</code></pre><p>5、⚠注意：</p><pre><code>1、在JAVA中任何有效的代码必须写到“类体”当中，最外层必须是一个类的定义。2、public表示公开的，class表示定义一个类，Test是一个类名。类名后面必须是一对大括号，这一对大括号被称为“类体”3、括号必须是成对的。并且建议都要成对编写，这样才不会丢掉。&#123;&#125;、[]、()public class Test  //声明/定义一个公开的类，起个名字叫Test   &#123;  //大括号内都是类体。//整个这一块的代码被称为：main方法（程序的入口，sun公司java语言规定的） public static void main(String[] args) &#123;//JVM在执行程序的时候，会主动去找这样一个方法。没有这个规格的方法，程序就无法执行。//注意：方法必须放在“类体”中，不能放在“类体”外面。//注意：方法体由一行一行的java语句构成。    System.out.println(&quot;Test&quot;); //每个语句都要以英文分号结束。//语句内容要加英文&quot;&quot;双引号。数字可以不加双引号。    System.out.println(&quot;test2&quot;);&#125;</code></pre><p>}<br>  大括号里有main方法可以编译运行。</p><p>1、一个java源文件可以定义多个class。</p><p>2、public的类不是必须的。</p><p>3、在源文件中只要有一个class的定义，那么必然就会生成一个对应的class文件。</p><p>4、 public的类可以没有，但是如果又public修饰的类名必须和源文件名保持一致。</p><p>5、public的类有且只能有一个。</p><p>6、测试想从哪个入口进去执行，就加载哪个类：java 类名。</p><p>常见错误：</p><p><code>1、没有定义则编译报错：找不到符号。 2、找不带文件 3、单词拼写问题 4、括号匹配问题 5、中英文问题</code></p><p>程序解析：</p><p>• 首先编写java源代码程序，扩展名.java</p><p>• 在命令行模式中，输入javac命令对源代码进行编译，生成字节码文件</p><p>• javac 源文件名.java</p><p>• 编译完成后，如果没有报错信息，输入java命令对class字节码文件进行解释运行,执行时不需要添加.class扩展名</p><p>• java HelloWorld</p><p>初学者编程应养成习惯：先将思路用注释方式写出来再进行编程。</p><p>练习题：</p><p><img src= "/img/loading.gif" data-lazy-src="/img/DAY04-1.png" alt="overwrote existing file"></p><p>作业1：</p><p><img src= "/img/loading.gif" data-lazy-src="/img/day04-2.png" alt="upload successful"></p><p>作业2：</p><p><img src= "/img/loading.gif" data-lazy-src="/img/day04-3.png" alt="upload successful"></p>]]></content>
      
      
      <categories>
          
          <category> 动力节点JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DAY03 笔记</title>
      <link href="/2022/01/16/DAY03-%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/01/16/DAY03-%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>1、Java语言的特性</p><a id="more"></a><p>1.1、简单性<br>        在Java语言当中真正操作内存的是：JVM（Java虚拟机）<br>        所有的java程序都是运行在Java虚拟机当中的。<br>        而Java虚拟机执行过程中再去操作内存。<br>        对于C或者C++来说程序员都是可以直接通过指针操作内存的。<br>        C或者C++更灵活，可以直接程序员操作内存，但是要求程序员技术精湛。<br>        C语言或者C++更有驾驭感。<br>        Java语言屏蔽了指针概念，程序员不能直接操作指针，或者说程序员<br>        不能直接操作内存。这种方式有优点也有缺点：<br>            优点：不容易导致内存泄漏。（简单了。）<br>            缺点：效率问题，包括驾驭感比较差。</p><p>飞机航行：<br>            * 如果是C语言表示程序员是飞机驾驶员。<br>            * 如果是Java语言表示程序员是飞机上的乘客。</p><p>Java语言底层是C++，所以JVM是用C++语言写好的一个虚拟的电脑。<br>JVM在哪里？告诉大家，安装了JDK之后，JVM就代表安装好了。</p><p>内存是什么？</p><pre><code>    对于计算机来说：最主要的几个部件是什么？            CPU：                中央处理器，相当于人类的大脑，负责发送并执行指令。                是整个计算机的指挥官。                CPU是负责计算的，负责运算的。                10 + 20 = 30                CPU负责将30这个结果计算出来。                但是在计算过程中有三个数据需要临时找个空间存储一下：                    这三个数据分别是：10 20 30            内存：                程序运行过程当中的临时数据存储空间。                断电之后或者关机之后内存中的数据就消失了。            硬盘：                持久化设备，硬盘上的数据不会因断电而丢失。            主板：                相当于人类的躯干，是一个载体：                    CPU、内存条、硬盘等主要的部件都是放在主板上的，                    主板上有很多线，将以上的部件链接起来。            .....</code></pre><p>1.2、java是堪称完全面向对象的。</p><pre><code>面向对象更容易让人理解，人类通常是以对象的方式认知世界的。采用面向对象的方式可以让复杂问题简单化。</code></pre><p>1.3、健壮性</p><pre><code>    主要是因为Java中有一种机制：    自动垃圾回收机制（GC机制）。    java语言是健壮的，相对于C语言来说，C语言没有Java健壮。    Java不容易导致内存的泄漏。    C++或者C语言使用不当时很容易导致内存泄漏。    JVM负责调度GC机制。程序员不需要干涉。    以上讲解中又描述了这几个术语：        JVM（C++语言写的一个虚拟的计算机）、GC（垃圾回收机制）</code></pre><p>1.4、java完全/完美支持多线程并发。</p><p>1.5、可移植性/跨平台</p><pre><code>    java语言只要编写一次，可以做到到处运行。    例如：java程序编写完之后，可以运行在windows操作系统上，    不需要做任何改动可以直接运行在Linux操作系统上，同样也    可以运行到MaC OS上面。    一次编写，到处运行。（平台改变了，程序不需要改。）    JVM这种机制实现了跨平台，那么这种机制优点和缺点分别是什么？        优点：一次编写到处运行，可以跨平台。        缺点：麻烦。对于运行java程序来说必须先有一个JVM。        就像你要想在网页上看视频，你必须先安装一个flash是一样的。    Java语言可以编写病毒吗？        可以，没问题。但是很难让用户中毒。        中毒的一般都是java程序员。所以很少有人编写java的病毒脚本。</code></pre><p>2、JDK、JRE、JVM三者之间的关系？</p><pre><code>JDK:Java开发工具箱JRE:java运行环境JVM:java虚拟机JDK包括JRE，JRE包括JVM。JVM是不能独立安装的。JRE和JDK都是可以独立安装的。有单独的JDK安装包。也有单独的JRE安装包。没有单独的JVM安装包。安装JDK的时候：JRE就自动安装了，同时JRE内部的JVM也就自动安装了。安装JRE的时候：JVM也就自动安装了。</code></pre><p>问题：<br>        假设你在软件公司开发了一个新的软件，现在要去客户那边给客户把<br>        项目部署一下，把项目跑起来，你需要安装JDK吗？</p><pre><code>        只需要安装JRE就行了。        JRE体积很小，安装非常便捷快速。</code></pre><p>问题：<br>        为什么安装JDK的时候会自带一个JRE？</p><pre><code>        因为java程序员开发完程序之后，要测试这个程序，        让这个程序运行起来，需要JRE。所以JDK安装的时候        内部自带一个JRE。</code></pre><p>3、到目前为止，我们接触过的重点术语，总结一下：</p><pre><code>Java体系的技术被划分为三大块：    JavaSE：标准版    JavaEE：企业版    JavaME：微型版安装JDK之后：    JDK：java开发工具箱    JRE：Java运行环境    JVM：Java虚拟机</code></pre><p>4、对Java的加载与执行的理解（理论比较重要）<br>    java程序从编写到最终运行经历了哪些过程？？？？</p><pre><code>java程序非常重要的两个阶段：    编译阶段    运行阶段</code></pre><p>注意：java程序员直接编写的java代码（普通文本）是无法执行被JVM<br>    识别的。java程序员编写的java代码这种普通文本必须经过一个编译，<br>    将这个“普通文本代码”变成“字节码”，JVM能够识别“字节码”。<br>    java代码这种普通文本变成字节码的过程，被称为：编译。</p><p>java代码这种普通文本被称为：java源代码。（你编写的代码是源代码）<br>    源代码不能直接执行，需要先进行编译，生成源代码对应的“字节码”<br>    JVM可以识别的是字节码。</p><p>编译阶段和运行阶段可以在不同的操作系统上完成吗？<br>        在windows上编译<br>        编译之后生成了“字节码”<br>        把“字节码”放到linux上运行<br>        完全可以，因为Java是跨平台的。<br>        可以做到一次编写到处运行。</p><p>java源代码一旦编译之后，源代码可以删除吗？只留下字节码可以执行吗？<br>        完全可以执行，因为源代码不参与程序的执行过程。<br>        参与程序执行过程的是字节码。<br>        但是最好不要删除源代码。因为有可能执行结果不是你需要的，<br>        当执行结果不是你需要的时候，你可以重新打开源代码进行修改，<br>        然后重新编译生成新的字节码，再重新执行。这样会有新的执行效果。</p><p>放源代码的文件扩展名必须是：xxx.java<br>    并且需要注意的是：编译生成的字节码文件扩展名是：xxx.class<br>    没有为什么，死记硬背吧！！！！</p><pre><code>.java文件就是源文件，这个文件中编写源代码。.class文件就是字节码文件，这个文件是编译源代码而得到的。</code></pre><p>另外需要注意的是：<br>        1个java源文件是可以编译生成多个class文件的。<br>        最终运行的是class文件。</p><p>问题：字节码文件是二进制文件吗？<br>        字节码文件不是二进制文件。<br>        如果是二进制的话，就不需要JVM了。<br>        因为操作系统可以直接执行二进制。</p><p>java程序从开发到最终运行经历了什么？</p><pre><code>    编译期：（可以在windows上）    第一步：在硬盘的某个位置（随意），新建一个xxx.java文件        第二步：使用记事本或者其它文本编辑器例如EditPlus打开xxx.java文件        第三步：在xxx.java文件中编写“符合java语法规则的”源代码。        第四步：保存（一定要将xxx.java文件保存一下）        第五步：使用编译器（javac【JDK安装后自带】）对xxx.java文件进行编译。        第六步：如果xxx.java文件中编写的源代码是符合语法规则的，编译会通过，如果xxx.java文件中编写的源代码违背了语法规则，那么编译器会报错，编译器报错之后class文件是不会生成的，只有编译通过了才会生成class字节码文件。并且一个java源文件是可以生成多个class文件的。（编译实质上是检查语法）</code></pre><p>运行期（JRE在起作用）：（可以在windows上，也可以在其他的OS上。）</p><pre><code>        第七步：如果是在Linux上运行，需要将windows上生成的class文件拷贝过去，不需要拷贝源代码，真正运行的是字节码。（但是源代码也不要删除，有用）        第八步：使用JDK自带的一个命令/工具：java（负责运行的命令/工具）执行字节码        第九步：往下的步骤就全部交给JVM了，就不需要程序员干涉了。        JVM会将字节码文件装载进去，然后JVM对字节码进行解释（解释器负责将字节码解释为1010101010..等的二进制）        第十步：JVM会将生成的二进制码交给OS操作系统，操作系统会执行二进制码和硬件进行交互。</code></pre><p>注意：在以上的过程中，需要使用两个非常重要的命令？<br>        javac 命令，负责编译<br>        java 命令，负责运行</p><p>小插曲：<br>        xxx.java源文件经过编译之后生成了A.class、B.class、C.class等文件，<br>        那么我们称A是一个类、B是一个类、C是一个类。其中A、B、C是类的名字。<br>        没有为什么，死记硬背，SUN公司的java语法就是这么规定的。<br>        A/B/C是类的名称。A类、B类、C类。</p><p>源文件中编写的代码叫做：源代码。</p><p>以上是一个复杂的过程，那么缩减一下，程序员到底要干啥？<br>        新建java文件<br>        打开java文件<br>        写java源代码<br>        保存<br>        javac命令编译<br>        java命令运行</p><p>5、编写java中的第一个java程序：HelloWorld（你好世界：问世）<br>    这个程序不需要大家理解，大家照抄就行，因为目前我也不会讲解这个程序为什么这么写。<br>    主要是为了搭建java的开发环境，测试java的环境是否能用。</p><pre><code>第一步：安装文本编辑器（EditPlus）第二步：安装JDK（先下载JDK）    安装JDK13，直接下一步就行。</code></pre><p>JDK13安装的时候内置了一个JRE，独立于JDK之外的JRE并没有生成。<br>        对于java13来说，如果你希望生成一个独立于JDK之外的JRE的话需要执行特殊的命令。<br>        这里先不讲，后期用到的时候再说。</p><p>注意的是：<br>            JDK8安装的时候，不仅JDK内置了一个JRE，而且还会在JDK目录之外<br>            独立的生成一个单独的JRE。（以前低版本的时候，JRE实际上是有2个。）<br>            一个是JDK内置的，一个是独立于JDK之外的。</p><p>JDK的bin目录下有：<br>            javac.exe 负责编译<br>            java.exe 负责运行</p><p>第三步：写代码<br>        写一下第一个程序HelloWorld。</p><p>括号：<br>                []<br>                ()<br>                {}<br>                都要成对写。</p><p>第四步：编译</p><p>第五步：运行</p>]]></content>
      
      
      <categories>
          
          <category> 动力节点JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DAY02 笔记</title>
      <link href="/2022/01/16/DAY02-%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/01/16/DAY02-%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>1、Java编程语言是Sun Microsystems公司的James Gosling在1990年创建的，于1995年公布于世（一般说Java诞生于1995年）。Java是一门面向对象的编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++难以理解的多继承、指针等概念。因此Java语言具有功能强大和简单易用的两个特征。</p><a id="more"></a><p>2、JAVA语言概述及发展史<br>    JDK（Java开发工具箱，做JAVA开发必须安装的，这是最根本的一个环境。）<br>    JDK不是集成开发环境，他是Java最核心的库。<br>    前往甲骨文官网下载JDK，exe文件</p><pre><code>98年的时候：Java升级到JDK1.2，Java被分为三大块：    J2SE：标准版（基础，要学Java，必须先学习SE。基础语法+基础库）    J2EE：企业版（专门为企业开发软件，为企业提供解决方案。例如：OA办公系统和医疗服务等。）Java诞生十周年改了名字：    JavaSE    JavaEE    JavaME</code></pre><p>3、Java语言的特性：<br>    1、简单性：Java语言底层采用C++语言实现。<br>    在Java语言中真正操作内存的是：JVM（Java虚拟机）所有的java程序中都是运行在Java虚拟机当中的。<br>    对于C或者C++更灵活，可以直接程序员操作内存，但要求程序员技术精湛。<br>    Java语言屏蔽了指针概念，程序员不能直接操作指针，或者说程序员不能直接操作内存。这种方式有优点也有缺点。<br>        优点：不容易导致内存泄漏。<br>        缺点：效率问题，包括驾驶感比较差。</p><pre><code>例如飞机航行：    如果是C语言表示程序员是飞机的驾驶员。    如果是Java表示程序员是飞机上的乘客。因为Java语言的低层是C++，所以JVM是用C++语言写好的一个虚拟的电脑。计算机安装好JDK后，JVM也代表安装完毕。</code></pre><p>2、面向对象</p><pre><code>    Java是完全面向对象的。    面向对象更容易让人理解，人类通常是以对象的方式认知世界的。    采用面向对象的方式可以让复杂的问题简单化。</code></pre><p>3、健壮性</p><pre><code>    主要是因为Java中有一种机制：    自动垃圾回收机制（GC机制）。    Java不容易导致内存泄漏    JVM负责调度GC机制，程序员不需要干涉。</code></pre><p>4、可移植性/跨平台<br>        Java语言只要编写一次，可以做到到处运行。<br>        例如：Java程序编写完之后，可以运行在windows操作系统上， 不需要做任何改动可以直接运行在Linux操作系统上，同样也可以运行在Mac os上。<br>        一次编写，到处运行。（平台改变了，程序不需要改变。）<br>        跨平台性：通过Java语言编写的应用程序在不同的系统平台上都可以运行</p><pre><code>    1.1、JVM这种机制实现了跨平台，那么这种机制优点和缺点是什么？        优点：一次编写到处运行，可以跨平台。        缺点：麻烦。对于运行Java程序来说必须要有一个JVM。就像你想在网页上看视频，你必须先安装一个flash一样。    1.2、Java语言可以编写病毒吗？        可以，没问题。但是很难让用户中毒。        中毒的一般都是java程序员。所以很少有人编写java的病毒脚本。</code></pre><p>4、Java完全/完美支持多线程并发</p><p>5、JDK、JRE、JVM三者之间的关系？<br>    JDK：Java开发工具箱<br>    JRE：Java运行环境<br>    JVM：Java虚拟机</p><pre><code>JDK包括JRE，JRE包括JVMJVM不可以独立安装。JRE和JDK都是可以独立安装的。也有单独的JDK的安装包，没有单独的JVM安装包。安装JDK的时候：JRE就自动安装了，同时JRE内部的JVM也就自动安装了。安装JRE的时候：JVM也就自动安装了。</code></pre><p>问题1：<br>        假设你在软件公司开发了一个新的软件，现在要去客户那边给客户把项目部署一下，把项目跑起来，你需要安装JDK吗？</p><pre><code>        答：只需要安装JRE就可以了，JRE体积很小，安装非常便捷快速。</code></pre><p>问题2：<br>        为什么安装JDK的时候会带一个JRE？</p><pre><code>        答：因为Java程序员开发完程序之后，要测试这个程序。        让这个程序运行起来，需要JRE。所以安装JDK的时候内部会自带一个JRE。</code></pre><p>6、Java程序的加载与执行的理解<br>    java程序从编写到最终运行经历了两个阶段：<br>1、编译阶段<br>    2、运行阶段</p><pre><code>注意：java程序员直接编写的java代码（普通文本）是无法执行被JVM识别的。java程序员编写到的java代码这种普通文本必须经过一个编译，将这个“普通文本代码”变成“字节码”，JVM能够识别“字节码”。java代码这种普通文本变成字节码的过程，被称为：编译。java代码这种普通文本被称为：java源代码。（你编写的代码是源代码）源代码不能直接执行，需要先进行编译，生成源代码对应的“字节码”JVM可以识别的是字节码。</code></pre><p>问题1：<br>    编译阶段和运行阶段可以在不同的操作系统上完成吗？<br>        答：完全可以，因为java是可跨平台的，可以做到一次编写，到处运行。<br>        在windows上编译<br>        编译之后生成“字节码”<br>        把“字节码”放在linux上运行。</p><p>问题2：<br>    Java源代码一旦编译之后，源代码可以删除吗？只留下字节码可以执行吗？<br>        答：完全可以执行，因为源代码不参与程序的执行过程。<br>        参与程序执行过程是字节码。<br>        但是最好不要删除源代码，因为有可能执行结果不是你需要的。<br>        当执行结果不是你需要的时候，你可以重新打开源代码进行修改，然后重新编译生成新的字节码，在重新执行。这样会有新的执行效果。</p><p>7、需要注意的是：<br>    1、放源代码的文件扩展名必须是：xxx.java<br>    2、编译生成的字节码文件扩展名是：xxx.class</p><pre><code>.java文件就是源文件，这个文件中编写源代码。.class文件就是字节码文件，这个文件是编译源代码而得到的。另外注意的是：    1个java文件是可以编译生成多个class文件的。    最终运行的是class文件。</code></pre><p>问题1：<br>    字节码文件是二进制文件吗？<br>        答：字节码文件不是二进制文件。<br>        如果是二进制的话，就不需要JVM了。<br>        因为操作系统可以直接执行二进制。</p><pre><code>Java程序的加载与执行的理解    java程序从编写到最终运行经历了两个阶段：    1、编译阶段    2、运行阶段注意：java程序员直接编写的java代码（普通文本）是无法执行被JVM识别的。java程序员编写到的java代码这种普通文本必须经过一个编译，将这个“普通文本代码”变成“字节码”，JVM能够识别“字节码”。java代码这种普通文本变成字节码的过程，被称为：编译。java代码这种普通文本被称为：java源代码。（你编写的代码时源代码）源代码不能直接执行，需要先进行编译，生成源代码对应的“字节码”JVM可以识别的是字节码。</code></pre><p>JAVA程序加载与运行：<br>    Java程序员从开发到最终运行经历了什么？</p><pre><code>    第一步：在硬盘的某个位置，新建一个xxx.java文件    第二步：使用记事本或者其他文本编辑器打开xxx.java文件    第三步：在xxx.java文件中编写“符合java语法规则的”源代码。    第四步：保存（一定要将xxx.java文件保存一下）    第五步：使用编译器（javac【JDK安装后自带】）对xxx.java文件进行编译。    第六步：如果xxx.java文件中编写的源代码是符合语法规则的，编译会通过，如果xxx.java文件中编写的源代码违背了语法规则，那么编译器会报错，编译器报错之后class文件是不会生成的，只有编译通过了之后才会生成class字节码文件。并且一个java源文件是可以生成多个class文件的。（编译实质上是检查语法）    第七步运行期：（可以在windows上，也可以在其他的os上。）：如果实在Linux上运行，需要将windows上生成的class文件拷贝过去，不需要拷贝源代码，真正运行的是字节码。（但是源代码也不要删除，有用）    第八步：使用JDK自带的一个命名/工具：java（负责运行的命令/工具）执行字节码    第九步：往下的步骤就全部交给JVM了，就不需要程序员干涉了。        JVM会将字节码文件全部装载进去，然后JVM对字节码进行解释（解释器负责将字节码解释为1010101010..等的二进制）    第十步：JVM会将生成的二进制代码交给os操作系统，操作系统会执行二进制码和硬件进行交互。⚠注意：在以上过程中，需要使用两个重要的命令    1、javac 命令，负责编译    2、java 命令，负责运行⚠当编译不能显示中文时，输入（两种方式）：    1、javac -encoding UTF-8 ***.java    2、记事本打开java源文件，另存为选择ANSI编码⚠当编译时出现：错误: 编码 GBK 的不可映射字符 (0xBA)    输入javac  -encoding utf-8  文件名.java</code></pre>]]></content>
      
      
      <categories>
          
          <category> 动力节点JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>出租车计价</title>
      <link href="/2022/01/16/%E5%87%BA%E7%A7%9F%E8%BD%A6%E8%AE%A1%E4%BB%B7-1/"/>
      <url>/2022/01/16/%E5%87%BA%E7%A7%9F%E8%BD%A6%E8%AE%A1%E4%BB%B7-1/</url>
      
        <content type="html"><![CDATA[<p>根据某城市普通出租车收费标准编写程序进行车费计算。具体标准如下：</p><ul><li>起步里程为3公里，起步费10元；</li><li>超起步里程后10公里内，每公里2元；</li><li>超过10公里以上的部分加收50%的回空补贴费，即每公里3元；</li><li>营运过程中，因路阻及乘客要求临时停车的，按每5分钟2元计收（不足5分钟则不收费）。<a id="more"></a></li></ul><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h2><p>输入在一行中给出输入行驶里程（单位为公里，精确到小数点后1位）与等待时间（整数，单位为分钟），其间以空格分隔。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h2><p>在一行中输出乘客应支付的车费（单位为元），结果四舍五入，保留到元。</p><h2 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h2><blockquote><p>2.6    2</p></blockquote><h2 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h2><blockquote><p>10</p></blockquote><hr><h2 id="JavaScript代码："><a href="#JavaScript代码：" class="headerlink" title="JavaScript代码："></a>JavaScript代码：</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> readline <span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'readline'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> rl<span class="token operator">=</span>readline<span class="token punctuation">.</span><span class="token function">createInterface</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    input<span class="token operator">:</span>process<span class="token punctuation">.</span>stdin<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> buf<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>rl<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'line'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">line</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    buf<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>rl<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'close'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> arr<span class="token operator">=</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> money<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">3</span><span class="token operator">&amp;&amp;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        money<span class="token operator">+=</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        money<span class="token operator">+=</span><span class="token number">7</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>        money<span class="token operator">+=</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     money<span class="token operator">+=</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> PTA JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DAY01:DOS命令</title>
      <link href="/2020/08/15/DOS%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/08/15/DOS%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>1、常用DOS命令<br>    1.1、怎么打开DOS命令窗口？</p><blockquote><p><strong>win键+r（组合键）</strong>：可以打开”运行窗口”<br>在窗口文本框输入：<strong>cmd</strong><br>然后回车即可。</p></blockquote><a id="more"></a><p>1.2、什么是DOS命令呢？<br>在DOS命令窗口中才可以输入并执行DOS命令。<br>在最初的windows计算机中没有图形界面，只有DOS命令窗口。<br>也就是说通过执行DOS命令窗口可以完成文件的创建、保存、删除等一系列操作。</p><p>1.3、在DOS命令窗口中如何复制内容？</p><blockquote><p>选中内容- -&gt;按ctrl+c键复制- -&gt;在粘贴的位置点击鼠标右键<br>即可完成内容的复制粘贴</p></blockquote><p>1.4、DOS命令窗口中如何切换盘符？<br><strong>直接输入盘符即可。</strong><br>C：回车<br>D：回车<br>就🆗了。</p><p>当切换到D盘时，当前的根路径是：D:&gt;<br>当前路径就是当前所在的位置。</p><p>1.5、DOS命令窗口如何切换目录？<br>使用cd命令来完成目录的切换：cd即change directory（改变目录）<br>cd的语法格式为：</p><blockquote><p><strong>cd + 路径</strong></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200816001703606.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjYyOTkyOA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200816001758345.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjYyOTkyOA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 动力节点JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Hexo添加live2d看板娘</title>
      <link href="/2020/08/10/Hexo%E6%B7%BB%E5%8A%A0live2d%E7%9C%8B%E6%9D%BF%E5%A8%98%E6%A8%A1%E5%9E%8B/"/>
      <url>/2020/08/10/Hexo%E6%B7%BB%E5%8A%A0live2d%E7%9C%8B%E6%9D%BF%E5%A8%98%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="1-首先安装npm包"><a href="#1-首先安装npm包" class="headerlink" title="1.首先安装npm包"></a>1.首先安装npm包</h2><ul><li>配置环境变量 </li><li>打开cmd.exe,输入:</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//查看版本号是否安装成功$ <span class="token function">npm</span> -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><a id="more"></a><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020081012063219.PNG" alt="在这里插入图片描述"></p><h2 id="2-下载hexo"><a href="#2-下载hexo" class="headerlink" title="2.下载hexo"></a>2.下载hexo</h2><ul><li>输入命令</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//下载hexo客户端$ <span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>同样环境变量</li></ul><h2 id="3-在本地新建文件myblog-作为博客资源文件夹"><a href="#3-在本地新建文件myblog-作为博客资源文件夹" class="headerlink" title="3.在本地新建文件myblog(作为博客资源文件夹)"></a>3.在本地新建文件myblog(作为博客资源文件夹)</h2><ul><li>输入命令</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//初始化刚新建的myblog文件夹$ hexo init myblog$ <span class="token builtin class-name">cd</span> blog$ hexo instal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>这时blog就会生成以下文件</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200810115944114.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjYyOTkyOA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="4-第一个博客出来了，我们试试运行"><a href="#4-第一个博客出来了，我们试试运行" class="headerlink" title="4.第一个博客出来了，我们试试运行"></a>4.第一个博客出来了，我们试试运行</h2><ul><li>输入命令</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//启动命令<span class="token punctuation">(</span>完整命令:hexo server<span class="token punctuation">)</span>$ hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="5-回到当前窗口myblog路径输入命令："><a href="#5-回到当前窗口myblog路径输入命令：" class="headerlink" title="5.回到当前窗口myblog路径输入命令："></a>5.回到当前窗口myblog路径输入命令：</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//下载live2d包$ <span class="token function">npm</span> <span class="token function">install</span> --save hexo-helper-live2d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>再下载模型</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//下载模型$ <span class="token function">npm</span> <span class="token function">install</span> live2d-widget-model-hibiki<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>#更多模型选择</strong></p><p>live2d-widget-model-chitose<br>live2d-widget-model-epsilon2_1<br>live2d-widget-model-gf<br>live2d-widget-model-haru/01 (use npm install –save live2d-widget-model-haru)<br>live2d-widget-model-haru/02 (use npm install –save live2d-widget-model-haru)<br>live2d-widget-model-haruto<br>live2d-widget-model-hibiki<br>live2d-widget-model-hijiki<br>live2d-widget-model-izumi<br>live2d-widget-model-koharu<br>live2d-widget-model-miku<br>live2d-widget-model-ni-j<br>live2d-widget-model-nico<br>live2d-widget-model-nietzsche<br>live2d-widget-model-nipsilon<br>live2d-widget-model-nito<br>live2d-widget-model-shizuku<br>live2d-widget-model-tororo<br>live2d-widget-model-tsumiki<br>live2d-widget-model-unitychan<br>live2d-widget-model-wanko<br>live2d-widget-model-z16</p><h2 id="6-下载完模型后在根目录的-node-modules-文件夹下找到刚才下载的live2d-widget-model-hibiki模型，将其复制到新建目录-live2d-models-下"><a href="#6-下载完模型后在根目录的-node-modules-文件夹下找到刚才下载的live2d-widget-model-hibiki模型，将其复制到新建目录-live2d-models-下" class="headerlink" title="6.下载完模型后在根目录的 node_modules 文件夹下找到刚才下载的live2d-widget-model-hibiki模型，将其复制到新建目录 live2d_models 下"></a>6.下载完模型后在根目录的 node_modules 文件夹下找到刚才下载的live2d-widget-model-hibiki模型，将其复制到新建目录 live2d_models 下</h2><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200810120349315.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjYyOTkyOA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="7-在根目录-config-yml配置下添加以下参数，唯一改变是参数model-use-是下载模型名称"><a href="#7-在根目录-config-yml配置下添加以下参数，唯一改变是参数model-use-是下载模型名称" class="headerlink" title="7.在根目录_config.yml配置下添加以下参数，唯一改变是参数model.use 是下载模型名称"></a>7.在根目录_config.yml配置下添加以下参数，唯一改变是参数model.use 是下载模型名称</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#参数配置</span>live2d: enable: <span class="token boolean">true</span> scriptFrom: <span class="token builtin class-name">local</span> pluginRootPath: live2dw/ pluginJsPath: lib/ pluginModelPath: assets/ tagMode: <span class="token boolean">false</span> debug: <span class="token boolean">false</span> model:   use: live2d-widget-model-haruto   <span class="token comment">#下载模型参数</span> display:   position: right   width: <span class="token number">150</span>   height: <span class="token number">300</span> mobile:   show: <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="最后再次运行-hexo-s，看效果，右下角萌萌哒看板娘出来了"><a href="#最后再次运行-hexo-s，看效果，右下角萌萌哒看板娘出来了" class="headerlink" title="最后再次运行$hexo s，看效果，右下角萌萌哒看板娘出来了"></a>最后再次运行$hexo s，看效果，右下角萌萌哒看板娘出来了</h2><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200810120617570.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjYyOTkyOA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习日常 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
