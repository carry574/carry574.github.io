<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaScript关键特性</title>
      <link href="/2022/02/01/JavaScript%E5%85%B3%E9%94%AE%E7%89%B9%E6%80%A7/"/>
      <url>/2022/02/01/JavaScript%E5%85%B3%E9%94%AE%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="数组语法"><a href="#数组语法" class="headerlink" title="数组语法"></a>数组语法</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html">var myarray1 = new Array(1, 2, 3, 4, 5); // 创建数组同时赋值var myarray2 = [1, 2, 3, 4, 5]; // 直接输入一个数组（称“字面量数组”） console.log(myarray1);console.log(myarray2);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr /><h3 id="数组序号"><a href="#数组序号" class="headerlink" title="数组序号"></a>数组序号</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html">索引值从0开始var color = ["red", "green", "blue", "yellow"];console.log(color[0]); // returns "red"console.log(color[1]); // returns "green"console.log(color[2]); // returns "blue"console.log(color[3]); // returns "yellow"console.log(color[4]); // returns undefinedconsole.log(color[0]);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr />### 多维数组<pre class="line-numbers language-html" data-language="html"><code class="language-html">var student = [      ["张三", "男", "18"],     ["李四", "女", "20"],  ];console.log(student[0][2]); // returns "18"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr />### 修改数组<pre class="line-numbers language-html" data-language="html"><code class="language-html">var color = ["red", "green", "blue", "yellow"];color[0] = "black";console.log(color); // returns ["black", "green", "blue", "yellow"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr />### 获取数组长度<pre class="line-numbers language-html" data-language="html"><code class="language-html">var color = ["red", "green", "blue", "yellow"];console.log(color.length); // returns 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr />### 通过 split() 方法，将字符串转换为数组<pre class="line-numbers language-html" data-language="html"><code class="language-html">console.log("1:2:3:4".split(":")); // returns ["1", "2", "3", "4"]console.log("|a|b|c".split("|")); // returns ["", "a", "b", "c"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr />### join() 方法将数组转换为字符串<pre class="line-numbers language-html" data-language="html"><code class="language-html">console.log(["1", "2", "3", "4"].join(":")); // returns "1:2:3:4"console.log(["", "a", "b", "c"].join("|")); // returns "|a|b|c"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr />### push() 方法<pre class="line-numbers language-html" data-language="html"><code class="language-html">var arr = ["1", "2", "3", "4"];console.log(arr.push("5", "6"));console.log(arr); // returns ["1", "2", "3", "4", "5", "6"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr />### toString()方法把数字转换成字符串<pre class="line-numbers language-html" data-language="html"><code class="language-html">var myNum = 123;var myString = myNum.toString();// typeof 是判断数据类型console.log(typeof myString);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr />### index of()方法来完成查找<pre class="line-numbers language-html" data-language="html"><code class="language-html">"Blue Sky".indexOf("Blue"); // returns  0"Blue Sky".indexOf("Ble"); // returns -1"Blue Sky".indexOf("Sky", 0); // returns  5"Blue Sky".indexOf("Sky", -1); // returns  5"Blue Sky".indexOf("Sky", 5); // returns  5"Blue Sky".indexOf("Sky", 9); // returns -1"Blue Sky".indexOf("", 0); // returns  0"Blue Sky".indexOf("", 5); // returns 5"Blue Sky".indexOf("", 9); // returns 8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr />### 字符串方法 toLowerCase() 和 toUpperCase() 字符串并将所有字符分别转换为小写或大写<pre class="line-numbers language-html" data-language="html"><code class="language-html">var string = "I like study";console.log(string.toLowerCase()); // returns "i like study"console.log(string.toUpperCase()); // returns "I LIKE STUDY"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr />### 数字 + 字符串 = 字符串<pre class="line-numbers language-html" data-language="html"><code class="language-html">var numtosTring = 12 + "";console.log(typeof numtosTring);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr />### number() 字符串转换为数值<pre class="line-numbers language-html" data-language="html"><code class="language-html">var num1 = Number(true);console.log(num1); // true 返回 1，false 返回 0var num2 = Number(undefined);console.log(num2); // 返回 NaNvar num3 = Number(null);console.log(num3); // 返回 0var num4 = Number("syl");console.log(num4); // 返回 NaNvar num5 = Number("   ");console.log(num5); // 如果是空字符串返回 0var num6 = Number(123);console.log(num6); // 返回123，如果是数字型的字符，返回数字var num7 = Number("123abc");console.log(num7); // 返回 NaN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr />### parseInt() 把字符串转换成整数<pre class="line-numbers language-html" data-language="html"><code class="language-html">var num1 = parseInt("12.3abc");console.log(num1); // 返回 12，如果第一个字符是数字会解析知道遇到非数字结束，只取整，不是约等于var num2 = parseInt("abc123");console.log(num2); // 返回 NaN，如果第一个字符不是数字或者符号就返回 NaNvar num3 = parseInt("");console.log(num3); // 空字符串返回 NaN，但是 Number("")返回 0var num4 = parseInt("520");console.log(num4); // 返回 520var num5 = parseInt("0xA");console.log(num5); // 返回 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr />### if 条件语句<pre class="line-numbers language-html" data-language="html"><code class="language-html">if (3 > 2) &#123;console.log("我真帅");&#125; else &#123;console.log("不可能");&#125;结果输出为：我真帅<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr />### if else 条件语句<pre class="line-numbers language-html" data-language="html"><code class="language-html">var d = new Date().getDay();        if (d == 0) &#123;            console.log("今天星期天");        &#125; else if (d == 1) &#123;            console.log("今天星期一");        &#125; else if (d == 2) &#123;            console.log("今天星期二");        &#125; else &#123;            console.log("好多啊，我不想写了");        &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr />### switch case 语句<pre class="line-numbers language-html" data-language="html"><code class="language-html">var d = new Date().getDay();        switch (d) &#123;            case 0:                console.log("今天星期天");                break;            case 1:                console.log("今天星期一");                break;            case 2:                console.log("今天星期二");                break;            case 3:                console.log("今天星期三");                break;            case 4:                console.log("今天星期四");                break;            case 5:                console.log("今天星期五");                break;            default:                console.log("今天星期六");                break;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr />### 三元运算<pre class="line-numbers language-html" data-language="html"><code class="language-html">条件表达式？结果 1:结果 23 > 2 ? console.log("3 比 2 大") : console.log("3 比 2 小");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr />### For 循环<pre class="line-numbers language-html" data-language="html"><code class="language-html">for (var i = 1; i &lt;= 100; i++) &#123;   console.log(i);&#125;<p>break 跳出循环<br>continue 跳出迭代<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>:hexoPostRenderEscape–&gt;</p><hr />### while 循环<pre class="line-numbers language-html" data-language="html"><code class="language-html">var i = 1;  while (i &lt;= 100) &#123;  console.log(i);  i++;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr />### 创建函数<pre class="line-numbers language-html" data-language="html"><code class="language-html">function f(a, b) &#123;  console.log(a + b);&#125; // 创建一个名为 f 的函数，它有两个形参 a，b                console.log(f(2, 3)); // 调用函数 f，传入实参 2 和 3，最终运行结果为在控制台上打印出 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr /><ul><li>sort() 方法，将数组进行排序。</li><li>shift() 方法，删除并返回数组的第一个元素。</li><li>unshift() 方法，向数组的开头添加一个或更多元素，并返回新的长度。</li><li>slice() 方法，从某个已有的数组返回选定的元素。</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html">var arr1 = ["a", "z", "k", "w", "x"];      document.write(arr1 + "<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>");      document.write(arr1.sort()+ "<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>" + "<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>");      var arr2 = [11,55,22,44,66,33];      document.write(arr2 + "<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>");      document.write(arr2.sort() + "<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>" + "<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>");      var arr3 = [1,22,44,6,55,5,2,4,66];      document.write(arr3 + "<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>");      document.write(arr3.sort() + "<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>" + "<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>");      function sortNum1(a, b)&#123;          return a - b; // 从小到大排序      &#125;      var arr4 = [1,22,44,6,55,5,2,4,66];      document.write(arr4 + "<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>");      document.write(arr4.sort(sortNum1) + "<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>" + "<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>");      function sortNum2(a,b)&#123;          return b - a; // 从大到小排序      &#125;      var arr4 = [1,22,44,6,55,5,2,4,66];      document.write(arr4 + "<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>");      document.write(arr4.sort(sortNum2) + "<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>" + "<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr />### charAt() 方法，获取指定位置处字符<pre class="line-numbers language-html" data-language="html"><code class="language-html">var str = "Hello world!";document.write(str.charAt(2));// 以上代码输出为 l<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr />### charCodeAt()方法,获取指定位置处字符的 Unicode 编码<pre class="line-numbers language-html" data-language="html"><code class="language-html">var str = "Hello world!";document.write(str.charCodeAt(2));// 以上代码输出为 l08<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr /><h3 id="concat-方法"><a href="#concat-方法" class="headerlink" title="concat() 方法"></a>concat() 方法</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html">- concat() 方法，连接字符串，等效于 “+”，“+” 更常用。与数组中的 concat() 方法相似。- slice() 方法，提取字符串的片断，并在新的字符串中返回被提取的部分（字符串- indexOf() 方法，检索字符串。- toString() 方法，返回字符串。- toLowerCase() 方法，把字符串转换为小写。- toUpperCase() 方法，把字符串转换为大写。- replace() 方法，替换字符串中的某部分。- split() 方法，把字符串分割为字符串数组。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr />### Date 对象方法：<pre class="line-numbers language-html" data-language="html"><code class="language-html">Date()：返回当日的日期和时间（输出的是中国标准时间）。      getDate()：从 Date 对象返回一个月中的某一天 (1 ~ 31)。      getDay()：从 Date 对象返回一周中的某一天 (0 ~ 6)。      getMonth()：从 Date 对象返回月份 (0 ~ 11)。      getFullYear()：从 Date 对象以四位数字返回年份。      getHours()：返回 Date 对象的小时 (0 ~ 23)。      getMinutes()：返回 Date 对象的分钟 (0 ~ 59)。      getSeconds()：返回 Date 对象的秒数 (0 ~ 59)。      getMilliseconds()：返回 Date 对象的毫秒(0 ~ 999)。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr />### Math 对象的常用属性：<pre class="line-numbers language-html" data-language="html"><code class="language-html">E ：返回常数 e (2.718281828...)。      LN2 ：返回 2 的自然对数 (ln 2)。      LN10 ：返回 10 的自然对数 (ln 10)。      LOG2E ：返回以 2 为底的 e 的对数 (log2e)。      LOG10E ：返回以 10 为底的 e 的对数 (log10e)。      PI ：返回 π（3.1415926535...)。      SQRT1_2 ：返回 1/2 的平方根。      SQRT2 ：返回 2 的平方根。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr />### Math 对象的常用方法：<pre class="line-numbers language-html" data-language="html"><code class="language-html">abs(x) ：返回 x 的绝对值。      round(x) ：返回 x 四舍五入后的值。      sqrt(x) ：返回 x 的平方根。      ceil(x) ：返回大于等于 x 的最小整数。      floor(x) ：返回小于等于 x 的最大整数。      sin(x) ：返回 x 的正弦。      cos(x) ：返回 x 的余弦。      tan(x) ：返回 x 的正切。      acos(x) ：返回 x 的反余弦值（余弦值等于 x 的角度），用弧度表示。      asin(x) ：返回 x 的反正弦值。      atan(x) ：返回 x 的反正切值。      exp(x) ：返回 e 的 x 次幂 (e^x)。      pow(n, m) ：返回 n 的 m 次幂 (nm)。      log(x) ：返回 x 的自然对数 (ln x)。      max(a, b) ：返回 a, b 中较大的数。      min(a, b) ：返回 a, b 中较小的数。      random() ：返回大于 0 小于 1 的一个随机数。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr />### 通过对象字面量来创建对象<pre class="line-numbers language-html" data-language="html"><code class="language-html">var student = &#123;        name: "zhangsan",        age: 18,        gender: "male",        sayHi: function () &#123;            console.log("hi,my name is " + this.name);        &#125;,&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr />### 通过 new Object() 创建对象<pre class="line-numbers language-html" data-language="html"><code class="language-html">var student = new Object();        (student.name = "zhangsan"),        (student.age = 18),        (student.gender = "male"),        (student.sayHi = function () &#123;            console.log("hi,my name is " + this.name);        &#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr />### 通过工厂函数创建对象<pre class="line-numbers language-html" data-language="html"><code class="language-html">function createStudent(name, age, gender) &#123;        var student = new Object();        student.name = name;        student.age = age;        student.gender = gender;        student.sayHi = function () &#123;            console.log("hi,my name is " + this.name);        &#125;;        return student;        &#125;        var s1 = createStudent("zhangsan", 18, "male");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr />### 自定义构造函数<pre class="line-numbers language-html" data-language="html"><code class="language-html">function Student(name, age, gender) &#123;       this.name = name;       this.age = age;       this.gender = gender;       this.sayHi = function () &#123;           console.log("hi,my name is " + this.name);       &#125;;       &#125;       var s1 = new Student("zhangsan", 18, "male");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr />### 通过 for...in 语句用于遍历数组或者对象的属性,对数组或者对象的属性进行循环操作<pre class="line-numbers language-html" data-language="html"><code class="language-html">var student = &#123;        name: "zhangsan",        age: 18,        gender: "male",        &#125;;        for (var key in student) &#123;            console.log(key);            console.log(student[key]);        &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr />### 格式化日期对象<pre class="line-numbers language-html" data-language="html"><code class="language-html">function formatDate(d) &#123;        // 如果 d 不是日期对象的实例，返回空        if (!d instanceof Date) &#123;          return;        &#125;        var year = d.getFullYear(),          month = d.getMonth() + 1,          date = d.getDate(),          hour = d.getHours(),          minute = d.getMinutes(),          second = d.getSeconds();        month = month &lt; 10 ? "0" + month : month;        date = date &lt; 10 ? "0" + date : date;        hour = hour &lt; 10 ? "0" + hour : hour;        minute = minute &lt; 10 ? "0" + minute : minute;        second = second &lt; 10 ? "0" + second : second;        return (          year +          "/" +          month +          "/" +          date +          " " +          hour +          ":" +          minute +          ":" +          second        );      &#125;      console.log(formatDate(new Date()));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr />### 删除数组中的重复元素<pre class="line-numbers language-html" data-language="html"><code class="language-html">var array = ["x", "c", "a", "b", "c", "b", "c"];      function clearArray() &#123;        var o = &#123;&#125;;        for (var i = 0; i &lt; array.length; i++) &#123;          var item = array[i];          if (o[item]) &#123;            o[item]++;          &#125; else &#123;            o[item] = 1;          &#125;        &#125;        var tmpArray = [];        for (var key in o) &#123;          if (o[key] == 1) &#123;            tmpArray.push(key);          &#125; else &#123;            if (tmpArray.indexOf(key) == -1) &#123;              tmpArray.push(key);            &#125;          &#125;        &#125;        return tmpArray;      &#125;      console.log(clearArray(array));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr />### 判断一个字符串中出现次数最多的字符，并统计次数<pre class="line-numbers language-html" data-language="html"><code class="language-html">var str = "daskljahiagnaknscsjdwfanalvnahdpwod";      function max() &#123;        var o = &#123;&#125;;        for (var i = 0; i &lt; str.length; i++) &#123;          var item = str.charAt(i);          if (o[item]) &#123;            o[item]++;          &#125; else &#123;            o[item] = 1;          &#125;        &#125;        var max = 0;        for (var key in o) &#123;          if (max &lt; o[key]) &#123;            max = o[key];            var tmp;            tmp = key;          &#125;        &#125;        console.log("出现次数最多的字符是:" + tmp + "出现次数为：" + max);      &#125;      max(str);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 蓝桥云课 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5</title>
      <link href="/2022/02/01/HTML5/"/>
      <url>/2022/02/01/HTML5/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span>500px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>300px<span class="token punctuation">;</span><span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">></span></span>支出表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>第一行第一列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>第一行第二列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>第二行第一列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>第二行第二列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <hr /><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>姓名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>密码:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>性别:            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>男            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>女        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>爱好:            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>music<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>唱歌            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>runing<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>跑步            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>swiming<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>游泳        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>照片:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file_img<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>个人描述:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>textarea<span class="token punctuation">"</span></span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>35<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>籍贯:            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>成都<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>成都<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>广州<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>广州<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>四川<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>四川<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>上海<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>上海<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>重置<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br /><hr /><h2 id="日期选择器"><a href="#日期选择器" class="headerlink" title="日期选择器"></a>日期选择器</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>日期选择器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        Date: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_date<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        Month: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>month<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_month<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr /><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>"nav"标签定义导航链接的部分<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>HTML<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>CSS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>JavaScript<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>"header"标签定义文档的页眉<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>网站标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>网站副标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>"footer"标签定义 section 或 document 的页脚<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Copyright @2013-2019 实验楼在线教育<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>aside> 标签表示一个和其余页面内容几乎无关的部分(侧边)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>实验楼简介<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>一个在线学习的网站<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr /><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>datalist 元素用于为文本框提供一个可供选择的列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myColor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>What's your favorite color?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myColor<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myColor<span class="token punctuation">"</span></span> <span class="token attr-name">list</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mySuggestion<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>datalist</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mySuggestion<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>black<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>blue<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>green<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>red<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>white<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>yellow<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>datalist</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr /><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>autocomplete 属性规定表单是否应该启用自动完成功能：自动完成允许浏览器预测对字段的输入，当用户在字段开始键入时，浏览器基于之前键入过的值，应该显示出在字段中填写的选项<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span> <span class="token attr-name">autocomplete</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>on<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        Name:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        E-mail: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">autocomplete</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>off<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr /><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>autofocus 属性规定在页面加载时，域自动地获得焦点。适用于所有"input"标签的类型。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        Name：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_name<span class="token punctuation">"</span></span> <span class="token attr-name">autofocus</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>autofocus<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr /><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>placeholder属性提供一种提示(hint),描述输入域所期待的值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_search<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>实验楼<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr /><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>required 属性规定必须在提交之前填写输入域（不能为空）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_search<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>required<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr /><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>email 类型用于应该包含 e-mail 地址的输入域。在提交表单时，会自动验证 email 域的值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        E-mail: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_email<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr /><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>url 类型用于应该包含 URL 地址的输入域。在提交表单时，会自动验证 url 域的值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    Url: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_url<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr /><h2 id="Canvas绘制三角形"><a href="#Canvas绘制三角形" class="headerlink" title="Canvas绘制三角形"></a>Canvas绘制三角形</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>使用canvas绘制三角形<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mycanvasone<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>520px<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1314px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        对不起，你的浏览器不支持canvas    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token comment">//获取canvas元素</span>        <span class="token keyword">var</span> myCanvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"mycanvasone"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取Context上下文</span>        <span class="token keyword">var</span> ctx <span class="token operator">=</span> myCanvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 开始路径绘制</span>        ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置路径起点，坐标为(20,20)</span>        ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 添加一个(200,200)的新点</span>        ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 添加一个(400,20)的新点</span>        ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建从当前点回到起始点的路径</span>        ctx<span class="token punctuation">.</span><span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置线宽</span>        ctx<span class="token punctuation">.</span>lineWidth <span class="token operator">=</span> <span class="token number">2.0</span><span class="token punctuation">;</span>        <span class="token comment">// 设置线的颜色</span>        ctx<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span> <span class="token string">"#9b9b9b"</span><span class="token punctuation">;</span>        <span class="token comment">// 绘制已定义的路径</span>        ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr /><h2 id="简单Web留言本"><a href="#简单Web留言本" class="headerlink" title="简单Web留言本"></a>简单Web留言本</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>简单Web留言本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>memo<span class="token punctuation">"</span></span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>60<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>新增留言<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>saveStorage(<span class="token punctuation">'</span>memo<span class="token punctuation">'</span>);<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>清空数据<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clearStorage();<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>清空最后一个数据<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clearsingleStorage();<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token comment">//savaStorage是一个新增留言的函数</span>        <span class="token keyword">function</span> <span class="token function">saveStorage</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//获取textarea的value值</span>            <span class="token keyword">var</span> data <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token comment">//获取当前时间</span>            <span class="token keyword">var</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUTCString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//将当前时间作为键名，textarea的value值（也就是用户输入的值）的值作为键值</span>            localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>time<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//显示留言</span>            <span class="token function">showMsg</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//showMsg是一个显示留言的函数</span>        <span class="token keyword">function</span> <span class="token function">showMsg</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">'&lt;table border="1">'</span><span class="token punctuation">;</span>            <span class="token comment">//遍历本地储存数据</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> localStorage<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//获取key值</span>                <span class="token keyword">var</span> key <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//获取value值</span>                <span class="token keyword">var</span> value <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//显示数据</span>                result <span class="token operator">+=</span> <span class="token string">"&lt;tr>&lt;td>"</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token string">"&lt;/td>&lt;td>"</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">"&lt;/td>&lt;/tr>"</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            result <span class="token operator">+=</span> <span class="token string">"&lt;/table>"</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> target <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>            target<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//显示留言</span>        <span class="token function">showMsg</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//clearStorage是一个清空留言的函数</span>        <span class="token keyword">function</span> <span class="token function">clearStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//清空数据</span>            localStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//显示留言</span>            <span class="token function">showMsg</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//clearsingleStorage是一个删除单个数据的函数</span>        <span class="token keyword">function</span> <span class="token function">clearsingleStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//显示留言</span>            <span class="token function">showMsg</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 蓝桥云课 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML面试知识点总结</title>
      <link href="/2022/01/29/Untitled/"/>
      <url>/2022/01/29/Untitled/</url>
      
        <content type="html"><![CDATA[<h4 id="1-DOCTYPE-的作用是什么？"><a href="#1-DOCTYPE-的作用是什么？" class="headerlink" title="1. DOCTYPE 的作用是什么？"></a>1. DOCTYPE 的作用是什么？</h4><p>   相关知识点：<br>   &lt;!–hexoPostRenderEscape:<pre class="line-numbers language-none"><code class="language-none">IE5.5 引入了文档模式的概念，而这个概念是通过使用文档类型（DOCTYPE）切换实现的。</p><p>&lt;!DOCTYPE&gt;声明位于 HTML 文档中的第一行，处于 &lt;html&gt; 标签之前。告知浏览器的解析器用什么文档标准解析这个文档。</p><p>DOCTYPE 不存在或格式不正确会导致文档以兼容模式呈现。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>:hexoPostRenderEscape–&gt;</p><a id="more"></a><p>   回答（参考1-5）：<br>   &lt;!–hexoPostRenderEscape:<pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE&gt;  声明一般位于文档的第一行，它的作用主要是告诉浏览器以什么样的模式来解析文档。一般指定了之后会以标准模式来<br>进行文档解析，否则就以兼容模式进行解析。在标准模式下，浏览器的解析规则都是按照最新的标准进行解析的。而在兼容模式下，浏<br>览器会以向后兼容的方式来模拟老式浏览器的行为，以保证一些老的网站的正确访问。</p><p>在 html5 之后不再需要指定 DTD 文档，因为 html5 以前的 html 文档都是基于 SGML 的，所以需要通过指定 DTD 来定义文<br>档中允许的属性以及一些规则。而 html5 不再基于 SGML 了，所以不再需要使用 DTD。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>:hexoPostRenderEscape–&gt;</p><h4 id="2-标准模式与兼容模式各有什么区别？"><a href="#2-标准模式与兼容模式各有什么区别？" class="headerlink" title="2. 标准模式与兼容模式各有什么区别？"></a>2. 标准模式与兼容模式各有什么区别？</h4>   <pre class="line-numbers language-none"><code class="language-none">标准模式的渲染方式和 JS 引擎的解析方式都是以该浏览器支持的最高标准运行。在兼容模式中，页面以宽松的向后兼容的方式显示，模拟老式浏览器的行为以防止站点无法工作。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-HTML5-为什么只需要写-lt-DOCTYPE-HTML-gt-，而不需要引入-DTD？"><a href="#3-HTML5-为什么只需要写-lt-DOCTYPE-HTML-gt-，而不需要引入-DTD？" class="headerlink" title="3. HTML5 为什么只需要写 &lt;!DOCTYPE HTML&gt;，而不需要引入 DTD？"></a>3. HTML5 为什么只需要写 <code>&lt;!DOCTYPE HTML&gt;</code>，而不需要引入 DTD？</h4>   <pre class="line-numbers language-none"><code class="language-none">HTML5 不基于 SGML，因此不需要对 DTD 进行引用，但是需要 DOCTYPE 来规范浏览器的行为（让浏览器按照它们应该的方式来运行）。而 HTML4.01 基于 SGML ，所以需要对 DTD 进行引用，才能告知浏览器文档所使用的文档类型。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-SGML-、-HTML-、XML-和-XHTML-的区别？"><a href="#4-SGML-、-HTML-、XML-和-XHTML-的区别？" class="headerlink" title="4. SGML 、 HTML 、XML 和 XHTML 的区别？"></a>4. SGML 、 HTML 、XML 和 XHTML 的区别？</h4>   <pre class="line-numbers language-none"><code class="language-none">SGML 是标准通用标记语言，是一种定义电子文档结构和描述其内容的国际标准语言，是所有电子文档标记语言的起源。HTML 是超文本标记语言，主要是用于规定怎么显示网页。XML 是可扩展标记语言是未来网页语言的发展方向，XML 和 HTML 的最大区别就在于 XML 的标签是可以自己创建的，数量无限多，而 HTML 的标签都是固定的而且数量有限。XHTML 也是现在基本上所有网页都在用的标记语言，他其实和 HTML 没什么本质的区别，标签都一样，用法也都一样，就是比 HTML 更严格，比如标签必须都用小写，标签都必须有闭合标签等。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-DTD-介绍"><a href="#5-DTD-介绍" class="headerlink" title="5. DTD 介绍"></a>5. DTD 介绍</h4>   <pre class="line-numbers language-none"><code class="language-none">DTD（ Document Type Definition 文档类型定义）是一组机器可读的规则，它们定义 XML 或 HTML 的特定版本中所有允许元素及它们的属性和层次关系的定义。在解析网页时，浏览器将使用这些规则检查页面的有效性并且采取相应的措施。DTD 是对 HTML 文档的声明，还会影响浏览器的渲染模式（工作模式）。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-行内元素定义"><a href="#6-行内元素定义" class="headerlink" title="6. 行内元素定义"></a>6. 行内元素定义</h4>   <pre class="line-numbers language-none"><code class="language-none">HTML4 中，元素被分成两大类: inline （内联元素）与 block（块级元素）。一个行内元素只占据它对应标签的边框所包含的空间。常见的行内元素有 a b span img strong sub sup button input label select textarea<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-块级元素定义"><a href="#7-块级元素定义" class="headerlink" title="7. 块级元素定义"></a>7. 块级元素定义</h4>   <pre class="line-numbers language-none"><code class="language-none">块级元素占据其父元素（容器）的整个宽度，因此创建了一个“块”。常见的块级元素有  div ul ol li dl dt dd h1 h2 h3 h4 h5 h6 p <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="8-行内元素与块级元素的区别？"><a href="#8-行内元素与块级元素的区别？" class="headerlink" title="8. 行内元素与块级元素的区别？"></a>8. 行内元素与块级元素的区别？</h4>   <pre class="line-numbers language-none"><code class="language-none">HTML4中，元素被分成两大类：inline （内联元素）与 block （块级元素）。（1） 格式上，默认情况下，行内元素不会以新行开始，而块级元素会新起一行。（2） 内容上，默认情况下，行内元素只能包含文本和其他行内元素。而块级元素可以包含行内元素和其他块级元素。（3） 行内元素与块级元素属性的不同，主要是盒模型属性上：行内元素设置 width 无效，height 无效（可以设置 line-hei     ght），设置 margin 和 padding 的上下不会对其他元素产生影响。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-HTML5-元素的分类"><a href="#9-HTML5-元素的分类" class="headerlink" title="9. HTML5 元素的分类"></a>9. HTML5 元素的分类</h4>   <pre class="line-numbers language-none"><code class="language-none">HTML4中，元素被分成两大类: inline（内联元素）与 block（块级元素）。但在实际的开发过程中，因为页面表现的需要，前端工程师经常把 inline 元素的 display 值设定为 block （比如 a 标签），也经常把 block 元素的 display 值设定为inline 之后更是出现了 inline-block 这一对外呈现 inline 对内呈现 block 的属性。因此，简单地把 HTML 元素划分为inline 与 block 已经不再符合实际需求。HTML5中，元素主要分为7类：Metadata Flow Sectioning Heading Phrasing Embedded Interactive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="10-空元素定义"><a href="#10-空元素定义" class="headerlink" title="10. 空元素定义"></a>10. 空元素定义</h4>   <pre class="line-numbers language-none"><code class="language-none">标签内没有内容的 HTML 标签被称为空元素。空元素是在开始标签中关闭的。常见的空元素有：br hr img input link meta<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="11-link-标签定义"><a href="#11-link-标签定义" class="headerlink" title="11. link 标签定义"></a>11. link 标签定义</h4>   <pre class="line-numbers language-none"><code class="language-none">link 标签定义文档与外部资源的关系。link 元素是空元素，它仅包含属性。 此元素只能存在于 head 部分，不过它可出现任何次数。link 标签中的 rel 属性定义了当前文档与被链接文档之间的关系。常见的 stylesheet 指的是定义一个外部加载的样式表。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="12-页面导入样式时，使用-link-和-import-有什么区别？"><a href="#12-页面导入样式时，使用-link-和-import-有什么区别？" class="headerlink" title="12. 页面导入样式时，使用 link 和 @import 有什么区别？"></a>12. 页面导入样式时，使用 link 和 @import 有什么区别？</h4>   <pre class="line-numbers language-none"><code class="language-none">（1）从属关系区别。 @import 是 CSS 提供的语法规则，只有导入样式表的作用；link 是 HTML 提供的标签，不仅可以加     载 CSS 文件，还可以定义 RSS、rel 连接属性、引入网站图标等。（2）加载顺序区别。加载页面时，link 标签引入的 CSS 被同时加载；@import 引入的 CSS 将在页面加载完毕后被加载。（3）兼容性区别。@import 是 CSS2.1 才有的语法，故只可在 IE5+ 才能识别；link 标签作为 HTML 元素，不存在兼容     性问题。（4）DOM 可控性区别。可以通过 JS 操作 DOM ，插入 link 标签来改变样式；由于 DOM 方法是基于文档的，无法使用 @i    mport 的方式插入样式。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="13-你对浏览器的理解？"><a href="#13-你对浏览器的理解？" class="headerlink" title="13. 你对浏览器的理解？"></a>13. 你对浏览器的理解？</h4>   <pre class="line-numbers language-none"><code class="language-none">浏览器的主要功能是将用户选择的 web 资源呈现出来，它需要从服务器请求资源，并将其显示在浏览器窗口中，资源的格式通常是 HTML，也包括 PDF、image 及其他格式。用户用 URI（Uniform Resource Identifier 统一资源标识符）来指定所请求资源的位置。HTML 和 CSS 规范中规定了浏览器解释 html 文档的方式，由 W3C 组织对这些规范进行维护，W3C 是负责制定 web 标准的组织。但是浏览器厂商纷纷开发自己的扩展，对规范的遵循并不完善，这为 web 开发者带来了严重的兼容性问题。简单来说浏览器可以分为两部分，shell 和 内核。其中 shell 的种类相对比较多，内核则比较少。shell 是指浏览器的外壳：例如菜单，工具栏等。主要是提供给用户界面操作，参数设置等等。它是调用内核来实现各种功能的。内核才是浏览器的核心。内核是基于标记语言显示内容的程序或模块。也有一些 浏览器并不区分外壳和内核。从 Mozilla 将 Gecko 独立出来后，才有了外壳和内核的明确划分。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="14-介绍一下你对浏览器内核的理解？"><a href="#14-介绍一下你对浏览器内核的理解？" class="headerlink" title="14. 介绍一下你对浏览器内核的理解？"></a>14. 介绍一下你对浏览器内核的理解？</h4>   <pre class="line-numbers language-none"><code class="language-none">主要分成两部分：渲染引擎和 JS 引擎。渲染引擎的职责就是渲染，即在浏览器窗口中显示所请求的内容。默认情况下，渲染引擎可以显示 html、xml 文档及图片，它也可以借助插件（一种浏览器扩展）显示其他类型数据，例如使用 PDF 阅读器插件，可以显示 PDF 格式。JS 引擎：解析和执行 javascript 来实现网页的动态效果。最开始渲染引擎和 JS 引擎并没有区分的很明确，后来 JS 引擎越来越独立，内核就倾向于只指渲染引擎。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="15-常见的浏览器内核比较"><a href="#15-常见的浏览器内核比较" class="headerlink" title="15. 常见的浏览器内核比较"></a>15. 常见的浏览器内核比较</h4>   <pre class="line-numbers language-none"><code class="language-none">Trident：这种浏览器内核是 IE 浏览器用的内核，因为在早期 IE 占有大量的市场份额，所以这种内核比较流行，以前有很多网页也是根据这个内核的标准来编写的，但是实际上这个内核对真正的网页标准支持不是很好。但是由于 IE 的高市场占有率，微软也很长时间没有更新 Trident 内核，就导致了 Trident 内核和 W3C 标准脱节。还有就是 Trident 内核的大量 Bug 等安全问题没有得到解决，加上一些专家学者公开自己认为 IE 浏览器不安全的观点，使很多用户开始转向其他浏览器。Gecko：这是 Firefox 和 Flock 所采用的内核，这个内核的优点就是功能强大、丰富，可以支持很多复杂网页效果和浏览器扩展接口，但是代价是也显而易见就是要消耗很多的资源，比如内存。Presto：Opera 曾经采用的就是 Presto 内核，Presto 内核被称为公认的浏览网页速度最快的内核，这得益于它在开发时的天生优势，在处理 JS 脚本等脚本语言时，会比其他的内核快3倍左右，缺点就是为了达到很快的速度而丢掉了一部分网页兼容性。Webkit：Webkit 是 Safari 采用的内核，它的优点就是网页浏览速度较快，虽然不及 Presto 但是也胜于 Gecko 和 Trident，缺点是对于网页代码的容错性不高，也就是说对网页代码的兼容性较低，会使一些编写不标准的网页无法正确显示。WebKit 前身是 KDE 小组的 KHTML 引擎，可以说 WebKit 是 KHTML 的一个开源的分支。Blink：谷歌在 Chromium Blog 上发表博客，称将与苹果的开源浏览器核心 Webkit 分道扬镳，在 Chromium 项目中研发 Blink 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。其实 Blink 引擎就是 Webkit 的一个分支，就像 webkit 是KHTML 的分支一样。Blink 引擎现在是谷歌公司与 Opera Software 共同研发，上面提到过的，Opera 弃用了自己的 Presto 内核，加入 Google 阵营，跟随谷歌一起研发 Blink。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   详细的资料可以参考：<br>   <a href="http://www.cnblogs.com/fullhouse/archive/2011/12/19/2293455.html">《浏览器内核的解析和对比》</a><br>   <a href="https://blog.csdn.net/Summer_15/article/details/71249203">《五大主流浏览器内核的源起以及国内各大浏览器内核总结》</a></p><h4 id="16-常见浏览器所用内核"><a href="#16-常见浏览器所用内核" class="headerlink" title="16. 常见浏览器所用内核"></a>16. 常见浏览器所用内核</h4>   <pre class="line-numbers language-none"><code class="language-none">（1） IE 浏览器内核：Trident 内核，也是俗称的 IE 内核；（2） Chrome 浏览器内核：统称为 Chromium 内核或 Chrome 内核，以前是 Webkit 内核，现在是 Blink内核；（3） Firefox 浏览器内核：Gecko 内核，俗称 Firefox 内核；（4） Safari 浏览器内核：Webkit 内核；（5） Opera 浏览器内核：最初是自己的 Presto 内核，后来加入谷歌大军，从 Webkit 又到了 Blink 内核；（6） 360浏览器、猎豹浏览器内核：IE + Chrome 双内核；（7） 搜狗、遨游、QQ 浏览器内核：Trident（兼容模式）+ Webkit（高速模式）；（8） 百度浏览器、世界之窗内核：IE 内核；（9） 2345浏览器内核：好像以前是 IE 内核，现在也是 IE + Chrome 双内核了；（10）UC 浏览器内核：这个众口不一，UC 说是他们自己研发的 U3 内核，但好像还是基于 Webkit 和 Trident ，还有说     是基于火狐内核。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="17-浏览器的渲染原理？"><a href="#17-浏览器的渲染原理？" class="headerlink" title="17. 浏览器的渲染原理？"></a>17. 浏览器的渲染原理？</h4>   <pre class="line-numbers language-none"><code class="language-none">（1）首先解析收到的文档，根据文档定义构建一棵 DOM 树，DOM 树是由 DOM 元素及属性节点组成的。（2）然后对 CSS 进行解析，生成 CSSOM 规则树。（3）根据 DOM 树和 CSSOM 规则树构建渲染树。渲染树的节点被称为渲染对象，渲染对象是一个包含有颜色和大小等属性的矩    形，渲染对象和 DOM 元素相对应，但这种对应关系不是一对一的，不可见的 DOM 元素不会被插入渲染树。还有一些 DOM     元素对应几个可见对象，它们一般是一些具有复杂结构的元素，无法用一个矩形来描述。（4）当渲染对象被创建并添加到树中，它们并没有位置和大小，所以当浏览器生成渲染树以后，就会根据渲染树来进行布局（也    可以叫做回流）。这一阶段浏览器要做的事情是要弄清楚各个节点在页面中的确切位置和大小。通常这一行为也被称为“自动    重排”。（5）布局阶段结束后是绘制阶段，遍历渲染树并调用渲染对象的 paint 方法将它们的内容显示在屏幕上，绘制使用 UI 基础组    件。 值得注意的是，这个过程是逐步完成的，为了更好的用户体验，渲染引擎将会尽可能早的将内容呈现到屏幕上，并不会等到所有的 html 都解析完成之后再去构建和布局 render 树。它是解析完一部分内容就显示一部分内容，同时，可能还在通过网络下载其 余内容。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   详细资料可以参考：<br>   <a href="https://juejin.im/book/5bdc715fe51d454e755f75ef/section/5bdc7207f265da613c09425d">《浏览器渲染原理》</a><br>   <a href="https://coolshell.cn/articles/9666.html">《浏览器的渲染原理简介》</a><br>   <a href="https://kb.cnblogs.com/page/129756/">《前端必读：浏览器内部工作原理》</a><br>   <a href="https://blog.fundebug.com/2019/01/03/understand-browser-rendering/">《深入浅出浏览器渲染原理》</a></p><h4 id="18-渲染过程中遇到-JS-文件怎么处理？（浏览器解析过程）"><a href="#18-渲染过程中遇到-JS-文件怎么处理？（浏览器解析过程）" class="headerlink" title="18. 渲染过程中遇到 JS 文件怎么处理？（浏览器解析过程）"></a>18. 渲染过程中遇到 JS 文件怎么处理？（浏览器解析过程）</h4>   <pre class="line-numbers language-none"><code class="language-none">JavaScript 的加载、解析与执行会阻塞文档的解析，也就是说，在构建 DOM 时，HTML 解析器若遇到了 JavaScript，那么它会暂停文档的解析，将控制权移交给 JavaScript 引擎，等 JavaScript 引擎运行完毕，浏览器再从中断的地方恢复继续解析文档。也就是说，如果你想首屏渲染的越快，就越不应该在首屏就加载 JS 文件，这也是都建议将 script 标签放在 body 标签底部的原因。当然在当下，并不是说 script 标签必须放在底部，因为你可以给 script 标签添加 defer 或者 async 属性。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="19-async-和-defer-的作用是什么？有什么区别？（浏览器解析过程）"><a href="#19-async-和-defer-的作用是什么？有什么区别？（浏览器解析过程）" class="headerlink" title="19. async 和 defer 的作用是什么？有什么区别？（浏览器解析过程）"></a>19. async 和 defer 的作用是什么？有什么区别？（浏览器解析过程）</h4>   <pre class="line-numbers language-none"><code class="language-none">（1）脚本没有 defer 或 async，浏览器会立即加载并执行指定的脚本，也就是说不等待后续载入的文档元素，读到就加载并执    行。（2）defer 属性表示延迟执行引入的 JavaScript，即这段 JavaScript 加载时 HTML 并未停止解析，这两个过程是并行的。    当整个 document 解析完毕后再执行脚本文件，在 DOMContentLoaded 事件触发之前完成。多个脚本按顺序执行。（3）async 属性表示异步执行引入的 JavaScript，与 defer 的区别在于，如果已经加载好，就会开始执行，也就是说它的执    行仍然会阻塞文档的解析，只是它的加载过程不会阻塞。多个脚本的执行顺序无法保证。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   详细资料可以参考：<br>   <a href="https://segmentfault.com/q/1010000000640869">《defer 和 async 的区别》</a></p><h4 id="20-什么是文档的预解析？（浏览器解析过程）"><a href="#20-什么是文档的预解析？（浏览器解析过程）" class="headerlink" title="20. 什么是文档的预解析？（浏览器解析过程）"></a>20. 什么是文档的预解析？（浏览器解析过程）</h4>   <pre class="line-numbers language-none"><code class="language-none">Webkit 和 Firefox 都做了这个优化，当执行 JavaScript 脚本时，另一个线程解析剩下的文档，并加载后面需要通过网络加载的资源。这种方式可以使资源并行加载从而使整体速度更快。需要注意的是，预解析并不改变 DOM 树，它将这个工作留给主解析过程，自己只解析外部资源的引用，比如外部脚本、样式表及图片。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="21-CSS-如何阻塞文档解析？（浏览器解析过程）"><a href="#21-CSS-如何阻塞文档解析？（浏览器解析过程）" class="headerlink" title="21. CSS 如何阻塞文档解析？（浏览器解析过程）"></a>21. CSS 如何阻塞文档解析？（浏览器解析过程）</h4>   <pre class="line-numbers language-none"><code class="language-none">理论上，既然样式表不改变 DOM 树，也就没有必要停下文档的解析等待它们，然而，存在一个问题，JavaScript 脚本执行时可能在文档的解析过程中请求样式信息，如果样式还没有加载和解析，脚本将得到错误的值，显然这将会导致很多问题。所以如果浏览器尚未完成 CSSOM 的下载和构建，而我们却想在此时运行脚本，那么浏览器将延迟 JavaScript 脚本执行和文档的解析，直至其完成 CSSOM 的下载和构建。也就是说，在这种情况下，浏览器会先下载和构建 CSSOM，然后再执行 JavaScript，最后再继续文档的解析。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="22-渲染页面时常见哪些不良现象？（浏览器渲染过程）"><a href="#22-渲染页面时常见哪些不良现象？（浏览器渲染过程）" class="headerlink" title="22. 渲染页面时常见哪些不良现象？（浏览器渲染过程）"></a>22. 渲染页面时常见哪些不良现象？（浏览器渲染过程）</h4>   <pre class="line-numbers language-none"><code class="language-none">FOUC：主要指的是样式闪烁的问题，由于浏览器渲染机制（比如firefox），在 CSS 加载之前，先呈现了 HTML，就会导致展示      出无样式内容，然后样式突然呈现的现象。会出现这个问题的原因主要是 css 加载时间过长，或者 css 被放在了文档底      部。白屏：有些浏览器渲染机制（比如chrome）要先构建 DOM 树和 CSSOM 树，构建完成后再进行渲染，如果 CSS 部分放在 HTML      尾部，由于 CSS 未加载完成，浏览器迟迟未渲染，从而导致白屏；也可能是把 js 文件放在头部，脚本的加载会阻塞后面     文档内容的解析，从而页面迟迟未渲染出来，出现白屏问题。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   详细资料可以参考：<br>    <a href="https://juejin.im/entry/58f867045c497d0058e2ff3a">《前端魔法堂：解秘 FOUC》</a><br>    <a href="https://www.jianshu.com/p/6617efa874b0">《白屏问题和 FOUC》</a></p><h4 id="23-如何优化关键渲染路径？（浏览器渲染过程）"><a href="#23-如何优化关键渲染路径？（浏览器渲染过程）" class="headerlink" title="23. 如何优化关键渲染路径？（浏览器渲染过程）"></a>23. 如何优化关键渲染路径？（浏览器渲染过程）</h4>   <pre class="line-numbers language-none"><code class="language-none">为尽快完成首次渲染，我们需要最大限度减小以下三种可变因素：（1）关键资源的数量。（2）关键路径长度。（3）关键字节的数量。关键资源是可能阻止网页首次渲染的资源。这些资源越少，浏览器的工作量就越小，对 CPU 以及其他资源的占用也就越少。同样，关键路径长度受所有关键资源与其字节大小之间依赖关系图的影响：某些资源只能在上一资源处理完毕之后才能开始下载，并且资源越大，下载所需的往返次数就越多。最后，浏览器需要下载的关键字节越少，处理内容并让其出现在屏幕上的速度就越快。要减少字节数，我们可以减少资源数（将它们删除或设为非关键资源），此外还要压缩和优化各项资源，确保最大限度减小传送大小。优化关键渲染路径的常规步骤如下：（1）对关键路径进行分析和特性描述：资源数、字节数、长度。（2）最大限度减少关键资源的数量：删除它们，延迟它们的下载，将它们标记为异步等。（3）优化关键字节数以缩短下载时间（往返次数）。（4）优化其余关键资源的加载顺序：您需要尽早下载所有关键资产，以缩短关键路径长度。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   详细资料可以参考：<br>   <a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/optimizing-critical-rendering-path?hl=zh-cn">《优化关键渲染路径》</a></p><h4 id="24-什么是重绘和回流？（浏览器绘制过程）"><a href="#24-什么是重绘和回流？（浏览器绘制过程）" class="headerlink" title="24. 什么是重绘和回流？（浏览器绘制过程）"></a>24. 什么是重绘和回流？（浏览器绘制过程）</h4>   <pre class="line-numbers language-none"><code class="language-none">重绘: 当渲染树中的一些元素需要更新属性，而这些属性只是影响元素的外观、风格，而不会影响布局的操作，比如 background      -color，我们将这样的操作称为重绘。回流：当渲染树中的一部分（或全部）因为元素的规模尺寸、布局、隐藏等改变而需要重新构建的操作，会影响到布局的操作，这样     的操作我们称为回流。常见引起回流属性和方法：任何会改变元素几何信息（元素的位置和尺寸大小）的操作，都会触发回流。（1）添加或者删除可见的 DOM 元素；（2）元素尺寸改变——边距、填充、边框、宽度和高度（3）内容变化，比如用户在 input 框中输入文字（4）浏览器窗口尺寸改变——resize事件发生时（5）计算 offsetWidth 和 offsetHeight 属性（6）设置 style 属性的值（7）当你修改网页的默认字体时。回流必定会发生重绘，重绘不一定会引发回流。回流所需的成本比重绘高的多，改变父节点里的子节点很可能会导致父节点的一系列回流。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   常见引起重绘属性和方法：</p><p>   <img src="https://cavszhouyou-1254093697.cos.ap-chongqing.myqcloud.com/note-14.png" alt="常见引起回流属性和方法"></p><p>   常见引起回流属性和方法：</p><p>   <img src="https://cavszhouyou-1254093697.cos.ap-chongqing.myqcloud.com/note-13.png" alt="常见引起重绘属性和方法"></p><p>   详细资料可以参考：<br>   <a href="https://juejin.im/post/5a9923e9518825558251c96a">《浏览器的回流与重绘》</a></p><h4 id="25-如何减少回流？（浏览器绘制过程）"><a href="#25-如何减少回流？（浏览器绘制过程）" class="headerlink" title="25. 如何减少回流？（浏览器绘制过程）"></a>25. 如何减少回流？（浏览器绘制过程）</h4>   <pre class="line-numbers language-none"><code class="language-none">（1）使用 transform 替代 top（2）不要把节点的属性值放在一个循环里当成循环里的变量（3）不要使用 table 布局，可能很小的一个小改动会造成整个 table 的重新布局（4）把 DOM 离线后修改。如：使用 documentFragment 对象在内存里操作 DOM（5）不要一条一条地修改 DOM 的样式。与其这样，还不如预先定义好 css 的 class，然后修改 DOM 的 className。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="26-为什么操作-DOM-慢？（浏览器绘制过程）"><a href="#26-为什么操作-DOM-慢？（浏览器绘制过程）" class="headerlink" title="26. 为什么操作 DOM 慢？（浏览器绘制过程）"></a>26. 为什么操作 DOM 慢？（浏览器绘制过程）</h4>   <pre class="line-numbers language-none"><code class="language-none">一些 DOM 的操作或者属性访问可能会引起页面的回流和重绘，从而引起性能上的消耗。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="27-DOMContentLoaded-事件和-Load-事件的区别？"><a href="#27-DOMContentLoaded-事件和-Load-事件的区别？" class="headerlink" title="27. DOMContentLoaded 事件和 Load 事件的区别？"></a>27. DOMContentLoaded 事件和 Load 事件的区别？</h4>   <pre class="line-numbers language-none"><code class="language-none">当初始的 HTML 文档被完全加载和解析完成之后，DOMContentLoaded 事件被触发，而无需等待样式表、图像和子框架的加载完成。Load 事件是当所有资源加载完成后触发的。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>   详细资料可以参考：<br>   <a href="https://www.jianshu.com/p/ca8dae435a2c">《DOMContentLoaded 事件 和 Load 事件的区别？》</a></p><h4 id="28-HTML5-有哪些新特性、移除了那些元素？"><a href="#28-HTML5-有哪些新特性、移除了那些元素？" class="headerlink" title="28. HTML5 有哪些新特性、移除了那些元素？"></a>28. HTML5 有哪些新特性、移除了那些元素？</h4>   <pre class="line-numbers language-none"><code class="language-none">HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加。新增的有：绘画 canvas;用于媒介回放的 video 和 audio 元素;本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失;sessionStorage 的数据在浏览器关闭后自动删除;语意化更好的内容元素，比如 article、footer、header、nav、section;表单控件，calendar、date、time、email、url、search;新的技术 webworker, websocket;新的文档属性 document.visibilityState移除的元素有：纯表现的元素：basefont，big，center，font, s，strike，tt，u;对可用性产生负面影响的元素：frame，frameset，noframes；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="29-如何处理-HTML5-新标签的浏览器兼容问题？"><a href="#29-如何处理-HTML5-新标签的浏览器兼容问题？" class="headerlink" title="29. 如何处理 HTML5 新标签的浏览器兼容问题？"></a>29. 如何处理 HTML5 新标签的浏览器兼容问题？</h4>   <pre class="line-numbers language-html" data-language="html"><code class="language-html">（1） IE8/IE7/IE6 支持通过 document.createElement 方法产生的标签，可以利用这一特性让这些浏览器    支持 HTML5 新标签，浏览器支持新标签后，还需要添加标签默认的样式。（2） 当然也可以直接使用成熟的框架，比如 html5shiv ;     `<span class="token comment">&lt;!--[if lt IE 9]>     &lt;script> src="https://cdn.jsdelivr.net/npm/html5shiv/dist/html5shiv.min.js"&lt;/script>     &lt;![endif]--></span>`<pre><code> [if lte IE 9]……[endif] 判断 IE 的版本，限定只有 IE9 以下浏览器版本需要执行的语句。&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;:hexoPostRenderEscape--&gt;</code></pre><h4 id="30-简述一下你对-HTML-语义化的理解？"><a href="#30-简述一下你对-HTML-语义化的理解？" class="headerlink" title="30. 简述一下你对 HTML 语义化的理解？"></a>30. 简述一下你对 HTML 语义化的理解？</h4><p>   相关知识点：<br>   <pre class="line-numbers language-none"><code class="language-none">（1） 用正确的标签做正确的事情。（2） html 语义化让页面的内容结构化，结构更清晰，便于对浏览器、搜索引擎解析;（3） 即使在没有样式 CSS 情况下也以一种文档格式显示，并且是容易阅读的;（4） 搜索引擎的爬虫也依赖于 HTML 标记来确定上下文和各个关键字的权重，利于 SEO ;（5） 使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>   回答：<br>   <pre class="line-numbers language-none"><code class="language-none">我认为 html 语义化主要指的是我们应该使用合适的标签来划分网页内容的结构。html 的本质作用其实就是定义网页文档的结构，一个语义化的文档，能够使页面的结构更加清晰，易于理解。这样不仅有利于开发者的维护和理解，同时也能够使机器对文档内容进行正确的解读。比如说我们常用的 b 标签和 strong 标签，它们在样式上都是文字的加粗，但是 strong 标签拥有强调的语义。对于一般显示来说，可能我们看上去没有差异，但是对于机器来说，就会有很大的不同。如果用户使用的是屏幕阅读器来访问网页的话，使用 strong 标签就会有明显的语调上的变化，而 b 标签则没有。如果是搜索引擎的爬虫对我们网页进行分析的话，那么它会依赖于 html 标签来确定上下文和各个关键字的权重，一个语义化的文档对爬虫来说是友好的，是有利于爬虫对文档内容解读的，从而有利于我们网站的 SEO 。从 html5 我们可以看出，标准是倾向于以语义化的方式来构建网页的，比如新增了 header 、footer 这些语义标签，删除了 big 、font 这些没有语义的标签。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>   详细资料可以参考：<br>   <a href="https://www.html.cn/archives/1668">《语义化的 HTML 结构到底有什么好处？》</a><br>   <a href="https://www.zhihu.com/question/20455165">《如何理解 Web 语义化？》</a><br>   <a href="https://juejin.im/post/5a9c8866f265da23741072bf#heading-5">《我的 HTML 会说话——从实用出发，谈谈 HTML 的语义化》</a></p><h4 id="31-b-与-strong-的区别和-i-与-em-的区别？"><a href="#31-b-与-strong-的区别和-i-与-em-的区别？" class="headerlink" title="31. b 与 strong 的区别和 i 与 em 的区别？"></a>31. b 与 strong 的区别和 i 与 em 的区别？</h4>   <pre class="line-numbers language-none"><code class="language-none">    从页面显示效果来看，被 &lt;b&gt; 和 &lt;strong&gt; 包围的文字将会被加粗，而被 &lt;i&gt; 和 &lt;em&gt; 包围的文字将以斜体的形式呈现。    但是 &lt;b&gt; &lt;i&gt; 是自然样式标签，分别表示无意义的加粗，无意义的斜体，表现样式为 &#123; font-weight: bolder&#125;，仅仅表示「这    里应该用粗体显示」或者「这里应该用斜体显示」，此两个标签在 HTML4.01 中并不被推荐使用。    而 &lt;em&gt; 和 &lt;strong&gt; 是语义样式标签。 &lt;em&gt; 表示一般的强调文本，而 &lt;strong&gt; 表示比 &lt;em&gt; 语义更强的强调文本。    使用阅读设备阅读网页时：&lt;strong&gt; 会重读，而 &lt;b&gt; 是展示强调内容。   &#96;&#96;&#96;    详细资料可以参考：   [《HTML5 中的 b&#x2F;strong，i&#x2F;em 有什么区别？》](https:&#x2F;&#x2F;www.zhihu.com&#x2F;question&#x2F;19551271)#### 32. 前端需要注意哪些 SEO ？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>（1）合理的 title、description、keywords：搜索对着三项的权重逐个减小，title 值强调重点即可，重要关键词出现不要超    过2次，而且要靠前，不同页面 title 要有所不同；description 把页面内容高度概括，长度合适，不可过分堆砌关键词，不    同页面 description 有所不同；keywords 列举出重要关键词即可。（2）语义化的 HTML 代码，符合 W3C 规范：语义化代码让搜索引擎容易理解网页。（3）重要内容 HTML 代码放在最前：搜索引擎抓取 HTML 顺序是从上到下，有的搜索引擎对抓取长度有限制，保证重要内容肯定被    抓取。（4）重要内容不要用 js 输出：爬虫不会执行 js 获取内容（5）少用 iframe：搜索引擎不会抓取 iframe 中的内容（6）非装饰性图片必须加 alt（7）提高网站速度：网站速度是搜索引擎排序的一个重要指标</code></pre>   <pre class="line-numbers language-none"><code class="language-none">#### 33. HTML5 的离线储存怎么使用，工作原理能不能解释一下？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件。原理：HTML5 的离线存储是基于一个新建的 .appcache 文件的缓存机制（不是存储技术），通过这个文件上的解析清单离线存储资     源，这些资源就会像 cookie 一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面     展示。如何使用：（1）创建一个和 html 同名的 manifest 文件，然后在页面头部像下面一样加入一个 manifest 的属性。    &lt;html lang=&quot;en&quot; manifest=&quot;index.manifest&quot;&gt;（2）在如下 cache.manifest 文件的编写离线存储的资源。      CACHE MANIFEST      #v0.11      CACHE:      js/app.js      css/style.css      NETWORK:      resourse/logo.png      FALLBACK:      / /offline.html    CACHE: 表示需要离线存储的资源列表，由于包含 manifest 文件的页面将被自动离线存储，所以不需要把页面自身也列出           来。    NETWORK: 表示在它下面列出来的资源只有在在线的情况下才能访问，他们不会被离线存储，所以在离线情况下无法使用这些             资源。不过，如果在 CACHE 和 NETWORK 中有一个相同的资源，那么这个资源还是会被离线存储，也就是说 C             ACHE 的优先级更高。    FALLBACK: 表示如果访问第一个资源失败，那么就使用第二个资源来替换他，比如上面这个文件表示的就是如果访问根目录下              任何一个资源失败了，那么就去访问 offline.html 。（3）在离线状态时，操作 window.applicationCache 进行离线缓存的操作。如何更新缓存：（1）更新 manifest 文件（2）通过 javascript 操作（3）清除浏览器缓存注意事项：（1）浏览器对缓存数据的容量限制可能不太一样（某些浏览器设置的限制是每个站点 5MB）。（2）如果 manifest 文件，或者内部列举的某一个文件不能正常下载，整个更新过程都将失败，浏览器继续全部使用老的缓存。（3）引用 manifest 的 html 必须与 manifest 文件同源，在同一个域下。（4）FALLBACK 中的资源必须和 manifest 文件同源。（5）当一个资源被缓存后，该浏览器直接请求这个绝对路径也会访问缓存中的资源。（6）站点中的其他页面即使没有设置 manifest 属性，请求的资源如果在缓存中也从缓存中访问。（7）当 manifest 文件发生改变时，资源请求本身也会触发更新。</code></pre>   <pre class="line-numbers language-none"><code class="language-none">   详细的使用可以参考：   [《HTML5 离线缓存-manifest 简介》](https:&#x2F;&#x2F;yanhaijing.com&#x2F;html&#x2F;2014&#x2F;12&#x2F;28&#x2F;html5-manifest&#x2F;)   [《有趣的 HTML5：离线存储》](https:&#x2F;&#x2F;segmentfault.com&#x2F;a&#x2F;1190000000732617)#### 34. 浏览器是怎么对 HTML5 的离线储存资源进行管理和加载的呢？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>在线的情况下，浏览器发现 html 头部有 manifest 属性，它会请求 manifest 文件，如果是第一次访问 app ，那么浏览器就会根据 manifest 文件的内容下载相应的资源并且进行离线存储。如果已经访问过 app 并且资源已经离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的 manifest 文件与旧的 manifest 文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，那么就会重新下载文件中的资源并进行离线存储。离线的情况下，浏览器就直接使用离线存储的资源。</code></pre>   <pre class="line-numbers language-none"><code class="language-none">    #### 35. 常见的浏览器端的存储技术有哪些？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>浏览器常见的存储技术有 cookie、localStorage 和 sessionStorage。还有两种存储技术用于大规模数据存储，webSQL（已被废除）和 indexDB。IE 支持 userData 存储数据，但是基本很少使用到，除非有很强的浏览器兼容需求。</code></pre>   <pre class="line-numbers language-none"><code class="language-none">   详细的资料可以参考：   [《很全很全的前端本地存储讲解》](https:&#x2F;&#x2F;segmentfault.com&#x2F;a&#x2F;1190000012578794#articleHeader0)#### 36. 请描述一下 cookies，sessionStorage 和 localStorage 的区别？   相关资料：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>SessionStorage， LocalStorage， Cookie 这三者都可以被用来在浏览器端存储数据，而且都是字符串类型的键值对。区别在于前两者属于 HTML5 WebStorage，创建它们的目的便于客户端存储数据。而 cookie 是网站为了标示用户身份而储存在用户本地终端上的数据（通常经过加密）。cookie 数据始终在同源（协议、主机、端口相同）的 http 请求中携带（即使不需要），会在浏览器和服务器间来回传递。存储大小：      cookie 数据大小不能超过4 k 。      sessionStorage 和 localStorage 虽然也有存储大小的限制，但比 cookie 大得多，可以达到 5M 或更大。有期时间：      localStorage    存储持久数据，浏览器关闭后数据不丢失除非主动删除数据。      sessionStorage  数据在页面会话结束时会被清除。页面会话在浏览器打开期间一直保持，并且重新加载或恢复页面仍会                    保持原来的页面会话。在新标签或窗口打开一个页面时会在顶级浏览上下文中初始化一个新的会话。      cookie          设置的 cookie 过期时间之前一直有效，即使窗口或浏览器关闭。作用域：    sessionStorage  只在同源的同窗口（或标签页）中共享数据，也就是只在当前会话中共享。    localStorage    在所有同源窗口中都是共享的。    cookie          在所有同源窗口中都是共享的。</code></pre>   <pre class="line-numbers language-none"><code class="language-none">回答：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>浏览器端常用的存储技术是 cookie 、localStorage 和 sessionStorage。cookie 其实最开始是服务器端用于记录用户状态的一种方式，由服务器设置，在客户端存储，然后每次发起同源请求时，发送给服务器端。cookie 最多能存储 4 k 数据，它的生存时间由 expires 属性指定，并且 cookie 只能被同源的页面访问共享。sessionStorage 是 html5 提供的一种浏览器本地存储的方法，它借鉴了服务器端 session 的概念，代表的是一次会话中所保存的数据。它一般能够存储 5M 或者更大的数据，它在当前窗口关闭后就失效了，并且 sessionStorage 只能被同一个窗口的同源页面所访问共享。localStorage 也是 html5 提供的一种浏览器本地存储的方法，它一般也能够存储 5M 或者更大的数据。它和 sessionStorage 不同的是，除非手动删除它，否则它不会失效，并且 localStorage 也只能被同源页面所访问共享。上面几种方式都是存储少量数据的时候的存储方式，当我们需要在本地存储大量数据的时候，我们可以使用浏览器的 indexDB 这是浏览器提供的一种本地的数据库存储机制。它不是关系型数据库，它内部采用对象仓库的形式存储数据，它更接近 NoSQL 数据库。</code></pre>   <pre class="line-numbers language-none"><code class="language-none">   详细的资料可以参考：   [《请描述一下 cookies，sessionStorage 和 localStorage 的区别？》](https:&#x2F;&#x2F;segmentfault.com&#x2F;a&#x2F;1190000017423117)   [《浏览器数据库 IndexedDB 入门教程》](http:&#x2F;&#x2F;www.ruanyifeng.com&#x2F;blog&#x2F;2018&#x2F;07&#x2F;indexeddb.html)#### 37. iframe 有那些缺点？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>iframe 元素会创建包含另外一个文档的内联框架（即行内框架）。主要缺点有：（1） iframe 会阻塞主页面的 onload 事件。window 的 onload 事件需要在所有 iframe 加载完毕后（包含里面的元素）才     会触发。在 Safari 和 Chrome 里，通过 JavaScript 动态设置 iframe 的 src 可以避免这种阻塞情况。（2） 搜索引擎的检索程序无法解读这种页面，不利于网页的 SEO 。（3） iframe 和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。（4） 浏览器的后退按钮失效。（5） 小型的移动设备无法完全显示框架。</code></pre>   <pre class="line-numbers language-none"><code class="language-none">   详细的资料可以参考：   [《使用 iframe 的优缺点》](https:&#x2F;&#x2F;blog.csdn.net&#x2F;yintianqin&#x2F;article&#x2F;details&#x2F;72625785)   [《iframe 简单探索以及 iframe 跨域处理》](https:&#x2F;&#x2F;segmentfault.com&#x2F;a&#x2F;1190000009891683)#### 38. Label 的作用是什么？是怎么用的？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>label 标签来定义表单控制间的关系，当用户选择该标签时，浏览器会自动将焦点转到和标签相关的表单控件上。&lt;label for=&quot;Name&quot;&gt;Number:&lt;/label&gt;&lt;input type=“text“ name=&quot;Name&quot; id=&quot;Name&quot;/&gt;</code></pre>   <pre class="line-numbers language-none"><code class="language-none">#### 39. HTML5 的 form 的自动完成功能是什么？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>autocomplete 属性规定输入字段是否应该启用自动完成功能。默认为启用，设置为 autocomplete=off 可以关闭该功能。自动完成允许浏览器预测对字段的输入。当用户在字段开始键入时，浏览器基于之前键入过的值，应该显示出在字段中填写的选项。autocomplete 属性适用于 &lt;form&gt;，以及下面的 &lt;input&gt; 类型：text, search, url, telephone, email, password, datepickers, range 以及 color。</code></pre>   <pre class="line-numbers language-none"><code class="language-none">#### 40. 如何实现浏览器内多个标签页之间的通信?    相关资料：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>（1）使用 WebSocket，通信的标签页连接同一个服务器，发送消息到服务器后，服务器推送消息给所有连接的客户端。（2）使用 SharedWorker （只在 chrome 浏览器实现了），两个页面共享同一个线程，通过向线程发送数据和接收数据来实现标    签页之间的双向通行。（3）可以调用 localStorage、cookies 等本地存储方式，localStorge 另一个浏览上下文里被添加、修改或删除时，它都会触    发一个 storage 事件，我们通过监听 storage 事件，控制它的值来进行页面信息通信；（4）如果我们能够获得对应标签页的引用，通过 postMessage 方法也是可以实现多个标签页通信的。</code></pre>   <pre class="line-numbers language-none"><code class="language-none"> 回答：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>实现多个标签页之间的通信，本质上都是通过中介者模式来实现的。因为标签页之间没有办法直接通信，因此我们可以找一个中介者，让标签页和中介者进行通信，然后让这个中介者来进行消息的转发。第一种实现的方式是使用 websocket 协议，因为 websocket 协议可以实现服务器推送，所以服务器就可以用来当做这个中介者。标签页通过向服务器发送数据，然后由服务器向其他标签页推送转发。第二种是使用 ShareWorker 的方式，shareWorker 会在页面存在的生命周期内创建一个唯一的线程，并且开启多个页面也只会使用同一个线程。这个时候共享线程就可以充当中介者的角色。标签页间通过共享一个线程，然后通过这个共享的线程来实现数据的交换。第三种方式是使用 localStorage 的方式，我们可以在一个标签页对 localStorage 的变化事件进行监听，然后当另一个标签页修改数据的时候，我们就可以通过这个监听事件来获取到数据。这个时候 localStorage 对象就是充当的中介者的角色。还有一种方式是使用 postMessage 方法，如果我们能够获得对应标签页的引用，我们就可以使用 postMessage 方法，进行通信。</code></pre>   <pre class="line-numbers language-none"><code class="language-none">   详细的资料可以参考：   [《WebSocket 教程》](http:&#x2F;&#x2F;www.ruanyifeng.com&#x2F;blog&#x2F;2017&#x2F;05&#x2F;websocket.html)   [《WebSocket 协议：5分钟从入门到精通》](https:&#x2F;&#x2F;www.cnblogs.com&#x2F;chyingp&#x2F;p&#x2F;websocket-deep-in.html)   [《WebSocket 学习（一）——基于 socket.io 实现简单多人聊天室》](https:&#x2F;&#x2F;segmentfault.com&#x2F;a&#x2F;1190000011538416)   [《使用 Web Storage API》](https:&#x2F;&#x2F;developer.mozilla.org&#x2F;zh-CN&#x2F;docs&#x2F;Web&#x2F;API&#x2F;Web_Storage_API&#x2F;Using_the_Web_Storage_API)   [《JavaScript 的多线程，Worker 和 SharedWorker》](https:&#x2F;&#x2F;www.zhuwenlong.com&#x2F;blog&#x2F;article&#x2F;590ea64fe55f0f385f9a12e5)   [《实现多个标签页之间通信的几种方法》](https:&#x2F;&#x2F;juejin.im&#x2F;post&#x2F;5acdba01f265da23826e5633#heading-1)#### 41. webSocket 如何兼容低版本浏览器？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Adobe Flash Socket 、ActiveX HTMLFile (IE) 、基于 multipart 编码发送 XHR 、基于长轮询的 XHR</code></pre>   <pre class="line-numbers language-none"><code class="language-none">#### 42. 页面可见性（Page Visibility API） 可以有哪些用途？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>这个新的 API 的意义在于，通过监听网页的可见性，可以预判网页的卸载，还可以用来节省资源，减缓电能的消耗。比如，一旦用户不看网页，下面这些网页行为都是可以暂停的。（1）对服务器的轮询（2）网页动画（3）正在播放的音频或视频</code></pre>   <pre class="line-numbers language-none"><code class="language-none">   详细资料可以参考：   [《Page Visibility API 教程》](http:&#x2F;&#x2F;www.ruanyifeng.com&#x2F;blog&#x2F;2018&#x2F;10&#x2F;page_visibility_api.html)#### 43. 如何在页面上实现一个圆形的可点击区域？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>（1）纯 html 实现，使用 &lt;area&gt; 来给 &lt;img&gt; 图像标记热点区域的方式，&lt;map&gt; 标签用来定义一个客户端图像映射，&lt;area&gt;     标签用来定义图像映射中的区域，area 元素永远嵌套在 map 元素内部，我们可以将 area 区域设置为圆形，从而实现可点击    的圆形区域。（2）纯 css 实现，使用 border-radius ，当 border-radius 的长度等于宽高相等的元素值的一半时，即可实现一个圆形的    点击区域。（3）纯 js 实现，判断一个点在不在圆上的简单算法，通过监听文档的点击事件，获取每次点击时鼠标的位置，判断该位置是否在我    们规定的圆形区域内。</code></pre>   <pre class="line-numbers language-none"><code class="language-none">   详细资料可以参考：   [《如何在页面上实现一个圆形的可点击区域？》](https:&#x2F;&#x2F;maizi93.github.io&#x2F;2017&#x2F;08&#x2F;29&#x2F;%E5%A6%82%E4%BD%95%E5%9C%A8%E9%A1%B5%E9%9D%A2%E4%B8%8A%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%9C%86%E5%BD%A2%E7%9A%84%E5%8F%AF%E7%82%B9%E5%87%BB%E5%8C%BA%E5%9F%9F%EF%BC%9F&#x2F;)   [《HTML &lt;area&gt;&lt;map&gt; 标签及在实际开发中的应用》](https:&#x2F;&#x2F;www.zhangxinxu.com&#x2F;wordpress&#x2F;2017&#x2F;05&#x2F;html-area-map&#x2F;)#### 44. 实现不使用 border 画出 1 px 高的线，在不同浏览器的标准模式与怪异模式下都能保持一致的效果。   &#96;&#96;&#96;html     &lt;div style&#x3D;&quot;height:1px;overflow:hidden;background:red&quot;&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="45-title-与-h1-的区别？"><a href="#45-title-与-h1-的区别？" class="headerlink" title="45. title 与 h1 的区别？"></a>45. title 与 h1 的区别？</h4>   <pre class="line-numbers language-none"><code class="language-none">title 属性没有明确意义只表示是个标题，h1 则表示层次明确的标题，对页面信息的抓取也有很大的影响。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="46-lt-img-gt-的-title-和-alt-有什么区别？"><a href="#46-lt-img-gt-的-title-和-alt-有什么区别？" class="headerlink" title="46. &lt;img&gt; 的 title 和 alt 有什么区别？"></a>46. <code>&lt;img&gt;</code> 的 title 和 alt 有什么区别？</h4>   <pre class="line-numbers language-none"><code class="language-none">title 通常当鼠标滑动到元素上的时候显示alt 是 &lt;img&gt; 的特有属性，是图片内容的等价描述，用于图片无法加载时显示、读屏器阅读图片。可提图片高可访问性，除了纯装饰图片外都必须设置有意义的值，搜索引擎会重点分析。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="47-Canvas-和-SVG-有什么区别？"><a href="#47-Canvas-和-SVG-有什么区别？" class="headerlink" title="47. Canvas 和 SVG 有什么区别？"></a>47. Canvas 和 SVG 有什么区别？</h4>   <pre class="line-numbers language-none"><code class="language-none">Canvas 是一种通过 JavaScript 来绘制 2D 图形的方法。Canvas 是逐像素来进行渲染的，因此当我们对 Canvas 进行缩放时，会出现锯齿或者失真的情况。SVG 是一种使用 XML 描述 2D 图形的语言。SVG 基于 XML，这意味着 SVG DOM 中的每个元素都是可用的。我们可以为某个元素附加 JavaScript 事件监听函数。并且 SVG 保存的是图形的绘制方法，因此当 SVG 图形缩放时并不会失真。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   详细资料可以参考：<br>   <a href="https://www.zhihu.com/question/19690014">《SVG 与 HTML5 的 canvas 各有什么优点，哪个更有前途？》</a></p><h4 id="48-网页验证码是干嘛的，是为了解决什么安全问题？"><a href="#48-网页验证码是干嘛的，是为了解决什么安全问题？" class="headerlink" title="48. 网页验证码是干嘛的，是为了解决什么安全问题？"></a>48. 网页验证码是干嘛的，是为了解决什么安全问题？</h4>   <pre class="line-numbers language-none"><code class="language-none">    （1）区分用户是计算机还是人的公共全自动程序。可以防止恶意破解密码、刷票、论坛灌水    （2）有效防止黑客对某一个特定注册用户用特定程序暴力破解方式进行不断的登陆尝试   &#96;&#96;&#96;  #### 49. 渐进增强和优雅降级的定义<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>渐进增强：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的        用户体验。优雅降级：一开始就根据高版本浏览器构建完整的功能，然后再针对低版本浏览器进行兼容。</code></pre>   <pre class="line-numbers language-none"><code class="language-none">   #### 50. attribute 和 property 的区别是什么？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>attribute 是 dom 元素在文档中作为 html 标签拥有的属性；property 就是 dom 元素在 js 中作为对象拥有的属性。对于 html 的标准属性来说，attribute 和 property 是同步的，是会自动更新的，但是对于自定义的属性来说，他们是不同步的。</code></pre>   <pre class="line-numbers language-none"><code class="language-none">#### 51. 对 web 标准、可用性、可访问性的理解<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>可用性（Usability）：产品是否容易上手，用户能否完成任务，效率如何，以及这过程中用户的主观感受可好，是从用户的角度来看产品的质量。可用性好意味着产品质量高，是企业的核心竞争力可访问性（Accessibility）：Web 内容对于残障用户的可阅读和可理解性可维护性（Maintainability）：一般包含两个层次，一是当系统出现问题时，快速定位并解决问题的成本，成本低则可维护性好。二是代码是否容易被人理解，是否容易修改和增强功能。</code></pre>   <pre class="line-numbers language-none"><code class="language-none">#### 52. IE 各版本和 Chrome 可以并行下载多少个资源？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>（1）  IE6 2 个并发（2）  iE7 升级之后的 6 个并发，之后版本也是 6 个（3）  Firefox，chrome 也是6个</code></pre>   <pre class="line-numbers language-none"><code class="language-none">#### 53. Flash、Ajax 各自的优缺点，在使用中如何取舍？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>Flash：（1） Flash 适合处理多媒体、矢量图形、访问机器（2） 对 CSS、处理文本上不足，不容易被搜索Ajax：（1） Ajax 对 CSS、文本支持很好，支持搜索（2） 多媒体、矢量图形、机器访问不足共同点：（1） 与服务器的无刷新传递消息（2） 可以检测用户离线和在线状态（3） 操作 DOM</code></pre>   <pre class="line-numbers language-none"><code class="language-none">#### 54. 怎么重构页面？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>（1） 编写 CSS（2） 让页面结构更合理化，提升用户体验（3） 实现良好的页面效果和提升性能</code></pre>   <pre class="line-numbers language-none"><code class="language-none">#### 55. 浏览器架构<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>* 用户界面  * 主进程  * 内核      * 渲染引擎      * JS 引擎          * 执行栈      * 事件触发线程          * 消息队列              * 微任务              * 宏任务      * 网络异步线程      * 定时器线程</code></pre>   <pre class="line-numbers language-none"><code class="language-none">#### 56. 常用的 meta 标签<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>&lt;meta&gt; 元素可提供有关页面的元信息（meta-information），比如针对搜索引擎和更新频度的描述和关键词。&lt;meta&gt; 标签位于文档的头部，不包含任何内容。&lt;meta&gt; 标签的属性定义了与文档相关联的名称/值对。&lt;!DOCTYPE html&gt;  H5标准声明，使用 HTML5 doctype，不区分大小写&lt;head lang=&quot;en&quot;&gt; 标准的 lang 属性写法&lt;meta charset=&quot;utf-8&quot;&gt;    声明文档使用的字符编码&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;/&gt;   优先使用 IE 最新版本和 Chrome&lt;meta name=&quot;description&quot; content=&quot;不超过150个字符&quot;/&gt;       页面描述&lt;meta name=&quot;keywords&quot; content=&quot;&quot;/&gt;      页面关键词者&lt;meta name=&quot;author&quot; content=&quot;name, email@gmail.com&quot;/&gt;    网页作&lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot;/&gt;      搜索引擎抓取&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1, maximum-scale=3, minimum-scale=1, user-scalable=no&quot;&gt; 为移动设备添加 viewport&lt;meta name=&quot;apple-mobile-web-app-title&quot; content=&quot;标题&quot;&gt; iOS 设备 begin&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot;/&gt;  添加到主屏后的标题（iOS 6 新增）是否启用 WebApp 全屏模式，删除苹果默认的工具栏和菜单栏&lt;meta name=&quot;apple-itunes-app&quot; content=&quot;app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL&quot;&gt;添加智能 App 广告条 Smart App Banner（iOS 6+ Safari）&lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black&quot;/&gt;&lt;meta name=&quot;format-detection&quot; content=&quot;telphone=no, email=no&quot;/&gt;  设置苹果工具栏颜色&lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;&gt;  启用360浏览器的极速模式(webkit)&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;     避免IE使用兼容模式&lt;meta http-equiv=&quot;Cache-Control&quot; content=&quot;no-siteapp&quot; /&gt;    不让百度转码&lt;meta name=&quot;HandheldFriendly&quot; content=&quot;true&quot;&gt;     针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓&lt;meta name=&quot;MobileOptimized&quot; content=&quot;320&quot;&gt;   微软的老式浏览器&lt;meta name=&quot;screen-orientation&quot; content=&quot;portrait&quot;&gt;   uc强制竖屏&lt;meta name=&quot;x5-orientation&quot; content=&quot;portrait&quot;&gt;    QQ强制竖屏&lt;meta name=&quot;full-screen&quot; content=&quot;yes&quot;&gt;              UC强制全屏&lt;meta name=&quot;x5-fullscreen&quot; content=&quot;true&quot;&gt;       QQ强制全屏&lt;meta name=&quot;browsermode&quot; content=&quot;application&quot;&gt;   UC应用模式&lt;meta name=&quot;x5-page-mode&quot; content=&quot;app&quot;&gt;    QQ应用模式&lt;meta name=&quot;msapplication-tap-highlight&quot; content=&quot;no&quot;&gt;    windows phone 点击无高光设置页面不缓存&lt;meta http-equiv=&quot;pragma&quot; content=&quot;no-cache&quot;&gt;&lt;meta http-equiv=&quot;cache-control&quot; content=&quot;no-cache&quot;&gt;&lt;meta http-equiv=&quot;expires&quot; content=&quot;0&quot;&gt;</code></pre>   <pre class="line-numbers language-none"><code class="language-none">   详细资料可以参考：   [《Meta 标签用法大全》](http:&#x2F;&#x2F;www.cnblogs.com&#x2F;qiumohanyu&#x2F;p&#x2F;5431859.html)#### 57. css reset 和 normalize.css 有什么区别？   相关知识点：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>为什么会有 CSS Reset 的存在呢？那是因为早期的浏览器支持和理解的 CSS 规范不同，导致渲染页面时效果不一致，会出现很多兼容性问题。reset 的目的，是将所有的浏览器的自带样式重置掉，这样更易于保持各浏览器渲染的一致性。normalize 的理念则是尽量保留浏览器的默认样式，不进行太多的重置，而尽力让这些样式保持一致并尽可能与现代标准相符合。1.Normalize.css 保护了有价值的默认值Reset 通过为几乎所有的元素施加默认样式，强行使得元素有相同的视觉效果。 相比之下，Normalize.css 保持了许多默认的浏览器样式。 这就意味着你不用再为所有公共的排版元素重新设置样式。 当一个元素在不同的浏览器中有不同的默认值时，Normalize.css 会力求让这些样式保持一致并尽可能与现代标准相符合。2.Normalize.css 修复了浏览器的 bug它修复了常见的桌面端和移动端浏览器的 bug。这往往超出了 Reset 所能做到的范畴。关于这一点，Normalize.css 修复的问题包含了 HTML5 元素的显示设置、预格式化文字的 font-size 问题、在 IE9 中 SVG 的溢出、许多出现在各浏览器和操作系统中的与表单相关的 bug。3.Normalize.css 没有复杂的继承链使用 Reset 最让人困扰的地方莫过于在浏览器调试工具中大段大段的继承链。在 Normalize.css 中就不会有这样的问题，因为在我们的准则中对多选择器的使用时非常谨慎的，我们仅会有目的地对目标元素设置样式。4.Normalize.css 是模块化的这个项目已经被拆分为多个相关却又独立的部分，这使得你能够很容易也很清楚地知道哪些元素被设置了特定的值。因此这能让你自己选择性地移除掉某些永远不会用到部分（比如表单的一般化）。5.Normalize.css 拥有详细的文档Normalize.css 的代码基于详细而全面的跨浏览器研究与测试。这个文件中拥有详细的代码说明并在 Github Wiki 中有进一步的说明。这意味着你可以找到每一行代码具体完成了什么工作、为什么要写这句代码、浏览器之间的差异，并且你可以更容易地进行自己的测试。</code></pre>   <pre class="line-numbers language-none"><code class="language-none">回答：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>css reset 是最早的一种解决浏览器间样式不兼容问题的方案，它的基本思想是将浏览器的所有样式都重置掉，从而达到所有浏览器样式保持一致的效果。但是使用这种方法，可能会带来一些性能上的问题，并且对于一些元素的不必要的样式的重置，其实反而会造成画蛇添足的效果。后面出现一种更好的解决浏览器间样式不兼容的方法，就是 normalize.css ，它的思想是尽量的保留浏览器自带的样式，通过在原有的样式的基础上进行调整，来保持各个浏览器间的样式表现一致。相对与 css reset，normalize.css 的方法保留了有价值的默认值，并且修复了一些浏览器的 bug，而且使用 normalize.css 不会造成元素复杂的继承链。</code></pre>   <pre class="line-numbers language-none"><code class="language-none">   详细资料可以参考：   [《关于CSS Reset 那些事（一）之 历史演变与 Normalize.css》](https:&#x2F;&#x2F;segmentfault.com&#x2F;a&#x2F;1190000003021766#articleHeader0)   [《Normalize.css 和 Reset CSS 有什么本质区别没？》](https:&#x2F;&#x2F;segmentfault.com&#x2F;q&#x2F;1010000000117189)#### 58. 用于预格式化文本的标签是？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>预格式化就是保留文字在源码中的格式 最后显示出来样式与源码中的样式一致 所见即所得。&lt;pre&gt; 定义预格式文本，保持文本原有的格式</code></pre>   <pre class="line-numbers language-none"><code class="language-none">#### 59. DHTML 是什么？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>DHTML 将 HTML、JavaScript、DOM 以及 CSS 组合在一起，用于创造动态性更强的网页。通过 JavaScript 和 HTML DOM，能够动态地改变 HTML 元素的样式。DHTML 实现了网页从 Web 服务器下载后无需再经过服务的处理，而在浏览器中直接动态地更新网页的内容、排版样式和动画的功能。例如，当鼠标指针移到文章段落中时，段落能够变成蓝色，或者当鼠标指针移到一个超级链接上时，会自动生成一个下拉式子链接目录等。包括：（1）动态内容（Dynamic Content）：动态地更新网页内容，可“动态”地插入、修改或删除网页的元件，如文字、图像、标记等。（2）动态排版样式（Dynamic Style Sheets）：W3C 的 CSS 样式表提供了设定 HTML 标记的字体大小、字形、样式、粗细、    文字颜色、行高度、加底线或加中间横线、缩排、与边缘距离、靠左右或置中、背景图片或颜色等排版功能，而“动态排版样    式”即可以“动态”地改变排版样式。</code></pre>   <pre class="line-numbers language-none"><code class="language-none">#### 60. head 标签中必不少的是？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>&lt;head&gt; 标签用于定义文档的头部，它是所有头部元素的容器。&lt;head&gt; 中的元素可以引用脚本、指示浏览器在哪里找到样式表、提供元信息等等。文档的头部描述了文档的各种属性和信息，包括文档的标题、在 Web 中的位置以及和其他文档的关系等。绝大多数文档头部包含的数据都不会真正作为内容显示给读者。下面这些标签可用在 head 部分：&lt;base&gt;, &lt;link&gt;, &lt;meta&gt;, &lt;script&gt;, &lt;style&gt;, 以及 &lt;title&gt;。&lt;title&gt; 定义文档的标题，它是 head 部分中唯一必需的元素。</code></pre>   <pre class="line-numbers language-none"><code class="language-none">#### 61. HTML5 新增的表单元素有？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>datalist 规定输入域的选项列表，通过 option 创建！ keygen 提供一种验证用户的可靠方法，密钥对生成器，私钥存于客户端，公钥发到服务器，用于之后验证客户端证书！output 元素用于不同类型的输出！</code></pre>   <pre class="line-numbers language-none"><code class="language-none">#### 62. 在 HTML5 中，哪个方法用于获得用户的当前位置？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>getCurrentPosition()</code></pre>   <pre class="line-numbers language-none"><code class="language-none">#### 63. 文档的不同注释方式？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>HTML 的注释方法 &lt;!--注释内容--&gt; CSS 的��释方法 /*注释内容*/ JavaScript 的注释方法 /* 多行注释方式 */ //单行注释方式</code></pre>   <pre class="line-numbers language-none"><code class="language-none">#### 64. disabled 和 readonly 的区别？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>disabled 指当 input 元素加载时禁用此元素。input 内容不会随着表单提交。readonly 规定输入字段为只读。input 内容会随着表单提交。无论设置 readonly 还是 disabled，通过 js 脚本都能更改 input 的 value</code></pre>   <pre class="line-numbers language-none"><code class="language-none">#### 65. 主流浏览器内核私有属性 css 前缀？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>mozilla 内核 （firefox,flock 等）    -mozwebkit  内核 （safari,chrome 等）   -webkitopera   内核 （opera 浏览器）        -otrident 内核 （ie 浏览器）           -ms</code></pre>   <pre class="line-numbers language-none"><code class="language-none">#### 66. 前端性能优化？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>前端性能优化主要是为了提高页面的加载速度，优化用户的访问体验。我认为可以从这些方面来进行优化。第一个方面是页面的内容方面（1）通过文件合并、css 雪碧图、使用 base64 等方式来减少 HTTP 请求数，避免过多的请求造成等待的情况。（2）通过 DNS 缓存等机制来减少 DNS 的查询次数。（3）通过设置缓存策略，对常用不变的资源进行缓存。（4）使用延迟加载的方式，来减少页面首屏加载时需要请求的资源。延迟加载的资源当用户需要访问时，再去请求加载。（5）通过用户行为，对某些资源使用预加载的方式，来提高用户需要访问资源时的响应速度。第二个方面是服务器方面（1）使用 CDN 服务，来提高用户对于资源请求时的响应速度。（2）服务器端启用 Gzip、Deflate 等方式对于传输的资源进行压缩，减小文件的体积。（3）尽可能减小 cookie 的大小，并且通过将静态资源分配到其他域名下，来避免对静态资源请求时携带不必要的 cookie第三个方面是 CSS 和 JavaScript 方面（1）把样式表放在页面的 head 标签中，减少页面的首次渲染的时间。（2）避免使用 @import 标签。（3）尽量把 js 脚本放在页面底部或者使用 defer 或 async 属性，避免脚本的加载和执行阻塞页面的渲染。（4）通过对 JavaScript 和 CSS 的文件进行压缩，来减小文件的体积。</code></pre>   <pre class="line-numbers language-none"><code class="language-none">   详细的资料可以参考：   [《前端性能优化之雅虎35条军规》](https:&#x2F;&#x2F;juejin.im&#x2F;post&#x2F;5b73ef38f265da281e048e51#heading-10)   [《你真的了解 gzip 吗？》](https:&#x2F;&#x2F;juejin.im&#x2F;entry&#x2F;58709b9a128fe1006b29cd5d)   [《前端性能优化之 gzip》](https:&#x2F;&#x2F;segmentfault.com&#x2F;a&#x2F;1190000012571492)#### 67. Chrome 中的 Waterfall ？   详细资料可以参考：   [《前端性能之 Chrome 的 Waterfall》](https:&#x2F;&#x2F;blog.csdn.net&#x2F;carian_violet&#x2F;article&#x2F;details&#x2F;84954360)   [《教你读懂网络请求的瀑布图》](https:&#x2F;&#x2F;blog.csdn.net&#x2F;csdn_girl&#x2F;article&#x2F;details&#x2F;54911632)    [《前端妹子跟我抱怨她们的页面加载很慢的时候，如何在她面前优雅地装逼？》](https:&#x2F;&#x2F;www.zhihu.com&#x2F;question&#x2F;27085552&#x2F;answer&#x2F;35194131)#### 68. 扫描二维码登录网页是什么原理，前后两个事件是如何联系的？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>核心过程应该是：浏览器获得一个临时 id，通过长连接等待客户端扫描带有此 id 的二维码后，从长连接中获得客户端上报给 server的帐号信息进行展示。并在客户端点击确认后，获得服务器授信的令牌，进行随后的信息交互过程。在超时、网络断开、其他设备上登录后，此前获得的令牌或丢失、或失效，对授权过程形成有效的安全防护。我的理解二维码登录网页的基本原理是，用户进入登录网页后，服务器生成一个 uid 来标识一个用户。对应的二维码对应了一个对应 uid 的链接，任何能够识别二维码的应用都可以获得这个链接，但是它们没有办法和对应登录的服务器响应。比如微信的二维码登录，只有用微信识这个二维码才有效。当微信客户端打开这个链接时，对应的登录服务器就获得了用户的相关信息。这个时候登录网页根据先前的长连接获取到服务器传过来的用户信息进行显示。然后提前预加载一些登录后可能用到的信息。当客户端点击确认授权登陆后，服务器生成一个权限令牌给网页，网页之后使用这个令牌进行信息的交互过程。由于整个授权的过程都是在手机端进行的，因此能够很好的防止 PC 上泛滥的病毒。并且在超时、网络断开、其他设备上登录后，此前获得的令牌或丢失、或失效，对授权过程能够形成有效的安全防护。</code></pre>   <pre class="line-numbers language-none"><code class="language-none">   详细资料可以参考：   [《微信扫描二维码登录网页》](https:&#x2F;&#x2F;www.zhihu.com&#x2F;question&#x2F;20368066)#### 69. Html 规范中为什么要求引用资源不加协议头&#96;http&#96;或者&#96;https&#96;？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>如果用户当前访问的页面是通过 HTTPS 协议来浏览的，那么网页中的资源也只能通过 HTTPS 协议来引用，否则浏览器会出现警告信息，不同浏览器警告信息展现形式不同。为了解决这个问题，我们可以省略 URL 的协议声明，省略后浏览器照样可以正常引用相应的资源，这项解决方案称为 protocol-relative URL，暂且可译作协议相对 URL。如果使用协议相对 URL，无论是使用 HTTPS，还是 HTTP 访问页面，浏览器都会以相同的协议请求页面中的资源，避免弹出类似的警告信息，同时还可以节省5字节的数据量。</code></pre><p>   ```<br>   详细资料可以参考：<br>   <a href="https://www.ludou.org/the-protocol-relative-url.html">《协议相对 URL》</a><br>   <a href="https://www.tuicool.com/articles/nEjU7b">《Why you need protocol-relative URLs <em>now</em>》</a></p>]]></content>
      
      
      <categories>
          
          <category> 面试知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础语法学习笔记01</title>
      <link href="/2022/01/23/Untitled-1/"/>
      <url>/2022/01/23/Untitled-1/</url>
      
        <content type="html"><![CDATA[<h3 id="声明和调用函数"><a href="#声明和调用函数" class="headerlink" title="声明和调用函数"></a>声明和调用函数</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 通过函数关键字自定义声明函数（命名函数）</span><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span><span class="token parameter">形参<span class="token number">1</span><span class="token punctuation">,</span> 形参<span class="token number">2</span><span class="token punctuation">,</span> 形参<span class="token number">3</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 函数体代码</span><span class="token punctuation">&#125;</span><span class="token comment">// 通过函数表达式方法来声明函数（匿名函数，变量名不是函数名）</span><span class="token keyword">var</span> <span class="token function-variable function">变量名</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 调用函数</span><span class="token function">函数名</span><span class="token punctuation">(</span>实参<span class="token number">1</span><span class="token punctuation">,</span> 实参<span class="token number">2</span><span class="token punctuation">,</span> 实参<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><a id="more"></a><h3 id="形参与实参的匹配问题"><a href="#形参与实参的匹配问题" class="headerlink" title="形参与实参的匹配问题"></a>形参与实参的匹配问题</h3><ol><li><p>形参与实参的个数相等，正常输出结果</p></li><li><p>形参个数少于实参，则实参按顺序传递给形参</p></li><li><p>形参个数多余实参，则多余的实参被定义为undefined（形参可以被看成是一个不需要声明的变量，默认值为undefined）</p><p>&lt;!–hexoPostRenderEscape:<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><br> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1 <span class="token operator">+</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">&#125;</span></p></li></ol><p><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span><br><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span><br><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN (数字型加上一个undefined所得为NaN)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>:hexoPostRenderEscape–&gt;</p><h3 id="return的注意事项"><a href="#return的注意事项" class="headerlink" title="return的注意事项"></a>return的注意事项</h3><ol><li>return只能返回一个值。如果return后接了多个值，则返回的结果为最后一个值。</li><li>return具有终止函数运行的作用。函数中return之后的代码都不会被执行。</li><li>函数都有返回值。有return时返回return后的值；不含有return则返回undefined。</li></ol><h3 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h3><p>JS中的arguments是当前函数的一个内置对象，其存储了传递的所有实参。</p><p>arguments的展示形式是一个伪数组，其具有length属性、能按索引方式储存数据，但不具有push、pop等数组方法。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//arguments的使用</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span class="token punctuation">&#125;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>作用域的使用能提高程序逻辑的局部性、增强程序可靠性并减少名字冲突。</p><p>JS中包含两种作用域类型（es6之前），作用域决定了变量的可访问性。</p><ul><li>局部作用域与局部变量</li></ul><p>​    函数内部声明的变量，会成为函数的局部变量，其作用域是局部的，只能从函数内部访问，从函数外部是不可访问的。</p><p>​    局部变量在代码块被执行时会被初始化，代码块运行结束后局部变量也会被销毁，更节省内存空间。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 此处代码不可使用 age 变量</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>    <span class="token comment">// 此处代码可以使用 age 变量</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>全局作用域与全局变量</li></ul><p>​    函数之外声明的变量，会成为全局变量，其作用域为全局的，网页中的所有脚本和函数都可以访问。</p><p>​    全局变量在声明后直到浏览器关闭时才会被销毁，期间一直占据着内存资源。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token comment">// 此处代码可以使用 age 变量</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 此处代码也可使用 age 变量</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h2><p>JS代码是由浏览器中的JS解析器来执行的，分为两步：预解析和代码执行。</p><p>预解析又分为</p><ul><li>变量预解析</li></ul><p>​    把所有的变量声明提升到当前作用域的最前面，不提升赋值操作</p><ul><li>函数预解析</li></ul><p>​    把所有函数声明提升到当前作用域的最前面，不调用函数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 例1 </span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//程序相当于执行了以下代码</span><span class="token keyword">var</span> num<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> num<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 结果为undefined</span>    num <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 例2</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> b <span class="token operator">=</span> c <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token comment">// 相当于var a = 9; b = 9; c = 9; b 和 c是直接赋值，没有声明变量，所以可以看作是全局变量。</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 等同于以下代码</span><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a<span class="token punctuation">;</span>    a <span class="token operator">=</span> b <span class="token operator">=</span> c <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9</span><span class="token punctuation">&#125;</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错，a为局部变量，未被声明</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>JS中的对象是一组无序的相关属性和方法的集合</p><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><ul><li><p>利用字面量创建对象 {}</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 创建了一个空对象</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'Kobe'</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">,</span>  sex<span class="token operator">:</span> <span class="token string">'male'</span><span class="token punctuation">,</span>  <span class="token function-variable function">practice</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'practicing'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 对象中的属性和方法采用键值对的形式 属性名（键）: 属性值（值）</span><span class="token comment">// 调用属性的两种方法：1、对象名.属性名；2、对象名['属性名']</span><span class="token comment">// 调用方法的方法： 对象名.方法名()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>利用 new Object 创建对象</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建了一个空对象</span>obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Kobe'</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">'male'</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function-variable function">practice</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'practicing'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>利用构造函数创建对象</p><p>&lt;!–hexoPostRenderEscape:<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 构造函数的语法</span><br><span class="token keyword">function</span> <span class="token function">构造函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><br>  <span class="token keyword">this</span><span class="token punctuation">.</span>属性 <span class="token operator">=</span> 值；<br>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">方法</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><br><span class="token punctuation">&#125;</span><br><span class="token keyword">new</span> <span class="token function">构造函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></p></li></ul><p><span class="token comment">// 举例</span><br><span class="token keyword">function</span> <span class="token function">Player</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 构造函数名首字母要大写</span><br>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><br>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><br>    <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span><br>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">practice</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><br>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">‘practicing’</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>    <span class="token punctuation">&#125;</span><br><span class="token punctuation">&#125;</span><br><span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token string">‘Kobe’</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token string">‘male’</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>:hexoPostRenderEscape–&gt;</p><p>  new关键字的执行过程</p><ol><li>new 构造函数在内存中创建了一个空的对象</li><li>this 会指向创建的空对象</li><li>执行构造函数中的代码，给空对象添加属性和方法</li><li>返回这个对象</li></ol><h3 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h3><p>for…in 语句用于对数组或者对象的属性进行循环操作</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'Kobe'</span><span class="token punctuation">,</span>    age<span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">,</span>    sex<span class="token operator">:</span> <span class="token string">'male'</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 得到各属性名</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 得到对象的各属性值（需要注意写法）</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><p>JS自带的一些对象，提供了一些基本且常用的功能给开发者使用。</p><h3 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h3><p>Math 对象可以用来执行数学任务。 Math 不是构造函数。 Math 的所有属性/方法都可以通过使用 Math 作为对象来调用，而无需创建它：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">;</span>            <span class="token comment">// 返回 PI</span><span class="token keyword">var</span> y <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 返回 16 的平方更</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 向下取整</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 向上取整</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 四舍五入</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回一个随机小数</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> min<span class="token punctuation">;</span> <span class="token comment">// 得到一个大于等于 min 且小于等于 max 的数 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h3><p>Date对象用于处理日期和时间，通过 new Date() 来创建。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建了一个Date对象，无参数时是获取当前的系统时间</span><span class="token keyword">var</span> d1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">'2021/11/23'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 带参数的实例化</span><span class="token comment">// 获取时间戳(总毫秒数)</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 方法1</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 方法2</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 方法3</span><span class="token comment">// 利用时间戳来创建倒计时效果</span><span class="token keyword">function</span> <span class="token function">countDown</span><span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> nowTime <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 当前时间的总毫秒数</span>    <span class="token keyword">var</span> inputTime <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输入时间的总毫秒数</span>    <span class="token keyword">var</span> times <span class="token operator">=</span> <span class="token punctuation">(</span>inputTime <span class="token operator">-</span> nowTime<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">;</span> <span class="token comment">// 剩余时间的总秒数</span>    <span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>times <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 天</span>    d <span class="token operator">=</span> d <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> d <span class="token operator">:</span> d<span class="token punctuation">;</span>    <span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>times <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">%</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 时</span>    h <span class="token operator">=</span> h <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> h <span class="token operator">:</span> h<span class="token punctuation">;</span>    <span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>times <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">%</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 分</span>    m <span class="token operator">=</span> m <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> m <span class="token operator">:</span> m<span class="token punctuation">;</span>    <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>times <span class="token operator">%</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//秒</span>    s <span class="token operator">=</span> s <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> s <span class="token operator">:</span> s<span class="token punctuation">;</span>    <span class="token keyword">return</span> d <span class="token operator">+</span> <span class="token string">'天'</span> <span class="token operator">+</span> h <span class="token operator">+</span> <span class="token string">'时'</span> <span class="token operator">+</span> m <span class="token operator">+</span> <span class="token string">'分'</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">'秒'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组对象"><a href="#数组对象" class="headerlink" title="数组对象"></a>数组对象</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 使用new Array()来创建数组</span><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建了一个空数组</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建了一个长度为2的空数组</span><span class="token keyword">var</span> arr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等价于var arr3 = [2, 3]; 创建方式与使用字面量创建相同</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="检测是否为数组"><a href="#检测是否为数组" class="headerlink" title="检测是否为数组"></a>检测是否为数组</h4><ul><li><p>instanceof 运算符</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Array.isArray() 方法</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="增删数组元素"><a href="#增删数组元素" class="headerlink" title="增删数组元素"></a>增删数组元素</h4><ul><li>push(参数…)，在数组末尾增加一个或多个元素，返回值为新数组的长度</li><li>pop()，删除数组最后的一个元素，并将该元素作为返回值</li><li>unshift(参数…)，在数组开头增加一个或多个元素，返回值为新数组的长度</li><li>shift()，删除数组的第一个元素，并将该元素作为返回值</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// [1, 2, 3, 4]</span>arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [0, 1, 2, 3, 4]</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// [0, 1, 2, 3]</span>arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [1, 2, 3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h4><ul><li><p>reverse()，颠倒数组中的元素顺序</p></li><li><p>sort()，对数组元素进行排序（冒泡排序）</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 13, 4, 7, 77]这样写时，元素按照转换为的字符串的各个字符的Unicode位点进行排序</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// function用来指定按某种顺序进行排列</span>  <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span> <span class="token comment">// 升序排列，b - a 则改为降序排列</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// [1, 4, 7, 13, 77]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="查找数组索引"><a href="#查找数组索引" class="headerlink" title="查找数组索引"></a>查找数组索引</h4><ul><li>indexOf()，查找给定元素在数组中的第一个索引并返回索引值，否则返回-1</li><li>lastIndexOf()，查找给定元素在数组中的最后一个索引并返回索引值，否则返回-1</li></ul><h4 id="数组转换成字符串"><a href="#数组转换成字符串" class="headerlink" title="数组转换成字符串"></a>数组转换成字符串</h4><ul><li><p>toString()</p></li><li><p>join(‘分隔符’)</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1,2,3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1,2,3 默认分隔符是 ,</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1-2-3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串对象"><a href="#字符串对象" class="headerlink" title="字符串对象"></a>字符串对象</h3><h4 id="根据字符返回位置"><a href="#根据字符返回位置" class="headerlink" title="根据字符返回位置"></a>根据字符返回位置</h4><ul><li>indexOf(‘要查找的字符’, 开始的位置)，从指定位置开始（未指定则从头开始）返回指定字符在字符串中的位置，不存在该字符则返回 -1</li><li>lastIndexOf()，与上述类似，只是从后往前查找</li></ul><h4 id="根据位置返回字符"><a href="#根据位置返回字符" class="headerlink" title="根据位置返回字符"></a>根据位置返回字符</h4><ul><li>charAt(index)，返回指定位置的字符</li><li>charCodeAt(index)，返回指定位置字符的ASCII码</li><li>str[index]，获取指定位置处的字符</li></ul><h4 id="截取拼接字符串"><a href="#截取拼接字符串" class="headerlink" title="截取拼接字符串"></a>截取拼接字符串</h4><ul><li>concat(str1, str2, str3…)，用于连接字符串，等同于 + </li><li>substr(start, length)，从start位置开始截取长度为length的字符串</li><li>slice(start, end)，从start开始截取到end位置的字符串，不包括end</li><li>substring(start, end)，与slice基本相同，但不接受负值</li></ul><h4 id="替换字符"><a href="#替换字符" class="headerlink" title="替换字符"></a>替换字符</h4><p>replace(‘被替换的字符’, ‘替换成的字符’)   只会替换遇到的第一个字符</p><h4 id="字符串转换为数组"><a href="#字符串转换为数组" class="headerlink" title="字符串转换为数组"></a>字符串转换为数组</h4><p>split(‘分隔符’)</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'1, 2, 3'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1,2,3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="简单数据类型和复杂数据类型"><a href="#简单数据类型和复杂数据类型" class="headerlink" title="简单数据类型和复杂数据类型"></a>简单数据类型和复杂数据类型</h2><h3 id="简单数据类型"><a href="#简单数据类型" class="headerlink" title="简单数据类型"></a>简单数据类型</h3><p>在存储变量时存储的是值本事，所以又可以叫做值类型或基本数据类型。</p><p>string, number, boolean, undefined, null(返回一个空对象)。</p><p>当简单数据类型变量作为参数传递给函数的形参时，实际上是把变量在栈空间里的值复制了一份给形参，于是在函数内对形参做任何修改都不会影响到外部的变量。</p><h3 id="复杂数据类型"><a href="#复杂数据类型" class="headerlink" title="复杂数据类型"></a>复杂数据类型</h3><p>在存储变量时存储的是地址（引用），又可以叫做引用类型。</p><p>包括通过 new 关键字创建的对象（自定义对象、内置对象），如Object、Array、Date等。</p><p>复杂数据类型变量传参时，实际上是把变量在栈空间里保存的堆地址复制给了形参，形参和实参保存的是同一个堆地址，所以操作的是同一个对象。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端知识图谱</title>
      <link href="/2022/01/23/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/"/>
      <url>/2022/01/23/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/</url>
      
        <content type="html"><![CDATA[<h2 id="网络知识"><a href="#网络知识" class="headerlink" title="网络知识"></a>网络知识</h2><ol><li>网络工作原理<br>计算机网络原理：<a href="https://www.bilibili.com/video/BV1xJ41137Q3">https://www.bilibili.com/video/BV1xJ41137Q3</a></li><li>什么是HTTP<br>HTTP协议详解：<a href="https://www.bilibili.com/video/BV1js411g7Fw">https://www.bilibili.com/video/BV1js411g7Fw</a></li><li>浏览器及工作方式<br>浏览器是如何运作的？：<a href="https://www.bilibili.com/video/BV1x54y1B7RE">https://www.bilibili.com/video/BV1x54y1B7RE</a><a id="more"></a></li><li>DNS 及其工作原理<br>DNS基本工作原理：<a href="https://www.bilibili.com/video/BV1GW411j7Ts">https://www.bilibili.com/video/BV1GW411j7Ts</a><br>直观DNS科普：<a href="https://www.bilibili.com/video/BV1F54y1R7BC">https://www.bilibili.com/video/BV1F54y1R7BC</a></li><li>域名相关知识<br>域名解析完整讲解：<a href="https://www.bilibili.com/video/BV1zA411x7Pj">https://www.bilibili.com/video/BV1zA411x7Pj</a></li><li>云服务相关知识<br>揭秘阿里云服务器：<a href="https://www.bilibili.com/video/BV1Rt411u7k4">https://www.bilibili.com/video/BV1Rt411u7k4</a><h2 id="超文本标记语言"><a href="#超文本标记语言" class="headerlink" title="超文本标记语言"></a>超文本标记语言</h2>（HTML）</li><li>HTML基础知识学习<br>HTML全套基础教程：<a href="https://www.bilibili.com/video/BV11t411K74Q">https://www.bilibili.com/video/BV11t411K74Q</a></li><li>HTML 编写规则 和语义化写法<br>HTML 速成：<a href="https://www.bilibili.com/video/BV1vs411M7aT">https://www.bilibili.com/video/BV1vs411M7aT</a></li><li>表单和验证<br>html5表单验证：<a href="https://www.bilibili.com/video/BV16K4y1Z7Gb">https://www.bilibili.com/video/BV16K4y1Z7Gb</a></li><li>公约和最佳实践方法<br>前端代码规范秘籍：<a href="https://www.bilibili.com/video/BV19P4y147Jz">https://www.bilibili.com/video/BV19P4y147Jz</a></li><li>SEO 基础知识<br>SEO优化学习教程：<a href="https://www.bilibili.com/video/BV1fE411J7ya">https://www.bilibili.com/video/BV1fE411J7ya</a><br>层叠样式表<br>（CSS)</li><li>CSS 基础知识学习<br>CSS3基础教程：<a href="https://www.bilibili.com/video/BV1Bx411u7cS">https://www.bilibili.com/video/BV1Bx411u7cS</a><br>CSS3全套教程：<a href="https://www.bilibili.com/video/BV1et411q74F">https://www.bilibili.com/video/BV1et411q74F</a></li><li>页面切图和布局实现<ul><li>浮动布局</li><li>浮动布局：<a href="https://www.bilibili.com/video/BV1Zs411j7Z3">https://www.bilibili.com/video/BV1Zs411j7Z3</a></li><li>定位布局</li><li>CSS定位布局：<a href="https://www.bilibili.com/video/BV1ni4y1g7tc">https://www.bilibili.com/video/BV1ni4y1g7tc</a></li><li>Display</li><li>display&amp;visibility：<a href="https://www.bilibili.com/video/BV1HJ411M7CM">https://www.bilibili.com/video/BV1HJ411M7CM</a></li><li>盒子模型</li><li>CSS盒子模型与定位：<a href="https://www.bilibili.com/video/BV1P7411G7BW">https://www.bilibili.com/video/BV1P7411G7BW</a></li><li>Grid 布局</li><li>如何用grid：<a href="https://www.bilibili.com/video/BV14C4y1W7oA">https://www.bilibili.com/video/BV14C4y1W7oA</a></li><li>Flex 布局</li><li>Flex伸缩布局：<a href="https://www.bilibili.com/video/BV1BJ41197XE">https://www.bilibili.com/video/BV1BJ41197XE</a></li></ul></li><li>页面响应式布局设计<br>六个案例学会响应式布局：<a href="https://www.bilibili.com/video/BV1ov411k7sm">https://www.bilibili.com/video/BV1ov411k7sm</a><br>浏览器脚本语言<br>(JavaScript)</li><li>JavaScript基础语法和知识<br>JavaScript基础语法：<a href="https://www.bilibili.com/video/BV1Sy4y1C7ha">https://www.bilibili.com/video/BV1Sy4y1C7ha</a></li><li>使用JavaScript 操作 DOM元素<br>JS必会的DOM BOM操作：<a href="https://www.bilibili.com/video/BV1k4411w7sV">https://www.bilibili.com/video/BV1k4411w7sV</a></li><li>Ajax 异步请求相关知识学习<br>Ajax入门到精通：<a href="https://www.bilibili.com/video/BV1WC4y1b78y">https://www.bilibili.com/video/BV1WC4y1b78y</a></li><li>ES6 以上版本 的JavaScript<br>ES6-ES11新特性：<a href="https://www.bilibili.com/video/BV1uK411H7on">https://www.bilibili.com/video/BV1uK411H7on</a><h2 id="版本控制管理系统"><a href="#版本控制管理系统" class="headerlink" title="版本控制管理系统"></a>版本控制管理系统</h2>Version Control System</li><li>Git的基本用法<br>Git最新教程：<a href="https://www.bilibili.com/video/BV1FE411P7B3">https://www.bilibili.com/video/BV1FE411P7B3</a></li><li>相关平台/软件的使用<ul><li>GitHub</li><li>十分钟学会Github：<a href="https://www.bilibili.com/video/BV1yo4y1d7UK">https://www.bilibili.com/video/BV1yo4y1d7UK</a></li><li>GitLab</li><li>gitlab使用说明：<a href="https://www.bilibili.com/video/BV11E411x7Uv">https://www.bilibili.com/video/BV11E411x7Uv</a></li><li>Gitee</li><li>这个看中文网址就可以了，目前B站还没有很好的视频介绍<br>网络安全相关知识<br>Web Security Knowledge</li></ul></li><li>HTTPS 原理和使用<br>你连HTTPS原理都不懂：<a href="https://www.bilibili.com/video/BV1Up4y1i7PG">https://www.bilibili.com/video/BV1Up4y1i7PG</a></li><li>CORS 跨域请求和安全知识<br>什么是CORS：<a href="https://www.bilibili.com/video/BV1Kt411E76z">https://www.bilibili.com/video/BV1Kt411E76z</a></li><li>内容安全策略<br>网络渗透：<a href="https://www.bilibili.com/video/BV1kh411W7Vv">https://www.bilibili.com/video/BV1kh411W7Vv</a></li><li>OWASP 安全风险知识<br>OWASP  TOP10：<a href="https://www.bilibili.com/video/BV1ey4y1V7Jj">https://www.bilibili.com/video/BV1ey4y1V7Jj</a><br>包管理工具<br>Package Managers</li><li>npm<br>包管理工具：<a href="https://www.bilibili.com/video/BV1Dv411W7XP">https://www.bilibili.com/video/BV1Dv411W7XP</a></li><li>yarn<br>Yarn入门：<a href="https://www.imooc.com/learn/766">https://www.imooc.com/learn/766</a>  (B站没有，推荐这个免费)<br>CSS 预处理 语言<br>CSS Preprocessors</li><li>Sass<br>SCSS从入门到实战：<a href="https://www.bilibili.com/video/BV1Zg4y1v75U">https://www.bilibili.com/video/BV1Zg4y1v75U</a></li><li>PostCSS<br>B站没太好的视频，建议买书《深入PostCSS Web设计》</li><li>Less<br>前端less教程：<a href="https://www.bilibili.com/video/BV1YW411T7vd">https://www.bilibili.com/video/BV1YW411T7vd</a><br>构建工具<br>Build Tools</li><li>任务执行命令<br>[Task Runners]<ul><li>npm scripts</li><li>npm包管理应用：<a href="https://www.bilibili.com/video/BV1Dv411W7XP">https://www.bilibili.com/video/BV1Dv411W7XP</a></li><li>Gulp</li><li>Gulp入门：<a href="https://www.bilibili.com/video/BV1yA411s72G">https://www.bilibili.com/video/BV1yA411s72G</a></li></ul></li><li>打包工具<ul><li>Webpack</li><li>Webpack从入门到精通：<a href="https://www.bilibili.com/video/BV1e7411j7T5">https://www.bilibili.com/video/BV1e7411j7T5</a></li><li>Parcel</li><li>Parcel初体验：<a href="https://www.bilibili.com/video/BV1Pa4y147Kf">https://www.bilibili.com/video/BV1Pa4y147Kf</a></li></ul></li><li>代码格式化工具<ul><li>Prettier</li><li>Prettier和ESLint使用：<a href="https://www.bilibili.com/video/BV183411r7YK">https://www.bilibili.com/video/BV183411r7YK</a></li><li>ESLint</li><li>ESLint基础入门：<a href="https://space.bilibili.com/390120104/search/video?keyword=ESLint">https://space.bilibili.com/390120104/search/video?keyword=ESLint</a><h2 id="三大前端框架"><a href="#三大前端框架" class="headerlink" title="三大前端框架"></a>三大前端框架</h2>Web Framework<br>React.js<br>React基础视频：<a href="https://www.bilibili.com/video/BV1g4411i7po">https://www.bilibili.com/video/BV1g4411i7po</a><br>React全家桶：<a href="https://www.bilibili.com/video/BV1wy4y1D7JT">https://www.bilibili.com/video/BV1wy4y1D7JT</a><br>React实战博客：<a href="https://www.bilibili.com/video/BV1CJ411377B">https://www.bilibili.com/video/BV1CJ411377B</a><br>React商城实战：<a href="https://www.bilibili.com/video/BV1i5411c7xp">https://www.bilibili.com/video/BV1i5411c7xp</a><br>Vue.js<br>Vue2全家桶：<a href="https://www.jspang.com/detailed?id=57">https://www.jspang.com/detailed?id=57</a><br>Vue3全家桶：<a href="https://www.jspang.com/detailed?id=67">https://www.jspang.com/detailed?id=67</a><br>vuejs从入门到精通：<a href="https://www.bilibili.com/video/BV1Zy4y1K7SH">https://www.bilibili.com/video/BV1Zy4y1K7SH</a><br>Angular<br>Angular基础：<a href="https://www.bilibili.com/video/BV1Wx411R7qt">https://www.bilibili.com/video/BV1Wx411R7qt</a><h2 id="Web-组件化编程"><a href="#Web-组件化编程" class="headerlink" title="Web 组件化编程"></a>Web 组件化编程</h2>Web Components<br>HTML Templates<br>Custom Elements<br>Shadow DOM<br>概要: 此部分内容没有找到合适视频<h2 id="CSS-相关框架"><a href="#CSS-相关框架" class="headerlink" title="CSS 相关框架"></a>CSS 相关框架</h2>CSS Frameworks<br>BootStrap<br>一周学会BootStrap：<a href="https://www.bilibili.com/video/BV1Lx411v73k">https://www.bilibili.com/video/BV1Lx411v73k</a><br>Material UI<br>Material  UI入门教程：<a href="https://www.bilibili.com/video/BV12J411s75b">https://www.bilibili.com/video/BV12J411s75b</a><br>Materialize CSS<br>Materialize CSS Crash Course：<a href="https://www.bilibili.com/video/BV1gx411h7Y5">https://www.bilibili.com/video/BV1gx411h7Y5</a><br>ReactStrap<h2 id="JavaScript-语法糖"><a href="#JavaScript-语法糖" class="headerlink" title="JavaScript 语法糖"></a>JavaScript 语法糖</h2>Type Checkers<br>TypeScript<br>TypeScript从入门到精通：<a href="https://www.bilibili.com/video/BV1qV41167VD">https://www.bilibili.com/video/BV1qV41167VD</a><br>Flow<h2 id="服务端渲染"><a href="#服务端渲染" class="headerlink" title="服务端渲染"></a>服务端渲染</h2>Server Side  Rendering （SSR）<br>React.js</li><li>Next.js</li><li>Next.js入门教程：<a href="https://www.bilibili.com/video/BV13441117KK">https://www.bilibili.com/video/BV13441117KK</a></li><li>GatsbyJS</li><li>GatsbyJS 实战：<a href="https://www.bilibili.com/video/BV1i4411T7AR">https://www.bilibili.com/video/BV1i4411T7AR</a> （英文）<br>Vue.js</li><li>Nuxt.js</li><li>Nuxt.js入门：<a href="https://www.bilibili.com/video/BV1Xt41117Kg">https://www.bilibili.com/video/BV1Xt41117Kg</a><br>Angular</li><li>Universal<h2 id="图形化编程"><a href="#图形化编程" class="headerlink" title="图形化编程"></a>图形化编程</h2>GraphQL<br>Cocos Creator<br>Cocos 图形游戏开发：<a href="https://www.bilibili.com/video/BV1sA411Y7x4">https://www.bilibili.com/video/BV1sA411Y7x4</a><br>Three.js<br>Three.js基础教程-英文：<a href="https://www.bilibili.com/video/BV1ks411W78i">https://www.bilibili.com/video/BV1ks411W78i</a><br>Three.js教程：<a href="https://www.bilibili.com/video/BV1va4y1p7QB">https://www.bilibili.com/video/BV1va4y1p7QB</a><h2 id="静态站点生成器"><a href="#静态站点生成器" class="headerlink" title="静态站点生成器"></a>静态站点生成器</h2>Static Site Generators<br>Next.js<br>Next.js入门教程：<a href="https://www.bilibili.com/video/BV13441117KK">https://www.bilibili.com/video/BV13441117KK</a><br>GatsbyJS<br>GatsbyJS 实战：<a href="https://www.bilibili.com/video/BV1i4411T7AR">https://www.bilibili.com/video/BV1i4411T7AR</a> （英文）<br>Nuxt.js<br>Nuxt.js入门：<a href="https://www.bilibili.com/video/BV1Xt41117Kg">https://www.bilibili.com/video/BV1Xt41117Kg</a><br>Vuepress<br>Vuepress入门到精通：<a href="https://www.bilibili.com/video/BV1vb411m7NY">https://www.bilibili.com/video/BV1vb411m7NY</a><br>Hugo<br>10分钟搭建个人网站：<a href="https://www.bilibili.com/video/BV1x64y117PX">https://www.bilibili.com/video/BV1x64y117PX</a><h2 id="移动App开发"><a href="#移动App开发" class="headerlink" title="移动App开发"></a>移动App开发</h2>Mobile Applications<br>React  Native<br>ReactNatvie基础：<a href="https://www.bilibili.com/video/BV1Eg4y16735">https://www.bilibili.com/video/BV1Eg4y16735</a><br>ReactNatvie实战：<a href="https://www.bilibili.com/video/BV15K411s75p">https://www.bilibili.com/video/BV15K411s75p</a><br>UniApp<br>Uni-App从入门到实战：<a href="https://www.bilibili.com/video/BV1BJ411W7pX">https://www.bilibili.com/video/BV1BJ411W7pX</a><br>Uni-App美团外卖：<a href="https://www.bilibili.com/video/BV1Zt4y117RR">https://www.bilibili.com/video/BV1Zt4y117RR</a><br>Flutter<br>Flutter基础：<a href="https://www.bilibili.com/video/BV15t411U7yf">https://www.bilibili.com/video/BV15t411U7yf</a><br>Flutter实战：<a href="https://www.bilibili.com/video/BV1kt411B7mu">https://www.bilibili.com/video/BV1kt411B7mu</a><br>Ionic<br>Ionic入门：<a href="https://www.bilibili.com/video/BV1Ub41117q5">https://www.bilibili.com/video/BV1Ub41117q5</a><h2 id="桌面应用开发"><a href="#桌面应用开发" class="headerlink" title="桌面应用开发"></a>桌面应用开发</h2>Desktop Applications<br>Electron<br>Electron入门：<a href="https://www.bilibili.com/video/BV1QB4y1F722">https://www.bilibili.com/video/BV1QB4y1F722</a><br>Electron基础：<a href="https://www.bilibili.com/video/BV177411s7Lt">https://www.bilibili.com/video/BV177411s7Lt</a></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技术胖收藏夹分享</title>
      <link href="/2022/01/23/%E6%8A%80%E6%9C%AF%E8%83%96%E6%94%B6%E8%97%8F%E5%A4%B9%E5%88%86%E4%BA%AB/"/>
      <url>/2022/01/23/%E6%8A%80%E6%9C%AF%E8%83%96%E6%94%B6%E8%97%8F%E5%A4%B9%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="自学前端程序-私藏工具和网站分享"><a href="#自学前端程序-私藏工具和网站分享" class="headerlink" title="自学前端程序 私藏工具和网站分享"></a>自学前端程序 私藏工具和网站分享</h1><h2 id="01-JavaScript"><a href="#01-JavaScript" class="headerlink" title="01.JavaScript"></a>01.JavaScript</h2><ul><li><a href="https://wangdoc.com/javascript/">JavaScript 教程 | 通俗易懂的JavaScript教程</a></li><li><a href="https://es6.ruanyifeng.com/">ES6 入门教程 | 通俗易懂的ES6入门教程</a><a id="more"></a></li><li><a href="https://javascript30.com/">JavaScript 30  |  使用原生JavaScript在30天内完成30个项目</a></li><li><a href="https://zh.javascript.info/">现代 JavaScript 教程 |  最近很流行的JavaScript教程</a></li><li><a href="https://blog.poetries.top/node-learning-notes/">Node.js学习指南 | 系统的Node.js学习教程和笔记系统整理</a></li><li><a href="https://github.com/ryanmcdermott/clean-code-javascript">JS 代码规范 | 优秀的 JS代码规范</a></li><li><a href="https://github.com/xcatliu/typescript-tutorial">TypeScript 教程 | 通俗易懂的TypeScript教程</a></li><li><a href="https://jspang.com/detailed?id=63">TypeScript 教程 |  最好的TypeScript 视频+图文教程</a></li></ul><h2 id="02-CSS样式"><a href="#02-CSS样式" class="headerlink" title="02.CSS样式"></a>02.CSS样式</h2><ul><li><a href="https://lhammer.cn/You-need-to-know-css/#/zh-cn/">CSS Tricks 效果大全 | CSS的各种效果实现 有很多动画效果</a></li><li><a href="https://github.com/chokcoco/CSS-Inspiration">CSS Inspiration |  CSS灵感的诞生地  我每天都的网站</a></li><li><a href="https://github.com/QiShaoXuan/css_tricks"> CSS 常用样式 |  有很多常用的CSS样式</a></li><li><a href="https://animista.net/"> Animista | CSS动画库  主打按需定制CSS动画效果</a></li><li><a href="https://animista.net/"> Animista | CSS动画库  主打按需定制CSS动画效果</a></li><li><a href="https://cssminifier.com/"> CSS Minifier | 在线CSS代码简化/压缩工具</a></li><li><a href="https://sass.bootcss.com/documentation"> Sass: Sass 文档 | Sass 中文网  成熟、稳定、强大的CSS扩展语言</a></li><li><a href="https://less.bootcss.com/"> Less 快速入门 | Less.js 中文文档 将CSS赋予了动态语言特性的样式语言</a></li><li><a href="https://stylus-lang.com/"> stylus | CSS扩展  富有变现里、动态、健壮的CSS</a></li></ul><h2 id="03-算法数据"><a href="#03-算法数据" class="headerlink" title="03.算法数据"></a>03.算法数据</h2><ul><li><a href="http://github.com/trekhleb/javascript-algorithms"> JavaScript 算法与数据结构 | 多种基于JavaScript的算法与数据结构</a></li><li><a href="https://github.com/azl397985856/leetcode"> leetcode 解题之路 |  私藏LeetCode解题攻略 </a></li><li><a href="https://github.com/MisterBooo/LeetCodeAnimation"> 五分钟学算法 |  每天拿出五分钟  学学算法  比如上个厕所就学了 </a></li><li><a href="https://github.com/biaochenxuying/blog/issues/43">数据结构与算法项目推荐 | Github上170K+Star的前端学习数据结构和算法题目 </a></li><li><a href="https://github.com/biaochenxuying/blog/issues/42">JavaScript  十大经典排序算法 | JavaScript排序必会题目  作者功力很深 值得学习 </a></li><li><a href="https://github.com/algorithm-visualizer/algorithm-visualizer">算法可视化工具 |  用可视化工具和交互方式 让你从代码中可视化算法 </a></li><li><a href="https://visualgo.net/en">算法可视化来源 </a></li><li><a href="https://github.com/skidding/illustrated-algorithms">算法的工作方式 | 变量和操作的可视化表示 增强了控制流和实际源代码 </a></li></ul><h2 id="04-前端面试"><a href="#04-前端面试" class="headerlink" title="04.前端面试"></a>04.前端面试</h2><ul><li><a href="https://blog.poetries.top/FE-Interview-Questions/">前端面试常考问题整理 |  按模块和知识点分类</a></li><li><a href="https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions">前端开发面试题</a></li><li><a href="https://github.com/h5bp/Front-end-Developer-Interview-Questions/">WEB前端面试宝典</a></li><li><a href="https://github.com/shfshanyue/blog/blob/master/post/juejin-interview.md">掘金前端面试题合集</a></li><li><a href="https://yuchengkai.cn/">前端面试图谱</a></li><li><a href="https://github.com/biaochenxuying/blog/issues/47">前端面试开源项目汇总 | Github上100K+ Star 的前端面试开源项目汇总</a></li></ul><h2 id="05-技术社区"><a href="#05-技术社区" class="headerlink" title="05.技术社区"></a>05.技术社区</h2><ul><li><a href="https://github.com/">GitHub  |  高质量内容创作和分享平台</a></li><li><a href="https://stackoverflow.com/">Stackoverflow |一个回答技术问题的网站</a></li><li><a href="https://juejin.cn/">掘金 | 国内的很多优质前端文章都掘金</a></li><li><a href="https://www.cnblogs.com/">博客园  | 一个很纯粹的技术博客平台</a></li><li><a href="https://www.zhihu.com/">知乎 |  很多程序人喜欢泡在知乎</a></li><li><a href="https://www.csdn.net/">CSDN  | 老牌社区  程序员必上的一个社区</a></li><li><a href="https://www.v2ex.com/">v2ex  | 程序员分享和探索的社区</a></li><li><a href="https://segmentfault.com/">segmentfault  | 低调技术博客社区</a></li><li><a href="https://cnodejs.org/">Node.js 中文社区 |  node专业中文社区</a></li><li><a href="https://www.smashingmagazine.com/">博客杂志站点 | 一个 web 技术类的博客杂志站点</a></li><li><a href="https://www.jstips.co/">JS 技术的网站 | 每天推出一个JS技巧的网站</a></li><li><a href="https://www.jstips.co/">W3Cplus | 推广国内行业的技术博客</a></li><li><a href="https://docschina.org/">印记中文 | 最权威的技术中文文档社区</a></li></ul><h2 id="06-前端博客"><a href="#06-前端博客" class="headerlink" title="06.前端博客"></a>06.前端博客</h2><ul><li><a href="https://jspang.com/">技术胖博客 |  专注前端 每年100集免费前端视频</a></li><li><a href="http://www.alloyteam.com/">腾讯Alloy Team  | 腾讯前端博客 每天必看</a></li><li><a href="https://isux.tencent.com/">腾讯用户体验博客 | 专注于前端用户体验</a></li><li><a href="https://fed.taobao.org/">淘系前端博客 |  淘宝前端博客 代表中国最强前端实力</a></li><li><a href="https://aotu.io/">京东凹凸实验室  |  京东前端技术博客</a></li><li><a href="https://zhuanlan.zhihu.com/ElemeFE">饿了么前端博客  |  知乎上的最强前端博客</a></li><li><a href="http://fex.baidu.com/">百度前端博客  |  百度前端团队旗下博客</a></li><li><a href="https://75.team/">360奇舞团  |  360公司前端团队</a></li><li><a href="https://tech.meituan.com/">美团技术博客  |  美团技术团队博客</a></li></ul><h2 id="07-构建工具"><a href="#07-构建工具" class="headerlink" title="07.构建工具"></a>07.构建工具</h2><ul><li><a href="https://www.npmjs.com/">NPM |  包管理 和 项目构建工具</a></li><li><a href="https://webpack.js.org/">webpack  | 前端最流行的项目构建工具</a></li><li><a href="https://yarnpkg.com/">Yarn  |  后起之秀 优秀的包管理和构建工具</a></li><li><a href="https://www.gulpjs.com.cn/">Gulp  |  老牌构建工具</a></li><li><a href="https://babeljs.io/">Babel  | ES6构建转换工具</a></li><li><a href="https://cn.eslint.org/">ESLint  | 可组装的JavaScript和JSX检查工具</a></li><li><a href="https://www.postcss.com.cn/">PostCSS | 用JavaScript转换CSS代码的工具</a></li></ul><h2 id="08-部署工具"><a href="#08-部署工具" class="headerlink" title="08.部署工具"></a>08.部署工具</h2><ul><li><a href="https://pages.github.com/">Github Page  | Github提供的免费静态网站托管服务</a></li><li><a href="https://www.netlify.com/">Netlify  |  30秒内部署你的网站</a></li><li><a href="https://vercel.com/">Vercel  |  快速部署你的网站 国外很流行</a></li><li><a href="https://surge.sh/">Surge  |  一个命令部署你的网站</a></li><li><a href="https://www.heroku.com/">Heroku  |  运动构建 、 运行你的网站和应用</a></li></ul><h2 id="09-静态站点搭建"><a href="#09-静态站点搭建" class="headerlink" title="09.静态站点搭建"></a>09.静态站点搭建</h2><ul><li><a href="https://hexo.io/zh-cn/">Hexo  |  最流行的静态博客程序 Markdown编写 生成静态站点</a></li><li><a href="https://www.vuepress.cn/">VuePress  |  Vue驱动的静态网站生成器</a></li><li><a href="https://www.gitbook.com/">GitBook  | 现代化的文档平台，支持团队协作</a></li></ul><h2 id="10-前端代码规范"><a href="#10-前端代码规范" class="headerlink" title="10.前端代码规范"></a>10.前端代码规范</h2><ul><li><a href="https://tgideas.qq.com/doc/index.html">Tgideas | 腾讯前端代码规范 值得参考</a></li><li><a href="https://guide.aotu.io/index.html">京东  |  京东前端代码规范文档 分类详细</a></li><li><a href="https://codeguide.bootcss.com/">Bootstrap编码规范  |  适合个人和小团队使用的代码规范 不复杂</a></li><li><a href="https://es6.ruanyifeng.com/#docs/style">ES6 编程风格  | 阮一峰编写的ES6代码规范  值得每个人阅读并参考</a></li><li><a href="https://github.com/airbnb/javascript">Airbnb  前端代码规范  |  国外企业的前端代码规范</a></li><li><a href="https://eslint.org/">ESLint  |  代码规范检查和格式化工具</a></li><li><a href="https://prettier.io/">Prettier  | VSCode 最热门的代码格式化工具  让你写出漂亮的代码</a></li></ul><h2 id="11-调试抓包"><a href="#11-调试抓包" class="headerlink" title="11.调试抓包"></a>11.调试抓包</h2><ul><li><a href="https://wproxy.org/whistle/">Whistle  |  代理抓包工具  我一直在用的工具 很好很强大</a></li><li><a href="https://www.telerik.com/fiddler">Fiddler  |  使用人数最多的抓包工具</a></li></ul><h2 id="12-在线工具"><a href="#12-在线工具" class="headerlink" title="12.在线工具"></a>12.在线工具</h2><ul><li><a href="https://codepen.io/">CodePen  |  前端在线测试和演示工具  国外站点</a></li><li><a href="https://caniuse.com/">Can  I  use |  Web前端兼容性列表</a></li><li><a href="https://tinypng.com/">TinyPNG  |  PNG/JPG 图片在线压缩工具</a></li><li><a href="https://www.umeng.com/">CNZZ |  老牌站点统计工具  5年前国内站长必上网站</a></li><li><a href="https://web.dev/measure/">web.dev  |  评测网站性能  基于Lighthouse</a></li><li><a href="https://www.shapedivider.app/">Shape Divider  | 定制各种形状SVG的工具</a></li><li><a href="https://gtmetrix.com/">GTmetrix  |  网页性能在线分析工具</a></li><li><a href="https://carbon.now.sh/">Carbon  |  代码转图片工具  </a></li><li><a href="https://www.wappalyzer.com/">Wappalyzer  |  检测某个网站的技术栈  </a></li><li><a href="https://unbug.github.io/codelf">CODEIF | 变量方法起名工具  人工智能加持  </a></li><li><a href="https://tool.lu/"> tool.lu  |  程序员在线工具大全   </a></li></ul><h2 id="13-开发工具"><a href="#13-开发工具" class="headerlink" title="13.开发工具"></a>13.开发工具</h2><ul><li><a href="https://code.visualstudio.com/"> VSCode  |  前端最流行的编辑器   </a></li><li><a href="https://www.sublimetext.com/"> Sublime Text  |  轻量级代码编辑工具 曾经我的最爱   </a></li><li><a href="https://www.jetbrains.com/webstorm/"> WebStom |  忠爱粉最多的编辑器 </a></li><li><a href="https://atom.io/"> Atom  |   用的人很多  我却不喜欢的编辑器 </a></li><li><a href="https://www.typora.io/"> Typora |  程序人Mrakdown笔记  一直在用的笔记工具 </a></li></ul><h2 id="14-开发者大会"><a href="#14-开发者大会" class="headerlink" title="14.开发者大会"></a>14.开发者大会</h2><ul><li><a href="https://fequan.com/"> Vue.js开发者大会 |  前端人必须关注的前端大会 </a></li><li><a href="https://jsconfchina.com/"> 中国JS开发者大会  |  公司每年必组织参加的技术大会 </a></li><li><a href="https://css.w3ctech.com/"> CSS开发者大会 |  提高CSS技术的开发者大会  打开视野 面向世界 </a></li><li><a href="https://www.alibabaf2e.com/"> D2前端开发者大会 |  阿里组织的大会 可以看直播  </a></li></ul><h2 id="15-WEB图标"><a href="#15-WEB图标" class="headerlink" title="15.WEB图标"></a>15.WEB图标</h2><ul><li><a href="http://www.fontawesome.com.cn/"> Font Awesome  |  网站开发最流行的图标集  </a></li><li><a href="https://feathericons.com/"> Feather |  简洁美观的开源图标  </a></li><li><a href="https://material.io/resources/icons/"> Material  Design Icons  |  轻快、精美的符号图标  </a></li><li><a href="https://tablericons.com/"> Tabler Icons | 681枚可定制的开源SVG图标  </a></li><li><a href="https://simpleicons.org/"> 常见品牌的SVG图标  </a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DAY04  笔记</title>
      <link href="/2022/01/16/DAY04-%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/01/16/DAY04-%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>1、开发第一个Java程序：HelloWorld<br>    1.1、程序写完之后，一定要Ctrl + S 进行保存<br>        ⚠另外需要注意的是：Java源代码只要修改，必须重新编译。<br>        重新生成.class字节码文件。<br>    <a id="more"></a><br>    1.2、编译阶段<br>        怎么编译？使用什么命令？这个命令怎么用？<br>        需要使用的命令是：javac.exe（存放在C盘的Java目录里）<br>        这个命令需要先测试一下，打开DOS命令窗口，看看javac命令是否可用。</p><pre><code>    测试javac后发现windows找不到文件在哪？        配置path环境变量。        配置path环境变量的步骤：            桌面计算机上右键- -&gt;属性- -&gt;高级系统设置- -&gt;环境变量        让javac.exe能用，配置哪个路径到path中？            找到javac.exe的文件路径复制到path变量里。⚠注意：修改完环境变量后，DOS命令窗口必须关闭重新打开才会起作用。java命令怎么用？    语法格式：        javac java源文件的路径什么是java源文件？    java源文件的名字是以“.java”结尾，该文件中写了java源代码。    ○ java源文件的路径：直接把Java源文件拖入DOS命令窗口就出现java源文件的路径。    ○ 在java源文件上方的路径里输入cmd即可帮助cmd快速定位到java源文件路径。1.3、运行阶段    运行的前提是：class文件（字节码）生成了。没有字节码文件程序是无法运行的。        假设该文件的名字叫做：HelloWorld.class        那么HelloWorld就称为一个类名。    怎么运行？使用哪个命令？        使用JDK的bin目录下的：javac.exe命令来运行。    先在DOS命令窗口中测试javac.exe命令是否可以使用。        Java -version    &quot;java.exe“这个命令怎么用，语法格式是什么？？        格式：Java + 空格 +类名    运行java程序需要哪些步骤？        第一步：先使用cd命令切换到xxx.class文件所在的路径。            或者在文件所在路径输入cmd定位。        第二步：执行java 类名            切记：Java命令后面只要是跟路径，就一定不行，只能是跟类名。</code></pre><p>2、“java HelloWorld”的执行过程及原理</p><pre><code>C:\Users\Carry\Desktop\JAVA&gt;java java1 敲完回车后发生什么？    第一步：会先启动JVM（java虚拟机）    第二步：JVM启动之后，JVM会去启动&quot;类加载器classloader“        类加载器的作用：加载类的，本质上类加载器负责去找“类”对应的“字节码”文件。        假设是“java HelloWorld”，那么类加载器会去硬盘上搜索：HelloWorld.class文件。        假设是“java test”，那么类加载器会去硬盘上搜索：test.class文件。    类加载器如果在硬盘上找不到对应的字节码文件的话会报错，报错什么内容？            错误：找不到或无法加载主类        类加载器如果在硬盘上找到了对应的字节码文件，类加载器会将该字节码文件装载到JVM当中，JVM启动“解释器”将字节码解释为“10101011…”这种的二进制码，操作系统执行二进制码和硬件交互。问题1：默认情况下，类加载器去硬盘哪里找对应的字节码文件？    Java 类目执行后，类加载器会在当前路径下找对应的字节码文件加载。问题2：能不能给类加载器指定一个路径，让类加载器去指定的路径下加载字节码文件？    可以的，但我们要设置一个环境变量，叫做：class.path。问题3：class.path是一个环境变量，是给谁指路的？    是给“类加载器”指路的。    classpath环境变量不属于windows，classpath环境变量隶属于java。    在没有配置环境变量的classpath的时候，默认从但前路径下加载。    如果配置了classpath环境变量之后，只能去指定的路径下加载了。    ⚠非常重要的一个特点：配置了classpath=D:\xxxx目录之后，类加载器只会去xxxx目录找对应的字节码文件。        classpath环境变量不需要配置，到JavaWeb时才需要配置classpath环境变量。</code></pre><p>3、在高版本的JDK当中，有这样一个特性，可以一步到位：<br>    Java x\z\y.java<br>    java后面加源文件的路径。<br>    这个特性是为了简化开发而提出，但实际上底层的实现原理还是和以前一样的，以上命令在执行过程中，还是会先进行编译，然后再运行。<br>    并且以上的运行方式，编译生成的class文件在硬盘上不存在，看不见。</p><p>4、关于第一个Java程序代码的解释说明（注释）：<br>    注释在程序中不起作用，只是对程序进行解释说明。<br>    /* 1、什么是注释，有什么用？<br>        注释是对Java源代码的解释说明<br>        注释可以帮程序员更好地理解程序<br>    2、注释信息只保存在Java源文件当中，Java源文件编译生成的字节码class文件中是没有注释信息的<br>    3、程序员应有良好的写注释习惯。<br>    4、另外这种注释可以注释多行内容。 */</p><pre><code>// 这种是单行注释，只注释两个斜杠后面的内容。</code></pre><p>5、⚠注意：<br>    1、在JAVA中任何有效的代码必须写到“类体”当中，最外层必须是一个类的定义。<br>    2、public表示公开的，class表示定义一个类，Test是一个类名。类名后面必须是一对大括号，这一对大括号被称为“类体”<br>    3、括号必须是成对的。并且建议都要成对编写，这样才不会丢掉。{}、[]、()</p><p>public class Test  //声明/定义一个公开的类，起个名字叫Test<br>    {  //大括号内都是类体。<br>    //整个这一块的代码被称为：main方法（程序的入口，sun公司java语言规定的）<br>    public static void main(String[] args) {<br>    //JVM在执行程序的时候，会主动去找这样一个方法。没有这个规格的方法，程序就无法执行。<br>    //注意：方法必须放在“类体”中，不能放在“类体”外面。<br>    //注意：方法体由一行一行的java语句构成。<br>        System.out.println(“Test”);<br>    //每个语句都要以英文分号结束。<br>    //语句内容要加英文””双引号。数字可以不加双引号。<br>        System.out.println(“test2”);<br>    }<br>}<br>    大括号里有main方法可以编译运行。</p><p>1、一个java源文件可以定义多个class。<br>2、public的类不是必须的。<br>3、在源文件中只要有一个class的定义，那么必然就会生成一个对应的class文件。<br>4、 public的类可以没有，但是如果又public修饰的类名必须和源文件名保持一致。<br>5、public的类有且只能有一个。<br>6、测试想从哪个入口进去执行，就加载哪个类：java 类名。</p><p>常见错误：<br>1、没有定义则编译报错：找不到符号。<br>2、找不带文件<br>3、单词拼写问题<br>4、括号匹配问题<br>5、中英文问题</p><p>程序解析：<br>• 首先编写java源代码程序，扩展名.java<br>• 在命令行模式中，输入javac命令对源代码进行编译，生成字节码文件<br>    • javac 源文件名.java<br>• 编译完成后，如果没有报错信息，输入java命令对class字节码文件进行解释运行,执行时不需要添加.class扩展名<br>    • java HelloWorld</p><p>初学者编程应养成习惯：先将思路用注释方式写出来再进行编程。</p><p>练习题：</p><p><img src="/img/DAY04-1.png" alt="overwrote existing file"></p><p>作业1：</p><p><img src="/img/day04-2.png" alt="upload successful"></p><p>作业2：</p><p><img src="/img/day04-3.png" alt="upload successful"></p>]]></content>
      
      
      <categories>
          
          <category> 动力节点JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DAY03 笔记</title>
      <link href="/2022/01/16/DAY03-%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/01/16/DAY03-%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>1、Java语言的特性</p><a id="more"></a><pre><code>1.1、简单性    在Java语言当中真正操作内存的是：JVM（Java虚拟机）    所有的java程序都是运行在Java虚拟机当中的。    而Java虚拟机执行过程中再去操作内存。    对于C或者C++来说程序员都是可以直接通过指针操作内存的。    C或者C++更灵活，可以直接程序员操作内存，但是要求程序员技术精湛。    C语言或者C++更有驾驭感。    Java语言屏蔽了指针概念，程序员不能直接操作指针，或者说程序员    不能直接操作内存。这种方式有优点也有缺点：        优点：不容易导致内存泄漏。（简单了。）        缺点：效率问题，包括驾驭感比较差。    飞机航行：        如果是C语言表示程序员是飞机驾驶员。        如果是Java语言表示程序员是飞机上的乘客。    Java语言底层是C++，所以JVM是用C++语言写好的一个虚拟的电脑。    JVM在哪里？告诉大家，安装了JDK之后，JVM就代表安装好了。    内存是什么？        对于计算机来说：最主要的几个部件是什么？            CPU：                中央处理器，相当于人类的大脑，负责发送并执行指令。                是整个计算机的指挥官。                CPU是负责计算的，负责运算的。                10 + 20 = 30                CPU负责将30这个结果计算出来。                但是在计算过程中有三个数据需要临时找个空间存储一下：                    这三个数据分别是：10 20 30            内存：                程序运行过程当中的临时数据存储空间。                断电之后或者关机之后内存中的数据就消失了。            硬盘：                持久化设备，硬盘上的数据不会因断电而丢失。            主板：                相当于人类的躯干，是一个载体：                    CPU、内存条、硬盘等主要的部件都是放在主板上的，                    主板上有很多线，将以上的部件链接起来。            .....1.2、java是堪称完全面向对象的。    面向对象更容易让人理解，人类通常是以对象的方式认知世界的。    采用面向对象的方式可以让复杂问题简单化。1.3、健壮性    主要是因为Java中有一种机制：        自动垃圾回收机制（GC机制）。    java语言是健壮的，相对于C语言来说，C语言没有Java健壮。    Java不容易导致内存的泄漏。    C++或者C语言使用不当时很容易导致内存泄漏。    JVM负责调度GC机制。程序员不需要干涉。    以上讲解中又描述了这几个术语：        JVM（C++语言写的一个虚拟的计算机）、GC（垃圾回收机制）1.4、java完全/完美支持多线程并发。1.5、可移植性/跨平台    java语言只要编写一次，可以做到到处运行。    例如：java程序编写完之后，可以运行在windows操作系统上，    不需要做任何改动可以直接运行在Linux操作系统上，同样也    可以运行到MaC OS上面。    一次编写，到处运行。（平台改变了，程序不需要改。）    JVM这种机制实现了跨平台，那么这种机制优点和缺点分别是什么？        优点：一次编写到处运行，可以跨平台。        缺点：麻烦。对于运行java程序来说必须先有一个JVM。        就像你要想在网页上看视频，你必须先安装一个flash是一样的。    Java语言可以编写病毒吗？        可以，没问题。但是很难让用户中毒。        中毒的一般都是java程序员。所以很少有人编写java的病毒脚本。</code></pre><p>2、JDK、JRE、JVM三者之间的关系？<br>    JDK:Java开发工具箱<br>    JRE:java运行环境<br>    JVM:java虚拟机</p><pre><code>JDK包括JRE，JRE包括JVM。JVM是不能独立安装的。JRE和JDK都是可以独立安装的。有单独的JDK安装包。也有单独的JRE安装包。没有单独的JVM安装包。安装JDK的时候：JRE就自动安装了，同时JRE内部的JVM也就自动安装了。安装JRE的时候：JVM也就自动安装了。问题：    假设你在软件公司开发了一个新的软件，现在要去客户那边给客户把    项目部署一下，把项目跑起来，你需要安装JDK吗？        只需要安装JRE就行了。        JRE体积很小，安装非常便捷快速。问题：    为什么安装JDK的时候会自带一个JRE？        因为java程序员开发完程序之后，要测试这个程序，        让这个程序运行起来，需要JRE。所以JDK安装的时候        内部自带一个JRE。</code></pre><p>3、到目前为止，我们接触过的重点术语，总结一下：</p><pre><code>Java体系的技术被划分为三大块：    JavaSE：标准版    JavaEE：企业版    JavaME：微型版安装JDK之后：    JDK：java开发工具箱    JRE：Java运行环境    JVM：Java虚拟机</code></pre><p>4、对Java的加载与执行的理解（理论比较重要）<br>    java程序从编写到最终运行经历了哪些过程？？？？</p><pre><code>java程序非常重要的两个阶段：    编译阶段    运行阶段注意：java程序员直接编写的java代码（普通文本）是无法执行被JVM识别的。java程序员编写的java代码这种普通文本必须经过一个编译，将这个“普通文本代码”变成“字节码”，JVM能够识别“字节码”。java代码这种普通文本变成字节码的过程，被称为：编译。java代码这种普通文本被称为：java源代码。（你编写的代码是源代码）源代码不能直接执行，需要先进行编译，生成源代码对应的“字节码”JVM可以识别的是字节码。编译阶段和运行阶段可以在不同的操作系统上完成吗？    在windows上编译    编译之后生成了“字节码”    把“字节码”放到linux上运行    完全可以，因为Java是跨平台的。    可以做到一次编写到处运行。java源代码一旦编译之后，源代码可以删除吗？只留下字节码可以执行吗？    完全可以执行，因为源代码不参与程序的执行过程。    参与程序执行过程的是字节码。    但是最好不要删除源代码。因为有可能执行结果不是你需要的，    当执行结果不是你需要的时候，你可以重新打开源代码进行修改，    然后重新编译生成新的字节码，再重新执行。这样会有新的执行效果。放源代码的文件扩展名必须是：xxx.java并且需要注意的是：编译生成的字节码文件扩展名是：xxx.class没有为什么，死记硬背吧！！！！.java文件就是源文件，这个文件中编写源代码。.class文件就是字节码文件，这个文件是编译源代码而得到的。另外需要注意的是：    1个java源文件是可以编译生成多个class文件的。    最终运行的是class文件。问题：字节码文件是二进制文件吗？    字节码文件不是二进制文件。    如果是二进制的话，就不需要JVM了。    因为操作系统可以直接执行二进制。java程序从开发到最终运行经历了什么？    编译期：（可以在windows上）        第一步：在硬盘的某个位置（随意），新建一个xxx.java文件        第二步：使用记事本或者其它文本编辑器例如EditPlus打开xxx.java文件        第三步：在xxx.java文件中编写“符合java语法规则的”源代码。        第四步：保存（一定要将xxx.java文件保存一下）        第五步：使用编译器（javac【JDK安装后自带】）对xxx.java文件进行编译。        第六步：如果xxx.java文件中编写的源代码是符合语法规则的，编译会通过，        如果xxx.java文件中编写的源代码违背了语法规则，那么编译器会报错，编译器        报错之后class文件是不会生成的，只有编译通过了才会生成class字节码文件。        并且一个java源文件是可以生成多个class文件的。（编译实质上是检查语法）    运行期（JRE在起作用）：（可以在windows上，也可以在其他的OS上。）        第七步：如果是在Linux上运行，需要将windows上生成的class文件拷贝过去        不需要拷贝源代码，真正运行的是字节码。（但是源代码也不要删除，有用）        第八步：使用JDK自带的一个命令/工具：java（负责运行的命令/工具）执行字节码        第九步：往下的步骤就全部交给JVM了，就不需要程序员干涉了。        JVM会将字节码文件装载进去，然后JVM对字节码进行解释（解释器负责将字节码        解释为1010101010..等的二进制）        第十步：JVM会将生成的二进制码交给OS操作系统，操作系统会执行二进制码和        硬件进行交互。注意：在以上的过程中，需要使用两个非常重要的命令？    javac 命令，负责编译    java 命令，负责运行小插曲：    xxx.java源文件经过编译之后生成了A.class、B.class、C.class等文件，    那么我们称A是一个类、B是一个类、C是一个类。其中A、B、C是类的名字。    没有为什么，死记硬背，SUN公司的java语法就是这么规定的。    A/B/C是类的名称。A类、B类、C类。源文件中编写的代码叫做：源代码。以上是一个复杂的过程，那么缩减一下，程序员到底要干啥？    新建java文件    打开java文件    写java源代码    保存    javac命令编译    java命令运行    编写、编译、运行</code></pre><p>5、编写java中的第一个java程序：HelloWorld（你好世界：问世）<br>    这个程序不需要大家理解，大家照抄就行，因为目前我也不会讲解这个程序为什么这么写。<br>    主要是为了搭建java的开发环境，测试java的环境是否能用。</p><pre><code>第一步：安装文本编辑器（EditPlus）第二步：安装JDK（先下载JDK）    安装JDK13，直接下一步就行。    JDK13安装的时候内置了一个JRE，独立于JDK之外的JRE并没有生成。    对于java13来说，如果你希望生成一个独立于JDK之外的JRE的话需要执行特殊的命令。    这里先不讲，后期用到的时候再说。    注意的是：        JDK8安装的时候，不仅JDK内置了一个JRE，而且还会在JDK目录之外        独立的生成一个单独的JRE。（以前低版本的时候，JRE实际上是有2个。）        一个是JDK内置的，一个是独立于JDK之外的。    JDK的bin目录下有：        javac.exe 负责编译        java.exe 负责运行第三步：写代码    写一下第一个程序HelloWorld。    这个代码在此强调：        文件名照抄        文件内容代码严格照抄        照抄大小写        照抄任何一个环节        照抄标点符号        不要问为什么。        后面会解释。        括号：            []            ()            &#123;&#125;            都要成对写。第四步：编译第五步：运行</code></pre>]]></content>
      
      
      <categories>
          
          <category> 动力节点JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DAY02 笔记</title>
      <link href="/2022/01/16/DAY02-%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/01/16/DAY02-%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>1、Java编程语言是Sun Microsystems公司的James Gosling在1990年创建的，于1995年公布于世（一般说Java诞生于1995年）。Java是一门面向对象的编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++难以理解的多继承、指针等概念。因此Java语言具有功能强大和简单易用的两个特征。</p><a id="more"></a><p>2、JAVA语言概述及发展史<br>    JDK（Java开发工具箱，做JAVA开发必须安装的，这是最根本的一个环境。）<br>    JDK不是集成开发环境，他是Java最核心的库。<br>    前往甲骨文官网下载JDK，exe文件</p><pre><code>98年的时候：Java升级到JDK1.2，Java被分为三大块：    J2SE：标准版（基础，要学Java，必须先学习SE。基础语法+基础库）    J2EE：企业版（专门为企业开发软件，为企业提供解决方案。例如：OA办公系统和医疗服务等。）Java诞生十周年改了名字：    JavaSE    JavaEE    JavaME</code></pre><p>3、Java语言的特性：<br>    1、简单性：Java语言底层采用C++语言实现。<br>    在Java语言中真正操作内存的是：JVM（Java虚拟机）所有的java程序中都是运行在Java虚拟机当中的。<br>    对于C或者C++更灵活，可以直接程序员操作内存，但要求程序员技术精湛。<br>    Java语言屏蔽了指针概念，程序员不能直接操作指针，或者说程序员不能直接操作内存。这种方式有优点也有缺点。<br>        优点：不容易导致内存泄漏。<br>        缺点：效率问题，包括驾驶感比较差。</p><pre><code>例如飞机航行：    如果是C语言表示程序员是飞机的驾驶员。    如果是Java表示程序员是飞机上的乘客。因为Java语言的低层是C++，所以JVM是用C++语言写好的一个虚拟的电脑。计算机安装好JDK后，JVM也代表安装完毕。2、面向对象    Java是完全面向对象的。    面向对象更容易让人理解，人类通常是以对象的方式认知世界的。    采用面向对象的方式可以让复杂的问题简单化。3、健壮性    主要是因为Java中有一种机制：        自动垃圾回收机制（GC机制）。    Java不容易导致内存泄漏    JVM负责调度GC机制，程序员不需要干涉。4、可移植性/跨平台    Java语言只要编写一次，可以做到到处运行。    例如：Java程序编写完之后，可以运行在windows操作系统上， 不需要做任何改动可以直接运行在Linux操作系统上，同样也可以运行在Mac os上。    一次编写，到处运行。（平台改变了，程序不需要改变。）    跨平台性：通过Java语言编写的应用程序在不同的系统平台上都可以运行    1.1、JVM这种机制实现了跨平台，那么这种机制优点和缺点是什么？        优点：一次编写到处运行，可以跨平台。        缺点：麻烦。对于运行Java程序来说必须要有一个JVM。就像你想在网页上看视频，你必须先安装一个flash一样。    1.2、Java语言可以编写病毒吗？        可以，没问题。但是很难让用户中毒。        中毒的一般都是java程序员。所以很少有人编写java的病毒脚本。</code></pre><p>4、Java完全/完美支持多线程并发</p><p>5、JDK、JRE、JVM三者之间的关系？<br>    JDK：Java开发工具箱<br>    JRE：Java运行环境<br>    JVM：Java虚拟机</p><pre><code>JDK包括JRE，JRE包括JVMJVM不可以独立安装。JRE和JDK都是可以独立安装的。也有单独的JDK的安装包，没有单独的JVM安装包。安装JDK的时候：JRE就自动安装了，同时JRE内部的JVM也就自动安装了。安装JRE的时候：JVM也就自动安装了。问题1：    假设你在软件公司开发了一个新的软件，现在要去客户那边给客户把项目部署一下，把项目跑起来，你需要安装JDK吗？        答：只需要安装JRE就可以了，JRE体积很小，安装非常便捷快速。问题2：    为什么安装JDK的时候会带一个JRE？        答：因为Java程序员开发完程序之后，要测试这个程序。        让这个程序运行起来，需要JRE。所以安装JDK的时候内部会自带一个JRE。</code></pre><p>6、Java程序的加载与执行的理解<br>    java程序从编写到最终运行经历了两个阶段：<br>1、编译阶段<br>    2、运行阶段</p><pre><code>注意：java程序员直接编写的java代码（普通文本）是无法执行被JVM识别的。java程序员编写到的java代码这种普通文本必须经过一个编译，将这个“普通文本代码”变成“字节码”，JVM能够识别“字节码”。java代码这种普通文本变成字节码的过程，被称为：编译。java代码这种普通文本被称为：java源代码。（你编写的代码是源代码）源代码不能直接执行，需要先进行编译，生成源代码对应的“字节码”JVM可以识别的是字节码。</code></pre><p>问题1：<br>    编译阶段和运行阶段可以在不同的操作系统上完成吗？<br>        答：完全可以，因为java是可跨平台的，可以做到一次编写，到处运行。<br>        在windows上编译<br>        编译之后生成“字节码”<br>        把“字节码”放在linux上运行。</p><p>问题2：<br>    Java源代码一旦编译之后，源代码可以删除吗？只留下字节码可以执行吗？<br>        答：完全可以执行，因为源代码不参与程序的执行过程。<br>        参与程序执行过程是字节码。<br>        但是最好不要删除源代码，因为有可能执行结果不是你需要的。<br>        当执行结果不是你需要的时候，你可以重新打开源代码进行修改，然后重新编译生成新的字节码，在重新执行。这样会有新的执行效果。</p><p>7、需要注意的是：<br>    1、放源代码的文件扩展名必须是：xxx.java<br>    2、编译生成的字节码文件扩展名是：xxx.class</p><pre><code>.java文件就是源文件，这个文件中编写源代码。.class文件就是字节码文件，这个文件是编译源代码而得到的。另外注意的是：    1个java文件是可以编译生成多个class文件的。    最终运行的是class文件。</code></pre><p>问题1：<br>    字节码文件是二进制文件吗？<br>        答：字节码文件不是二进制文件。<br>        如果是二进制的话，就不需要JVM了。<br>        因为操作系统可以直接执行二进制。</p><pre><code>Java程序的加载与执行的理解    java程序从编写到最终运行经历了两个阶段：    1、编译阶段    2、运行阶段注意：java程序员直接编写的java代码（普通文本）是无法执行被JVM识别的。java程序员编写到的java代码这种普通文本必须经过一个编译，将这个“普通文本代码”变成“字节码”，JVM能够识别“字节码”。java代码这种普通文本变成字节码的过程，被称为：编译。java代码这种普通文本被称为：java源代码。（你编写的代码时源代码）源代码不能直接执行，需要先进行编译，生成源代码对应的“字节码”JVM可以识别的是字节码。</code></pre><p>JAVA程序加载与运行：<br>    Java程序员从开发到最终运行经历了什么？<br>        第一步：在硬盘的某个位置，新建一个xxx.java文件<br>        第二步：使用记事本或者其他文本编辑器打开xxx.java文件<br>        第三步：在xxx.java文件中编写“符合java语法规则的”源代码。<br>        第四步：保存（一定要将xxx.java文件保存一下）<br>        第五步：使用编译器（javac【JDK安装后自带】）对xxx.java文件进行编译。<br>        第六步：如果xxx.java文件中编写的源代码是符合语法规则的，编译会通过，如果xxx.java文件中编写的源代码违背了语法规则，那么编译器会报错，编译器报错之后class文件是不会生成的，只有编译通过了之后才会生成class字节码文件。并且一个java源文件是可以生成多个class文件的。（编译实质上是检查语法）</p><pre><code>运行期：（可以在windows上，也可以在其他的os上。）    第七步：如果实在Linux上运行，需要将windows上生成的class文件拷贝过去，不需要拷贝源代码，真正运行的是字节码。（但是源代码也不要删除，有用）    第八步：使用JDK自带的一个命名/工具：java（负责运行的命令/工具）执行字节码    第九步：往下的步骤就全部交给JVM了，就不需要程序员干涉了。        JVM会将字节码文件全部装载进去，然后JVM对字节码进行解释（解释器负责将字节码解释为1010101010..等的二进制）    第十步：JVM会将生成的二进制代码交给os操作系统，操作系统会执行二进制码和硬件进行交互。⚠注意：在以上过程中，需要使用两个重要的命令    1、javac 命令，负责编译    2、java 命令，负责运行⚠当编译不能显示中文时，输入（两种方式）：    1、javac -encoding UTF-8 ***.java    2、记事本打开java源文件，另存为选择ANSI编码⚠当编译时出现：错误: 编码 GBK 的不可映射字符 (0xBA)    输入javac  -encoding utf-8  文件名.java</code></pre>]]></content>
      
      
      <categories>
          
          <category> 动力节点JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>出租车计价</title>
      <link href="/2022/01/16/%E5%87%BA%E7%A7%9F%E8%BD%A6%E8%AE%A1%E4%BB%B7-1/"/>
      <url>/2022/01/16/%E5%87%BA%E7%A7%9F%E8%BD%A6%E8%AE%A1%E4%BB%B7-1/</url>
      
        <content type="html"><![CDATA[<p>根据某城市普通出租车收费标准编写程序进行车费计算。具体标准如下：</p><ul><li>起步里程为3公里，起步费10元；</li><li>超起步里程后10公里内，每公里2元；</li><li>超过10公里以上的部分加收50%的回空补贴费，即每公里3元；</li><li>营运过程中，因路阻及乘客要求临时停车的，按每5分钟2元计收（不足5分钟则不收费）。<a id="more"></a></li></ul><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h2><p>输入在一行中给出输入行驶里程（单位为公里，精确到小数点后1位）与等待时间（整数，单位为分钟），其间以空格分隔。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h2><p>在一行中输出乘客应支付的车费（单位为元），结果四舍五入，保留到元。</p><h2 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h2><blockquote><p>2.6    2</p></blockquote><h2 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h2><blockquote><p>10</p></blockquote><hr><h2 id="JavaScript代码："><a href="#JavaScript代码：" class="headerlink" title="JavaScript代码："></a>JavaScript代码：</h2><pre class="line-numbers language-handlebars" data-language="handlebars"><code class="language-handlebars">const readline =require('readline');const rl=readline.createInterface(&#123;    input:process.stdin,&#125;);let buf=[]rl.on('line',(line)=>&#123;    buf.push(line)&#125;)rl.on('close',()=>&#123;    const arr=buf[0].split(' ');    let money=10;    if(arr[0]>3&amp;&amp;arr[0]&lt;=10)&#123;        money+=(arr[0]-3) *2;    &#125;else if(arr[0]>10)&#123;        money+=7*2;        money+=(arr[0]-10) *3;    &#125;     money+=Math.floor(arr[1]/5)*2;   console.log(Math.round(money));&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> PTA JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DAY01:DOS命令</title>
      <link href="/2020/08/15/DOS%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/08/15/DOS%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>1、常用DOS命令<br>    1.1、怎么打开DOS命令窗口？</p><a id="more"></a><blockquote><p><strong>win键+r（组合键）</strong>：可以打开”运行窗口”<br>在窗口文本框输入：<strong>cmd</strong><br>然后回车即可。</p></blockquote><p>1.2、什么是DOS命令呢？<br>在DOS命令窗口中才可以输入并执行DOS命令。<br>在最初的windows计算机中没有图形界面，只有DOS命令窗口。<br>也就是说通过执行DOS命令窗口可以完成文件的创建、保存、删除等一系列操作。</p><p>1.3、在DOS命令窗口中如何复制内容？</p><blockquote><p>选中内容- -&gt;按ctrl+c键复制- -&gt;在粘贴的位置点击鼠标右键<br>即可完成内容的复制粘贴</p></blockquote><p>1.4、DOS命令窗口中如何切换盘符？<br><strong>直接输入盘符即可。</strong><br>C：回车<br>D：回车<br>就🆗了。</p><p>当切换到D盘时，当前的根路径是：D:&gt;<br>当前路径就是当前所在的位置。</p><p>1.5、DOS命令窗口如何切换目录？<br>使用cd命令来完成目录的切换：cd即change directory（改变目录）<br>cd的语法格式为：</p><blockquote><p><strong>cd + 路径</strong></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200816001703606.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjYyOTkyOA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200816001758345.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjYyOTkyOA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 动力节点JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Hexo添加live2d看板娘</title>
      <link href="/2020/08/10/Hexo%E6%B7%BB%E5%8A%A0live2d%E7%9C%8B%E6%9D%BF%E5%A8%98%E6%A8%A1%E5%9E%8B/"/>
      <url>/2020/08/10/Hexo%E6%B7%BB%E5%8A%A0live2d%E7%9C%8B%E6%9D%BF%E5%A8%98%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>haruto这个模型 我爱了</p><a id="more"></a><p><img src="https://img-blog.csdnimg.cn/2020081012063219.PNG" alt="在这里插入图片描述"></p><h2 id="1-首先安装npm包"><a href="#1-首先安装npm包" class="headerlink" title="1.首先安装npm包"></a>1.首先安装npm包</h2><ul><li>配置环境变量 </li><li>打开cmd.exe,输入:</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//查看版本号是否安装成功$ <span class="token function">npm</span> -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-下载hexo"><a href="#2-下载hexo" class="headerlink" title="2.下载hexo"></a>2.下载hexo</h2><ul><li>输入命令</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//下载hexo客户端$ <span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>同样环境变量</li></ul><h2 id="3-在本地新建文件myblog-作为博客资源文件夹"><a href="#3-在本地新建文件myblog-作为博客资源文件夹" class="headerlink" title="3.在本地新建文件myblog(作为博客资源文件夹)"></a>3.在本地新建文件myblog(作为博客资源文件夹)</h2><ul><li>输入命令</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//初始化刚新建的myblog文件夹$ hexo init myblog$ <span class="token builtin class-name">cd</span> blog$ hexo instal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>这时blog就会生成以下文件</li></ul><p><img src="https://img-blog.csdnimg.cn/20200810115944114.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjYyOTkyOA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="4-第一个博客出来了，我们试试运行"><a href="#4-第一个博客出来了，我们试试运行" class="headerlink" title="4.第一个博客出来了，我们试试运行"></a>4.第一个博客出来了，我们试试运行</h2><ul><li>输入命令</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//启动命令<span class="token punctuation">(</span>完整命令:hexo server<span class="token punctuation">)</span>$ hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="5-回到当前窗口myblog路径输入命令："><a href="#5-回到当前窗口myblog路径输入命令：" class="headerlink" title="5.回到当前窗口myblog路径输入命令："></a>5.回到当前窗口myblog路径输入命令：</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//下载live2d包$ <span class="token function">npm</span> <span class="token function">install</span> --save hexo-helper-live2d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>再下载模型</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//下载模型$ <span class="token function">npm</span> <span class="token function">install</span> live2d-widget-model-hibiki<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>#更多模型选择</strong></p><p>live2d-widget-model-chitose<br>live2d-widget-model-epsilon2_1<br>live2d-widget-model-gf<br>live2d-widget-model-haru/01 (use npm install –save live2d-widget-model-haru)<br>live2d-widget-model-haru/02 (use npm install –save live2d-widget-model-haru)<br>live2d-widget-model-haruto<br>live2d-widget-model-hibiki<br>live2d-widget-model-hijiki<br>live2d-widget-model-izumi<br>live2d-widget-model-koharu<br>live2d-widget-model-miku<br>live2d-widget-model-ni-j<br>live2d-widget-model-nico<br>live2d-widget-model-nietzsche<br>live2d-widget-model-nipsilon<br>live2d-widget-model-nito<br>live2d-widget-model-shizuku<br>live2d-widget-model-tororo<br>live2d-widget-model-tsumiki<br>live2d-widget-model-unitychan<br>live2d-widget-model-wanko<br>live2d-widget-model-z16</p><h2 id="6-下载完模型后在根目录的-node-modules-文件夹下找到刚才下载的live2d-widget-model-hibiki模型，将其复制到新建目录-live2d-models-下"><a href="#6-下载完模型后在根目录的-node-modules-文件夹下找到刚才下载的live2d-widget-model-hibiki模型，将其复制到新建目录-live2d-models-下" class="headerlink" title="6.下载完模型后在根目录的 node_modules 文件夹下找到刚才下载的live2d-widget-model-hibiki模型，将其复制到新建目录 live2d_models 下"></a>6.下载完模型后在根目录的 node_modules 文件夹下找到刚才下载的live2d-widget-model-hibiki模型，将其复制到新建目录 live2d_models 下</h2><p><img src="https://img-blog.csdnimg.cn/20200810120349315.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjYyOTkyOA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="7-在根目录-config-yml配置下添加以下参数，唯一改变是参数model-use-是下载模型名称"><a href="#7-在根目录-config-yml配置下添加以下参数，唯一改变是参数model-use-是下载模型名称" class="headerlink" title="7.在根目录_config.yml配置下添加以下参数，唯一改变是参数model.use 是下载模型名称"></a>7.在根目录_config.yml配置下添加以下参数，唯一改变是参数model.use 是下载模型名称</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#参数配置</span>live2d: enable: <span class="token boolean">true</span> scriptFrom: <span class="token builtin class-name">local</span> pluginRootPath: live2dw/ pluginJsPath: lib/ pluginModelPath: assets/ tagMode: <span class="token boolean">false</span> debug: <span class="token boolean">false</span> model:   use: live2d-widget-model-haruto   <span class="token comment">#下载模型参数</span> display:   position: right   width: <span class="token number">150</span>   height: <span class="token number">300</span> mobile:   show: <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="最后再次运行-hexo-s，看效果，右下角萌萌哒看板娘出来了"><a href="#最后再次运行-hexo-s，看效果，右下角萌萌哒看板娘出来了" class="headerlink" title="最后再次运行$hexo s，看效果，右下角萌萌哒看板娘出来了"></a>最后再次运行$hexo s，看效果，右下角萌萌哒看板娘出来了</h2><p><img src="https://img-blog.csdnimg.cn/20200810120617570.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjYyOTkyOA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习日常 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
