<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>林凯锐的个人博客</title>
  
  <subtitle>山不过来，我便过去。</subtitle>
  <link href="https://www.carryone.top/atom.xml" rel="self"/>
  
  <link href="https://www.carryone.top/"/>
  <updated>2022-01-29T13:20:43.309Z</updated>
  <id>https://www.carryone.top/</id>
  
  <author>
    <name>林凯锐</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSS面试知识点总结</title>
    <link href="https://www.carryone.top/2022/01/29/Untitled/"/>
    <id>https://www.carryone.top/2022/01/29/Untitled/</id>
    <published>2022-01-29T13:18:00.000Z</published>
    <updated>2022-01-29T13:20:43.309Z</updated>
    
    <content type="html"><![CDATA[<p>本部分主要是笔者在复习 CSS 相关知识和一些相关面试题时所做的笔记，如果出现错误，希望大家指出！</p><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li><a href="#1%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8B%E6%A0%87%E5%87%86%E7%9A%84-css-%E7%9A%84%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B%E4%BD%8E%E7%89%88%E6%9C%AC-ie-%E7%9A%84%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C%E7%9A%84">1.介绍一下标准的 CSS 的盒子模型？低版本 IE 的盒子模型有什么不同的？</a></li><li><a href="#2css-%E9%80%89%E6%8B%A9%E7%AC%A6%E6%9C%89%E5%93%AA%E4%BA%9B">2.CSS 选择符有哪些？</a></li><li><a href="#3before-%E5%92%8Cafter-%E4%B8%AD%E5%8F%8C%E5%86%92%E5%8F%B7%E5%92%8C%E5%8D%95%E5%86%92%E5%8F%B7%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%E8%A7%A3%E9%87%8A%E4%B8%80%E4%B8%8B%E8%BF%99-2-%E4%B8%AA%E4%BC%AA%E5%85%83%E7%B4%A0%E7%9A%84%E4%BD%9C%E7%94%A8">3.::before 和:after 中双冒号和单冒号有什么区别？解释一下这 2 个伪元素的作用。</a></li><li><a href="#4%E4%BC%AA%E7%B1%BB%E4%B8%8E%E4%BC%AA%E5%85%83%E7%B4%A0%E7%9A%84%E5%8C%BA%E5%88%AB">4.伪类与伪元素的区别</a></li><li><a href="#5css-%E4%B8%AD%E5%93%AA%E4%BA%9B%E5%B1%9E%E6%80%A7%E5%8F%AF%E4%BB%A5%E7%BB%A7%E6%89%BF">5.CSS 中哪些属性可以继承？</a></li><li><a href="#6css-%E4%BC%98%E5%85%88%E7%BA%A7%E7%AE%97%E6%B3%95%E5%A6%82%E4%BD%95%E8%AE%A1%E7%AE%97">6.CSS 优先级算法如何计算？</a></li><li><a href="#7%E5%85%B3%E4%BA%8E%E4%BC%AA%E7%B1%BB-lvha-%E7%9A%84%E8%A7%A3%E9%87%8A">7.关于伪类 LVHA 的解释?</a></li><li><a href="#8css3-%E6%96%B0%E5%A2%9E%E4%BC%AA%E7%B1%BB%E6%9C%89%E9%82%A3%E4%BA%9B">8.CSS3 新增伪类有那些？</a></li><li><a href="#9%E5%A6%82%E4%BD%95%E5%B1%85%E4%B8%AD-div">9.如何居中 div？</a></li><li><a href="#10display-%E6%9C%89%E5%93%AA%E4%BA%9B%E5%80%BC%E8%AF%B4%E6%98%8E%E4%BB%96%E4%BB%AC%E7%9A%84%E4%BD%9C%E7%94%A8">10.display 有哪些值？说明他们的作用。</a></li><li><a href="#11position-%E7%9A%84%E5%80%BC-relative-%E5%92%8C-absolute-%E5%AE%9A%E4%BD%8D%E5%8E%9F%E7%82%B9%E6%98%AF">11.position 的值 relative 和 absolute 定位原点是？</a></li><li><a href="#12css3-%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B0%E7%89%B9%E6%80%A7%E6%A0%B9%E6%8D%AE%E9%A1%B9%E7%9B%AE%E5%9B%9E%E7%AD%94">12.CSS3 有哪些新特性？（根据项目回答）</a></li><li><a href="#13%E8%AF%B7%E8%A7%A3%E9%87%8A%E4%B8%80%E4%B8%8B-css3-%E7%9A%84-flex-box%E5%BC%B9%E6%80%A7%E7%9B%92%E5%B8%83%E5%B1%80%E6%A8%A1%E5%9E%8B%E4%BB%A5%E5%8F%8A%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF">13.请解释一下 CSS3 的 Flex box（弹性盒布局模型），以及适用场景？</a></li><li><a href="#14%E7%94%A8%E7%BA%AF-css-%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%89%E8%A7%92%E5%BD%A2%E7%9A%84%E5%8E%9F%E7%90%86%E6%98%AF%E4%BB%80%E4%B9%88">14.用纯 CSS 创建一个三角形的原理是什么？</a></li><li><a href="#15%E4%B8%80%E4%B8%AA%E6%BB%A1%E5%B1%8F%E5%93%81%E5%AD%97%E5%B8%83%E5%B1%80%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1">15.一个满屏品字布局如何设计?</a></li><li><a href="#16css-%E5%A4%9A%E5%88%97%E7%AD%89%E9%AB%98%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0">16.CSS 多列等高如何实现？</a></li><li><a href="#17%E7%BB%8F%E5%B8%B8%E9%81%87%E5%88%B0%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7%E6%9C%89%E5%93%AA%E4%BA%9B%E5%8E%9F%E5%9B%A0%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%E6%98%AF%E4%BB%80%E4%B9%88%E5%B8%B8%E7%94%A8-hack-%E7%9A%84%E6%8A%80%E5%B7%A7">17.经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用 hack 的技巧？</a></li><li><a href="#18li-%E4%B8%8E-li-%E4%B9%8B%E9%97%B4%E6%9C%89%E7%9C%8B%E4%B8%8D%E8%A7%81%E7%9A%84%E7%A9%BA%E7%99%BD%E9%97%B4%E9%9A%94%E6%98%AF%E4%BB%80%E4%B9%88%E5%8E%9F%E5%9B%A0%E5%BC%95%E8%B5%B7%E7%9A%84%E6%9C%89%E4%BB%80%E4%B9%88%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95">18.li 与 li 之间有看不见的空白间隔是什么原因引起的？有什么解决办法？</a></li><li><a href="#19%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%88%9D%E5%A7%8B%E5%8C%96-css-%E6%A0%B7%E5%BC%8F">19.为什么要初始化 CSS 样式？</a></li><li><a href="#20%E4%BB%80%E4%B9%88%E6%98%AF%E5%8C%85%E5%90%AB%E5%9D%97%E5%AF%B9%E4%BA%8E%E5%8C%85%E5%90%AB%E5%9D%97%E7%9A%84%E7%90%86%E8%A7%A3">20.什么是包含块，对于包含块的理解?</a></li><li><a href="#21css-%E9%87%8C%E7%9A%84-visibility-%E5%B1%9E%E6%80%A7%E6%9C%89%E4%B8%AA-collapse-%E5%B1%9E%E6%80%A7%E5%80%BC%E6%98%AF%E5%B9%B2%E5%98%9B%E7%94%A8%E7%9A%84%E5%9C%A8%E4%B8%8D%E5%90%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8B%E4%BB%A5%E5%90%8E%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB">21.CSS 里的 visibility 属性有个 collapse 属性值是干嘛用的？在不同浏览器下以后什么区别？</a></li><li><a href="#22widthauto-%E5%92%8C-width100%E7%9A%84%E5%8C%BA%E5%88%AB">22.width:auto 和 width:100\x 的区别</a></li><li><a href="#23%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D%E5%85%83%E7%B4%A0%E4%B8%8E%E9%9D%9E%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D%E5%85%83%E7%B4%A0%E7%9A%84%E7%99%BE%E5%88%86%E6%AF%94%E8%AE%A1%E7%AE%97%E7%9A%84%E5%8C%BA%E5%88%AB">23.绝对定位元素与非绝对定位元素的百分比计算的区别</a></li><li><a href="#24%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D%E4%BD%BF%E7%94%A8%E5%9B%BE%E7%89%87-base64-%E7%BC%96%E7%A0%81%E7%9A%84%E4%BC%98%E7%82%B9%E5%92%8C%E7%BC%BA%E7%82%B9">24.简单介绍使用图片 base64 编码的优点和缺点。</a></li><li><a href="#25displayposition%E5%92%8Cfloat%E7%9A%84%E7%9B%B8%E4%BA%92%E5%85%B3%E7%B3%BB">25.’display’、’position’和’float’的相互关系？</a></li><li><a href="#26margin-%E9%87%8D%E5%8F%A0%E9%97%AE%E9%A2%98%E7%9A%84%E7%90%86%E8%A7%A3">26.margin 重叠问题的理解。</a></li><li><a href="#27%E5%AF%B9-bfc-%E8%A7%84%E8%8C%83%E5%9D%97%E7%BA%A7%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%B8%8A%E4%B8%8B%E6%96%87block-formatting-context%E7%9A%84%E7%90%86%E8%A7%A3">27.对 BFC 规范（块级格式化上下文：block formatting context）的理解？</a></li><li><a href="#28ifc-%E6%98%AF%E4%BB%80%E4%B9%88">28.IFC 是什么？</a></li><li><a href="#29%E8%AF%B7%E8%A7%A3%E9%87%8A%E4%B8%80%E4%B8%8B%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%E7%9A%84%E6%96%B9%E5%BC%8F">29.请解释一下为什么需要清除浮动？清除浮动的方式</a></li><li><a href="#30%E4%BD%BF%E7%94%A8-clear-%E5%B1%9E%E6%80%A7%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%E7%9A%84%E5%8E%9F%E7%90%86">30.使用 clear 属性清除浮动的原理？</a></li><li><a href="#31zoom1-%E7%9A%84%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%E5%8E%9F%E7%90%86">31.zoom:1 的清除浮动原理?</a></li><li><a href="#32%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%9A%84%E5%B8%83%E5%B1%80%E7%94%A8%E8%BF%87%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2%E5%90%97">32.移动端的布局用过媒体查询吗？</a></li><li><a href="#33%E4%BD%BF%E7%94%A8-css-%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8%E5%90%97%E5%96%9C%E6%AC%A2%E5%93%AA%E4%B8%AA">33.使用 CSS 预处理器吗？喜欢哪个？</a></li><li><a href="#34css-%E4%BC%98%E5%8C%96%E6%8F%90%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84%E6%96%B9%E6%B3%95%E6%9C%89%E5%93%AA%E4%BA%9B">34.CSS 优化、提高性能的方法有哪些？</a></li><li><a href="#35%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E6%80%8E%E6%A0%B7%E8%A7%A3%E6%9E%90-css-%E9%80%89%E6%8B%A9%E5%99%A8%E7%9A%84">35.浏览器是怎样解析 CSS 选择器的？</a></li><li><a href="#36%E5%9C%A8%E7%BD%91%E9%A1%B5%E4%B8%AD%E5%BA%94%E8%AF%A5%E4%BD%BF%E7%94%A8%E5%A5%87%E6%95%B0%E8%BF%98%E6%98%AF%E5%81%B6%E6%95%B0%E7%9A%84%E5%AD%97%E4%BD%93%E4%B8%BA%E4%BB%80%E4%B9%88%E5%91%A2">36.在网页中应该使用奇数还是偶数的字体？为什么呢？</a></li><li><a href="#37margin-%E5%92%8C-padding-%E5%88%86%E5%88%AB%E9%80%82%E5%90%88%E4%BB%80%E4%B9%88%E5%9C%BA%E6%99%AF%E4%BD%BF%E7%94%A8">37.margin 和 padding 分别适合什么场景使用？</a></li><li><a href="#38%E6%8A%BD%E7%A6%BB%E6%A0%B7%E5%BC%8F%E6%A8%A1%E5%9D%97%E6%80%8E%E4%B9%88%E5%86%99%E8%AF%B4%E5%87%BA%E6%80%9D%E8%B7%AF%E6%9C%89%E6%97%A0%E5%AE%9E%E8%B7%B5%E7%BB%8F%E9%AA%8C%E9%98%BF%E9%87%8C%E8%88%AA%E6%97%85%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98">38.抽离样式模块怎么写，说出思路，有无实践经验？[阿里航旅的面试题]</a></li><li><a href="#39%E7%AE%80%E5%8D%95%E8%AF%B4%E4%B8%80%E4%B8%8B-css3-%E7%9A%84-all-%E5%B1%9E%E6%80%A7">39.简单说一下 css3 的 all 属性。</a></li><li><a href="#40%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E5%BB%BA%E8%AE%AE%E4%BD%BF%E7%94%A8%E7%BB%9F%E9%85%8D%E7%AC%A6%E5%88%9D%E5%A7%8B%E5%8C%96-css-%E6%A0%B7%E5%BC%8F">40.为什么不建议使用统配符初始化 css 样式。</a></li><li><a href="#41absolute-%E7%9A%84-containingblock%E5%8C%85%E5%90%AB%E5%9D%97%E8%AE%A1%E7%AE%97%E6%96%B9%E5%BC%8F%E8%B7%9F%E6%AD%A3%E5%B8%B8%E6%B5%81%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C">41.absolute 的 containingblock（包含块）计算方式跟正常流有什么不同？</a></li><li><a href="#42%E5%AF%B9%E4%BA%8E-haslayout-%E7%9A%84%E7%90%86%E8%A7%A3">42.对于 hasLayout 的理解？</a></li><li><a href="#43%E5%85%83%E7%B4%A0%E7%AB%96%E5%90%91%E7%9A%84%E7%99%BE%E5%88%86%E6%AF%94%E8%AE%BE%E5%AE%9A%E6%98%AF%E7%9B%B8%E5%AF%B9%E4%BA%8E%E5%AE%B9%E5%99%A8%E7%9A%84%E9%AB%98%E5%BA%A6%E5%90%97">43.元素竖向的百分比设定是相对于容器的高度吗？</a></li><li><a href="#44%E5%85%A8%E5%B1%8F%E6%BB%9A%E5%8A%A8%E7%9A%84%E5%8E%9F%E7%90%86%E6%98%AF%E4%BB%80%E4%B9%88%E7%94%A8%E5%88%B0%E4%BA%86-css-%E7%9A%84%E5%93%AA%E4%BA%9B%E5%B1%9E%E6%80%A7%E5%BE%85%E6%B7%B1%E5%85%A5%E5%AE%9E%E8%B7%B5">44.全屏滚动的原理是什么？用到了 CSS 的哪些属性？（待深入实践）</a></li><li><a href="#45%E4%BB%80%E4%B9%88%E6%98%AF%E5%93%8D%E5%BA%94%E5%BC%8F%E8%AE%BE%E8%AE%A1%E5%93%8D%E5%BA%94%E5%BC%8F%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%E6%98%AF%E4%BB%80%E4%B9%88%E5%A6%82%E4%BD%95%E5%85%BC%E5%AE%B9%E4%BD%8E%E7%89%88%E6%9C%AC%E7%9A%84-ie%E5%BE%85%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3">45.什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的 IE？（待深入了解）</a></li><li><a href="#46%E8%A7%86%E5%B7%AE%E6%BB%9A%E5%8A%A8%E6%95%88%E6%9E%9C%E5%A6%82%E4%BD%95%E7%BB%99%E6%AF%8F%E9%A1%B5%E5%81%9A%E4%B8%8D%E5%90%8C%E7%9A%84%E5%8A%A8%E7%94%BB%E5%9B%9E%E5%88%B0%E9%A1%B6%E9%83%A8%E5%90%91%E4%B8%8B%E6%BB%91%E5%8A%A8%E8%A6%81%E5%86%8D%E6%AC%A1%E5%87%BA%E7%8E%B0%E5%92%8C%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E5%88%86%E5%88%AB%E6%80%8E%E4%B9%88%E5%81%9A">46.视差滚动效果，如何给每页做不同的动画？（回到顶部，向下滑动要再次出现，和只出现一次分别怎么做？）</a></li><li><a href="#47%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9-chrome-%E8%AE%B0%E4%BD%8F%E5%AF%86%E7%A0%81%E5%90%8E%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%85%85%E8%A1%A8%E5%8D%95%E7%9A%84%E9%BB%84%E8%89%B2%E8%83%8C%E6%99%AF">47.如何修改 chrome 记住密码后自动填充表单的黄色背景？</a></li><li><a href="#48%E6%80%8E%E4%B9%88%E8%AE%A9-chrome-%E6%94%AF%E6%8C%81%E5%B0%8F%E4%BA%8E-12px-%E7%9A%84%E6%96%87%E5%AD%97">48.怎么让 Chrome 支持小于 12px 的文字？</a></li><li><a href="#49%E8%AE%A9%E9%A1%B5%E9%9D%A2%E9%87%8C%E7%9A%84%E5%AD%97%E4%BD%93%E5%8F%98%E6%B8%85%E6%99%B0%E5%8F%98%E7%BB%86%E7%94%A8-css-%E6%80%8E%E4%B9%88%E5%81%9A">49.让页面里的字体变清晰，变细用 CSS 怎么做？</a></li><li><a href="#50font-style-%E5%B1%9E%E6%80%A7%E4%B8%AD-italic-%E5%92%8C-oblique-%E7%9A%84%E5%8C%BA%E5%88%AB">50.font-style 属性中 italic 和 oblique 的区别？</a></li><li><a href="#51%E8%AE%BE%E5%A4%87%E5%83%8F%E7%B4%A0css-%E5%83%8F%E7%B4%A0%E8%AE%BE%E5%A4%87%E7%8B%AC%E7%AB%8B%E5%83%8F%E7%B4%A0dprppi-%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB">51.设备像素、css 像素、设备独立像素、dpr、ppi 之间的区别？</a></li><li><a href="#52layout-viewportvisual-viewport-%E5%92%8C-ideal-viewport-%E7%9A%84%E5%8C%BA%E5%88%AB">52.layout viewport、visual viewport 和 ideal viewport 的区别？</a></li><li><a href="#53positionfixed%E5%9C%A8-android-%E4%B8%8B%E6%97%A0%E6%95%88%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86">53.position:fixed;在 android 下无效怎么处理？</a></li><li><a href="#54%E5%A6%82%E6%9E%9C%E9%9C%80%E8%A6%81%E6%89%8B%E5%8A%A8%E5%86%99%E5%8A%A8%E7%94%BB%E4%BD%A0%E8%AE%A4%E4%B8%BA%E6%9C%80%E5%B0%8F%E6%97%B6%E9%97%B4%E9%97%B4%E9%9A%94%E6%98%AF%E5%A4%9A%E4%B9%85%E4%B8%BA%E4%BB%80%E4%B9%88%E9%98%BF%E9%87%8C">54.如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里）</a></li><li><a href="#55%E5%A6%82%E4%BD%95%E8%AE%A9%E5%8E%BB%E9%99%A4-inline-block-%E5%85%83%E7%B4%A0%E9%97%B4%E9%97%B4%E8%B7%9D">55.如何让去除 inline-block 元素间间距？</a></li><li><a href="#56overflowscroll-%E6%97%B6%E4%B8%8D%E8%83%BD%E5%B9%B3%E6%BB%91%E6%BB%9A%E5%8A%A8%E7%9A%84%E9%97%AE%E9%A2%98%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86">56.overflow:scroll 时不能平滑滚动的问题怎么处理？</a></li><li><a href="#57%E6%9C%89%E4%B8%80%E4%B8%AA%E9%AB%98%E5%BA%A6%E8%87%AA%E9%80%82%E5%BA%94%E7%9A%84-div%E9%87%8C%E9%9D%A2%E6%9C%89%E4%B8%A4%E4%B8%AA-div%E4%B8%80%E4%B8%AA%E9%AB%98%E5%BA%A6-100px%E5%B8%8C%E6%9C%9B%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%A1%AB%E6%BB%A1%E5%89%A9%E4%B8%8B%E7%9A%84%E9%AB%98%E5%BA%A6">57.有一个高度自适应的 div，里面有两个 div，一个高度 100px，希望另一个填满剩下的高度。</a></li><li><a href="#58pngjpggif-%E8%BF%99%E4%BA%9B%E5%9B%BE%E7%89%87%E6%A0%BC%E5%BC%8F%E8%A7%A3%E9%87%8A%E4%B8%80%E4%B8%8B%E5%88%86%E5%88%AB%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E7%94%A8%E6%9C%89%E6%B2%A1%E6%9C%89%E4%BA%86%E8%A7%A3%E8%BF%87-webp">58.png、jpg、gif 这些图片格式解释一下，分别什么时候用。有没有了解过 webp？</a></li><li><a href="#59%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E6%94%AF%E6%8C%81-webp-%E6%A0%BC%E5%BC%8F%E5%9B%BE%E7%89%87">59.浏览器如何判断是否支持 webp 格式图片</a></li><li><a href="#60%E4%BB%80%E4%B9%88%E6%98%AF-cookie-%E9%9A%94%E7%A6%BB%E6%88%96%E8%80%85%E8%AF%B4%E8%AF%B7%E6%B1%82%E8%B5%84%E6%BA%90%E7%9A%84%E6%97%B6%E5%80%99%E4%B8%8D%E8%A6%81%E8%AE%A9%E5%AE%83%E5%B8%A6-cookie-%E6%80%8E%E4%B9%88%E5%81%9A">60.什么是 Cookie 隔离？（或者说：请求资源的时候不要让它带 cookie 怎么做）</a></li><li><a href="#61style-%E6%A0%87%E7%AD%BE%E5%86%99%E5%9C%A8-body-%E5%90%8E%E4%B8%8E-body-%E5%89%8D%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB">61.style 标签写在 body 后与 body 前有什么区别？</a></li><li><a href="#62%E4%BB%80%E4%B9%88%E6%98%AF-css-%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8%E5%90%8E%E5%A4%84%E7%90%86%E5%99%A8">62.什么是 CSS 预处理器/后处理器？</a></li><li><a href="#63%E9%98%90%E8%BF%B0%E4%B8%80%E4%B8%8B-csssprites">63.阐述一下 CSSSprites</a></li><li><a href="#64%E4%BD%BF%E7%94%A8-rem-%E5%B8%83%E5%B1%80%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9">64.使用 rem 布局的优缺点？</a></li><li><a href="#65%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84-css-%E5%B8%83%E5%B1%80">65.几种常见的 CSS 布局</a></li><li><a href="#66%E7%94%BB%E4%B8%80%E6%9D%A1-05px-%E7%9A%84%E7%BA%BF">66.画一条 0.5px 的线</a></li><li><a href="#67transition-%E5%92%8C-animation-%E7%9A%84%E5%8C%BA%E5%88%AB">67.transition 和 animation 的区别</a></li><li><a href="#68%E4%BB%80%E4%B9%88%E6%98%AF%E9%A6%96%E9%80%89%E6%9C%80%E5%B0%8F%E5%AE%BD%E5%BA%A6">68.什么是首选最小宽度？</a></li><li><a href="#69%E4%B8%BA%E4%BB%80%E4%B9%88-height100%E4%BC%9A%E6%97%A0%E6%95%88">69.为什么 height:100\x 会无效？</a></li><li><a href="#70min-widthmax-width-%E5%92%8C-min-heightmax-height-%E5%B1%9E%E6%80%A7%E9%97%B4%E7%9A%84%E8%A6%86%E7%9B%96%E8%A7%84%E5%88%99">70.min-width/max-width 和 min-height/max-height 属性间的覆盖规则？</a></li><li><a href="#71%E5%86%85%E8%81%94%E7%9B%92%E6%A8%A1%E5%9E%8B%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5">71.内联盒模型基本概念</a></li><li><a href="#72%E4%BB%80%E4%B9%88%E6%98%AF%E5%B9%BD%E7%81%B5%E7%A9%BA%E7%99%BD%E8%8A%82%E7%82%B9">72.什么是幽灵空白节点？</a></li><li><a href="#73%E4%BB%80%E4%B9%88%E6%98%AF%E6%9B%BF%E6%8D%A2%E5%85%83%E7%B4%A0">73.什么是替换元素？</a></li><li><a href="#74%E6%9B%BF%E6%8D%A2%E5%85%83%E7%B4%A0%E7%9A%84%E8%AE%A1%E7%AE%97%E8%A7%84%E5%88%99">74.替换元素的计算规则？</a></li><li><a href="#75content-%E4%B8%8E%E6%9B%BF%E6%8D%A2%E5%85%83%E7%B4%A0%E7%9A%84%E5%85%B3%E7%B3%BB">75.content 与替换元素的关系？</a></li><li><a href="#76marginauto-%E7%9A%84%E5%A1%AB%E5%85%85%E8%A7%84%E5%88%99">76.margin:auto 的填充规则？</a></li><li><a href="#77margin-%E6%97%A0%E6%95%88%E7%9A%84%E6%83%85%E5%BD%A2">77.margin 无效的情形</a></li><li><a href="#78border-%E7%9A%84%E7%89%B9%E6%AE%8A%E6%80%A7">78.border 的特殊性？</a></li><li><a href="#79%E4%BB%80%E4%B9%88%E6%98%AF%E5%9F%BA%E7%BA%BF%E5%92%8C-x-height">79.什么是基线和 x-height？</a></li><li><a href="#80line-height-%E7%9A%84%E7%89%B9%E6%AE%8A%E6%80%A7">80.line-height 的特殊性？</a></li><li><a href="#81vertical-align-%E7%9A%84%E7%89%B9%E6%AE%8A%E6%80%A7">81.vertical-align 的特殊性？</a></li><li><a href="#82overflow-%E7%9A%84%E7%89%B9%E6%AE%8A%E6%80%A7">82.overflow 的特殊性？</a></li><li><a href="#83%E6%97%A0%E4%BE%9D%E8%B5%96%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D%E6%98%AF%E4%BB%80%E4%B9%88">83.无依赖绝对定位是什么？</a></li><li><a href="#84absolute-%E4%B8%8E-overflow-%E7%9A%84%E5%85%B3%E7%B3%BB">84.absolute 与 overflow 的关系？</a></li><li><a href="#85clip-%E8%A3%81%E5%89%AA%E6%98%AF%E4%BB%80%E4%B9%88">85.clip 裁剪是什么？</a></li><li><a href="#86relative-%E7%9A%84%E7%89%B9%E6%AE%8A%E6%80%A7">86.relative 的特殊性？</a></li><li><a href="#87%E4%BB%80%E4%B9%88%E6%98%AF%E5%B1%82%E5%8F%A0%E4%B8%8A%E4%B8%8B%E6%96%87">87.什么是层叠上下文？</a></li><li><a href="#88%E4%BB%80%E4%B9%88%E6%98%AF%E5%B1%82%E5%8F%A0%E6%B0%B4%E5%B9%B3">88.什么是层叠水平？</a></li><li><a href="#89%E5%85%83%E7%B4%A0%E7%9A%84%E5%B1%82%E5%8F%A0%E9%A1%BA%E5%BA%8F">89.元素的层叠顺序？</a></li><li><a href="#90%E5%B1%82%E5%8F%A0%E5%87%86%E5%88%99">90.层叠准则？</a></li><li><a href="#91font-weight-%E7%9A%84%E7%89%B9%E6%AE%8A%E6%80%A7">91.font-weight 的特殊性？</a></li><li><a href="#92text-indent-%E7%9A%84%E7%89%B9%E6%AE%8A%E6%80%A7">92.text-indent 的特殊性？</a></li><li><a href="#93letter-spacing-%E4%B8%8E%E5%AD%97%E7%AC%A6%E9%97%B4%E8%B7%9D">93.letter-spacing 与字符间距？</a></li><li><a href="#94word-spacing-%E4%B8%8E%E5%8D%95%E8%AF%8D%E9%97%B4%E8%B7%9D">94.word-spacing 与单词间距？</a></li><li><a href="#95white-space-%E4%B8%8E%E6%8D%A2%E8%A1%8C%E5%92%8C%E7%A9%BA%E6%A0%BC%E7%9A%84%E6%8E%A7%E5%88%B6">95.white-space 与换行和空格的控制？</a></li><li><a href="#96%E9%9A%90%E8%97%8F%E5%85%83%E7%B4%A0%E7%9A%84-background-image-%E5%88%B0%E5%BA%95%E5%8A%A0%E4%B8%8D%E5%8A%A0%E8%BD%BD">96.隐藏元素的 background-image 到底加不加载？</a></li><li><a href="#97%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%8D%95%E8%A1%8C%E5%A4%9A%E8%A1%8C%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E7%9A%84%E7%9C%81%E7%95%A5">97.如何实现单行／多行文本溢出的省略（…）？</a></li><li><a href="#98%E5%B8%B8%E8%A7%81%E7%9A%84%E5%85%83%E7%B4%A0%E9%9A%90%E8%97%8F%E6%96%B9%E5%BC%8F">98.常见的元素隐藏方式？</a></li><li><a href="#99css-%E5%AE%9E%E7%8E%B0%E4%B8%8A%E4%B8%8B%E5%9B%BA%E5%AE%9A%E4%B8%AD%E9%97%B4%E8%87%AA%E9%80%82%E5%BA%94%E5%B8%83%E5%B1%80">99.css 实现上下固定中间自适应布局？</a></li><li><a href="#100css-%E4%B8%A4%E6%A0%8F%E5%B8%83%E5%B1%80%E7%9A%84%E5%AE%9E%E7%8E%B0">100.css 两栏布局的实现？</a></li><li><a href="#101css-%E4%B8%89%E6%A0%8F%E5%B8%83%E5%B1%80%E7%9A%84%E5%AE%9E%E7%8E%B0">101.css 三栏布局的实现？</a></li><li><a href="#102%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%AE%BD%E9%AB%98%E8%87%AA%E9%80%82%E5%BA%94%E7%9A%84%E6%AD%A3%E6%96%B9%E5%BD%A2">102.实现一个宽高自适应的正方形</a></li><li><a href="#103%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E4%B8%89%E8%A7%92%E5%BD%A2">103.实现一个三角形</a></li><li><a href="#104%E4%B8%80%E4%B8%AA%E8%87%AA%E9%80%82%E5%BA%94%E7%9F%A9%E5%BD%A2%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E4%B8%94%E5%AE%BD%E9%AB%98%E6%AF%94%E4%B8%BA-21">104.一个自适应矩形，水平垂直居中，且宽高比为 2:1</a></li><li><a href="#105-%E4%BD%A0%E7%9F%A5%E9%81%93-css-%E4%B8%AD%E4%B8%8D%E5%90%8C%E5%B1%9E%E6%80%A7%E8%AE%BE%E7%BD%AE%E4%B8%BA%E7%99%BE%E5%88%86%E6%AF%94%E6%97%B6%E5%AF%B9%E5%BA%94%E7%9A%84%E8%AE%A1%E7%AE%97%E5%9F%BA%E5%87%86">105.你知道 CSS 中不同属性设置为百分比\x 时对应的计算基准？</a></li></ul><h4 id="1-介绍一下标准的-CSS-的盒子模型？低版本-IE-的盒子模型有什么不同的？"><a href="#1-介绍一下标准的-CSS-的盒子模型？低版本-IE-的盒子模型有什么不同的？" class="headerlink" title="1.介绍一下标准的 CSS 的盒子模型？低版本 IE 的盒子模型有什么不同的？"></a>1.介绍一下标准的 CSS 的盒子模型？低版本 IE 的盒子模型有什么不同的？</h4><p>相关知识点：</p><pre class="line-numbers language-none"><code class="language-none">（1）有两种盒子模型：IE盒模型（border-box）、W3C标准盒模型（content-box）（2）盒模型：分为内容（content）、填充（padding）、边界（margin）、边框（border）四个部分IE盒模型和W3C标准盒模型的区别：（1）W3C标准盒模型：属性width，height只包含内容content，不包含border和padding（2）IE盒模型：属性width，height包含content、border和padding，指的是content+padding+border。在ie8+浏览器中使用哪个盒模型可以由box-sizing（CSS新增的属性）控制，默认值为content-box，即标准盒模型；如果将box-sizing设为border-box则用的是IE盒模型。如果在ie6，7，8中DOCTYPE缺失会将盒子模型解释为IE盒子模型。若在页面中声明了DOCTYPE类型，所有的浏览器都会把盒模型解释为W3C盒模型。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>回答：</p><pre class="line-numbers language-none"><code class="language-none">盒模型都是由四个部分组成的，分别是margin、border、padding和content。标准盒模型和IE盒模型的区别在于设置width和height时，所对应的范围不同。标准盒模型的width和height属性的范围只包含了content，而IE盒模型的width和height属性的范围包含了border、padding和content。一般来说，我们可以通过修改元素的box-sizing属性来改变元素的盒模型。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>详细的资料可以参考：<br><a href="https://juejin.im/post/59ef72f5f265da4320026f76">《CSS 盒模型详解》</a></p><h4 id="2-CSS-选择符有哪些？"><a href="#2-CSS-选择符有哪些？" class="headerlink" title="2.CSS 选择符有哪些？"></a>2.CSS 选择符有哪些？</h4><pre class="line-numbers language-none"><code class="language-none">（1）id选择器（#myid）（2）类选择器（.myclassname）（3）标签选择器（div,h1,p）（4）后代选择器（h1 p）（5）相邻后代选择器（子）选择器（ul&gt;li）（6）兄弟选择器（li~a）（7）相邻兄弟选择器（li+a）（8）属性选择器（a[rel&#x3D;&quot;external&quot;]）（9）伪类选择器（a:hover,li:nth-child）（10）伪元素选择器（::before、::after）（11）通配符选择器（*）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-before-和-after-中双冒号和单冒号有什么区别？解释一下这-2-个伪元素的作用。"><a href="#3-before-和-after-中双冒号和单冒号有什么区别？解释一下这-2-个伪元素的作用。" class="headerlink" title="3.::before 和:after 中双冒号和单冒号有什么区别？解释一下这 2 个伪元素的作用。"></a>3.::before 和:after 中双冒号和单冒号有什么区别？解释一下这 2 个伪元素的作用。</h4><p>相关知识点：</p><pre class="line-numbers language-none"><code class="language-none">单冒号（:）用于CSS3伪类，双冒号（::）用于CSS3伪元素。（伪元素由双冒号和伪元素名称组成）双冒号是在当前规范中引入的，用于区分伪类和伪元素。不过浏览器需要同时支持旧的已经存在的伪元素写法，比如:first-line、:first-letter、:before、:after等，而新的在CSS3中引入的伪元素则不允许再支持旧的单冒号的写法。想让插入的内容出现在其它内容前，使用::before，否者，使用::after；在代码顺序上，::after生成的内容也比::before生成的内容靠后。如果按堆栈视角，::after生成的内容会在::before生成的内容之上。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>回答：</p><pre class="line-numbers language-none"><code class="language-none">在css3中使用单冒号来表示伪类，用双冒号来表示伪元素。但是为了兼容已有的伪元素的写法，在一些浏览器中也可以使用单冒号来表示伪元素。伪类一般匹配的是元素的一些特殊状态，如hover、link等，而伪元素一般匹配的特殊的位置，比如after、before等。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-伪类与伪元素的区别"><a href="#4-伪类与伪元素的区别" class="headerlink" title="4.伪类与伪元素的区别"></a>4.伪类与伪元素的区别</h4><pre class="line-numbers language-none"><code class="language-none">css引入伪类和伪元素概念是为了格式化文档树以外的信息。也就是说，伪类和伪元素是用来修饰不在文档树中的部分，比如，一句话中的第一个字母，或者是列表中的第一个元素。伪类用于当已有的元素处于某个状态时，为其添加对应的样式，这个状态是根据用户行为而动态变化的。比如说，当用户悬停在指定的元素时，我们可以通过:hover来描述这个元素的状态。伪元素用于创建一些不在文档树中的元素，并为其添加样式。它们允许我们为元素的某些部分设置样式。比如说，我们可以通过::before来在一个元素前增加一些文本，并为这些文本添加样式。虽然用户可以看到这些文本，但是这些文本实际上不在文档树中。有时你会发现伪元素使用了两个冒号（::）而不是一个冒号（:）。这是CSS3的一部分，并尝试区分伪类和伪元素。大多数浏览器都支持这两个值。按照规则应该使用（::）而不是（:），从而区分伪类和伪元素。但是，由于在旧版本的W3C规范并未对此进行特别区分，因此目前绝大多数的浏览器都支持使用这两种方式表示伪元素。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>详细资料可以参考：<br><a href="http://www.alloyteam.com/2016/05/summary-of-pseudo-classes-and-pseudo-elements/">《总结伪类与伪元素》</a></p><h4 id="5-CSS-中哪些属性可以继承？"><a href="#5-CSS-中哪些属性可以继承？" class="headerlink" title="5.CSS 中哪些属性可以继承？"></a>5.CSS 中哪些属性可以继承？</h4><p>相关资料：</p><pre class="line-numbers language-none"><code class="language-none">每个CSS属性定义的概述都指出了这个属性是默认继承的，还是默认不继承的。这决定了当你没有为元素的属性指定值时该如何计算值。当元素的一个继承属性没有指定值时，则取父元素的同属性的计算值。只有文档根元素取该属性的概述中给定的初始值（这里的意思应该是在该属性本身的定义中的默认值）。当元素的一个非继承属性（在Mozilla code里有时称之为reset property）没有指定值时，则取属性的初始值initial value（该值在该属性的概述里被指定）。有继承性的属性：（1）字体系列属性font、font-family、font-weight、font-size、font-style、font-variant、font-stretch、font-size-adjust（2）文本系列属性text-indent、text-align、text-shadow、line-height、word-spacing、letter-spacing、text-transform、direction、color（3）表格布局属性caption-side border-collapse empty-cells（4）列表属性list-style-type、list-style-image、list-style-position、list-style（5）光标属性cursor（6）元素可见性visibility（7）还有一些不常用的；speak，page，设置嵌套引用的引号类型quotes等属性注意：当一个属性不是继承属性时，可以使用inherit关键字指定一个属性应从父元素继承它的值，inherit关键字用于显式地指定继承性，可用于任何继承性&#x2F;非继承性属性。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>回答：</p><pre class="line-numbers language-none"><code class="language-none">每一个属性在定义中都给出了这个属性是否具有继承性，一个具有继承性的属性会在没有指定值的时候，会使用父元素的同属性的值来作为自己的值。一般具有继承性的属性有，字体相关的属性，font-size和font-weight等。文本相关的属性，color和text-align等。表格的一些布局属性、列表属性如list-style等。还有光标属性cursor、元素可见性visibility。当一个属性不是继承属性的时候，我们也可以通过将它的值设置为inherit来使它从父元素那获取同名的属性值来继承。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>详细的资料可以参考：<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/inheritance">《继承属性》</a><br><a href="https://www.jianshu.com/p/34044e3c9317">《CSS 有哪些属性可以继承？》</a></p><h4 id="6-CSS-优先级算法如何计算？"><a href="#6-CSS-优先级算法如何计算？" class="headerlink" title="6.CSS 优先级算法如何计算？"></a>6.CSS 优先级算法如何计算？</h4><p>相关知识点：</p><pre class="line-numbers language-none"><code class="language-none">CSS的优先级是根据样式声明的特殊性值来判断的。选择器的特殊性值分为四个等级，如下：（1）标签内选择符x,0,0,0（2）ID选择符0,x,0,0（3）class选择符&#x2F;属性选择符&#x2F;伪类选择符    0,0,x,0（4）元素和伪元素选择符0,0,0,x计算方法：（1）每个等级的初始值为0（2）每个等级的叠加为选择器出现的次数相加（3）不可进位，比如0,99,99,99（4）依次表示为：0,0,0,0（5）每个等级计数之间没关联（6）等级判断从左向右，如果某一位数值相同，则判断下一位数值（7）如果两个优先级相同，则最后出现的优先级高，!important也适用（8）通配符选择器的特殊性值为：0,0,0,0（9）继承样式优先级最低，通配符样式优先级高于继承样式（10）!important（权重），它没有特殊性值，但它的优先级是最高的，为了方便记忆，可以认为它的特殊性值为1,0,0,0,0。计算实例：（1）#demo a&#123;color: orange;&#125;&#x2F;*特殊性值：0,1,0,1*&#x2F;（2）div#demo a&#123;color: red;&#125;&#x2F;*特殊性值：0,1,0,2*&#x2F;注意：（1）样式应用时，css会先查看规则的权重（!important），加了权重的优先级最高，当权重相同的时候，会比较规则的特殊性。（2）特殊性值越大的声明优先级越高。（3）相同特殊性值的声明，根据样式引入的顺序，后声明的规则优先级高（距离元素出现最近的） (4) 部分浏览器由于字节溢出问题出现的进位表现不做考虑<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>回答：</p><pre class="line-numbers language-none"><code class="language-none">判断优先级时，首先我们会判断一条属性声明是否有权重，也就是是否在声明后面加上了!important。一条声明如果加上了权重，那么它的优先级就是最高的，前提是它之后不再出现相同权重的声明。如果权重相同，我们则需要去比较匹配规则的特殊性。一条匹配规则一般由多个选择器组成，一条规则的特殊性由组成它的选择器的特殊性累加而成。选择器的特殊性可以分为四个等级，第一个等级是行内样式，为1000，第二个等级是id选择器，为0100，第三个等级是类选择器、伪类选择器和属性选择器，为0010，第四个等级是元素选择器和伪元素选择器，为0001。规则中每出现一个选择器，就将它的特殊性进行叠加，这个叠加只限于对应的等级的叠加，不会产生进位。选择器特殊性值的比较是从左向右排序的，也就是说以1开头的特殊性值比所有以0开头的特殊性值要大。比如说特殊性值为1000的的规则优先级就要比特殊性值为0999的规则高。如果两个规则的特殊性值相等的时候，那么就会根据它们引入的顺序，后出现的规则的优先级最高。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于组合声明的特殊性值计算可以参考：<br><a href="https://www.jianshu.com/p/1c4e639ff7d5">《CSS 优先级计算及应用》</a><br><a href="http://www.cnblogs.com/wangmeijian/p/4207433.html">《CSS 优先级计算规则》</a><br><a href="https://www.zhangxinxu.com/wordpress/2012/08/256-class-selector-beat-id-selector/">《有趣：256 个 class 选择器可以干掉 1 个 id 选择器》</a></p><h4 id="7-关于伪类-LVHA-的解释"><a href="#7-关于伪类-LVHA-的解释" class="headerlink" title="7.关于伪类 LVHA 的解释?"></a>7.关于伪类 LVHA 的解释?</h4><pre class="line-numbers language-none"><code class="language-none">a标签有四种状态：链接访问前、链接访问后、鼠标滑过、激活，分别对应四种伪类:link、:visited、:hover、:active；当链接未访问过时：（1）当鼠标滑过a链接时，满足:link和:hover两种状态，要改变a标签的颜色，就必须将:hover伪类在:link伪类后面声明；（2）当鼠标点击激活a链接时，同时满足:link、:hover、:active三种状态，要显示a标签激活时的样式（:active），必须将:active声明放到:link和:hover之后。因此得出LVHA这个顺序。当链接访问过时，情况基本同上，只不过需要将:link换成:visited。这个顺序能不能变？可以，但也只有:link和:visited可以交换位置，因为一个链接要么访问过要么没访问过，不可能同时满足，也就不存在覆盖的问题。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-CSS3-新增伪类有那些？"><a href="#8-CSS3-新增伪类有那些？" class="headerlink" title="8.CSS3 新增伪类有那些？"></a>8.CSS3 新增伪类有那些？</h4><pre class="line-numbers language-none"><code class="language-none">（1）elem:nth-child(n)选中父元素下的第n个子元素，并且这个子元素的标签名为elem，n可以接受具体的数值，也可以接受函数。（2）elem:nth-last-child(n)作用同上，不过是从后开始查找。（3）elem:last-child选中最后一个子元素。（4）elem:only-child如果elem是父元素下唯一的子元素，则选中之。（5）elem:nth-of-type(n)选中父元素下第n个elem类型元素，n可以接受具体的数值，也可以接受函数。（6）elem:first-of-type选中父元素下第一个elem类型元素。（7）elem:last-of-type选中父元素下最后一个elem类型元素。（8）elem:only-of-type如果父元素下的子元素只有一个elem类型元素，则选中该元素。（9）elem:empty选中不包含子元素和内容的elem类型元素。（10）elem:target选择当前活动的elem元素。（11）:not(elem)选择非elem元素的每个元素。（12）:enabled 控制表单控件的禁用状态。（13）:disabled    控制表单控件的禁用状态。(14):checked单选框或复选框被选中。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>详细的资料可以参考：<br><a href="https://www.cnblogs.com/SKLthegoodman/p/css3.html">《CSS3 新特性总结(伪类)》</a><br><a href="https://blog.csdn.net/zhouziyu2011/article/details/58605705">《浅谈 CSS 伪类和伪元素及 CSS3 新增伪类》</a></p><h4 id="9-如何居中-div？"><a href="#9-如何居中-div？" class="headerlink" title="9.如何居中 div？"></a>9.如何居中 div？</h4><p>-水平居中：给 div 设置一个宽度，然后添加 margin:0 auto 属性</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>-水平居中，利用 text-align:center 实现</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.box</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>-让绝对定位的 div 居中</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span> <span class="token comment">/*方便看效果*/</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>-水平垂直居中一</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*确定容器的宽高宽500高300的层设置层的外边距div&#123;*/</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token comment">/*绝对定位*/</span><span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span> -150px00-250px<span class="token punctuation">;</span><span class="token comment">/*外边距为自身宽高的一半*/</span><span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span><span class="token comment">/*方便看效果*/</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>-水平垂直居中二</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*未知容器的宽高，利用`transform`属性*/</span><span class="token selector">div</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span> <span class="token comment">/*相对定位或绝对定位均可*/</span>  <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span> <span class="token comment">/*方便看效果*/</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>-水平垂直居中三</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*利用flex布局实际使用时应考虑兼容性*/</span><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token comment">/*垂直居中*/</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token comment">/*水平居中*/</span><span class="token punctuation">&#125;</span><span class="token selector">.containerdiv</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span> <span class="token comment">/*方便看效果*/</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>-水平垂直居中四</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*利用text-align:center和vertical-align:middle属性*/</span><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.container::after</span> <span class="token punctuation">&#123;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.box</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>  <span class="token property">white-space</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>  <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>回答：</p><pre class="line-numbers language-none"><code class="language-none">一般常见的几种居中的方法有：对于宽高固定的元素（1）我们可以利用margin:0 auto来实现元素的水平居中。（2）利用绝对定位，设置四个方向的值都为0，并将margin设置为auto，由于宽高固定，因此对应方向实现平分，可以实现水平和垂直方向上的居中。（3）利用绝对定位，先将元素的左上角通过top:50%和left:50%定位到页面的中心，然后再通过margin负值来调整元素的中心点到页面的中心。（4）利用绝对定位，先将元素的左上角通过top:50%和left:50%定位到页面的中心，然后再通过translate来调整元素的中心点到页面的中心。（5）使用flex布局，通过align-items:center和justify-content:center设置容器的垂直和水平方向上为居中对齐，然后它的子元素也可以实现垂直和水平的居中。对于宽高不定的元素，上面的后面两种方法，可以实现元素的垂直和水平的居中。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="10-display-有哪些值？说明他们的作用。"><a href="#10-display-有哪些值？说明他们的作用。" class="headerlink" title="10.display 有哪些值？说明他们的作用。"></a>10.display 有哪些值？说明他们的作用。</h4><pre class="line-numbers language-none"><code class="language-none">block    块类型。默认宽度为父元素宽度，可设置宽高，换行显示。none    元素不显示，并从文档流中移除。inline    行内元素类型。默认宽度为内容宽度，不可设置宽高，同行显示。inline-block 默认宽度为内容宽度，可以设置宽高，同行显示。list-item    像块类型元素一样显示，并添加样式列表标记。table    此元素会作为块级表格来显示。inherit    规定应该从父元素继承display属性的值。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>详细资料可以参考：<br><a href="http://www.w3school.com.cn/css/pr_class_display.asp">《CSS display 属性》</a></p><h4 id="11-position-的值-relative-和-absolute-定位原点是？"><a href="#11-position-的值-relative-和-absolute-定位原点是？" class="headerlink" title="11.position 的值 relative 和 absolute 定位原点是？"></a>11.position 的值 relative 和 absolute 定位原点是？</h4><p>相关知识点：</p><pre class="line-numbers language-none"><code class="language-none">absolute生成绝对定位的元素，相对于值不为static的第一个父元素的padding box进行定位，也可以理解为离自己这一级元素最近的一级position设置为absolute或者relative的父元素的padding box的左上角为原点的。fixed（老IE不支持）生成绝对定位的元素，相对于浏览器窗口进行定位。relative生成相对定位的元素，相对于其元素本身所在正常位置进行定位。static默认值。没有定位，元素出现在正常的流中（忽略top,bottom,left,right,z-index声明）。inherit规定从父元素继承position属性的值。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>回答：</p><pre class="line-numbers language-none"><code class="language-none">relative定位的元素，是相对于元素本身的正常位置来进行定位的。absolute定位的元素，是相对于它的第一个position值不为static的祖先元素的padding box来进行定位的。这句话我们可以这样来理解，我们首先需要找到绝对定位元素的一个position的值不为static的祖先元素，然后相对于这个祖先元素的padding box来定位，也就是说在计算定位距离的时候，padding的值也要算进去。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="12-CSS3-有哪些新特性？（根据项目回答）"><a href="#12-CSS3-有哪些新特性？（根据项目回答）" class="headerlink" title="12.CSS3 有哪些新特性？（根据项目回答）"></a>12.CSS3 有哪些新特性？（根据项目回答）</h4><pre class="line-numbers language-none"><code class="language-none">新增各种CSS选择器    （:not(.input)：所有class不是“input”的节点）圆角        （border-radius:8px）多列布局    （multi-column layout）阴影和反射    （Shadow\Reflect）文字特效        （text-shadow）文字渲染        （Text-decoration）线性渐变        （gradient）旋转            （transform）缩放，定位，倾斜，动画，多背景例如：transform:\scale(0.85,0.90)\translate(0px,-30px)\skew(-9deg,0deg)\Animation:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="13-请解释一下-CSS3-的-Flex-box（弹性盒布局模型），以及适用场景？"><a href="#13-请解释一下-CSS3-的-Flex-box（弹性盒布局模型），以及适用场景？" class="headerlink" title="13.请解释一下 CSS3 的 Flex box（弹性盒布局模型），以及适用场景？"></a>13.请解释一下 CSS3 的 Flex box（弹性盒布局模型），以及适用场景？</h4><p>相关知识点：</p><pre class="line-numbers language-none"><code class="language-none">Flex是FlexibleBox的缩写，意为&quot;弹性布局&quot;，用来为盒状模型提供最大的灵活性。任何一个容器都可以指定为Flex布局。行内元素也可以使用Flex布局。注意，设为Flex布局以后，子元素的float、clear和vertical-align属性将失效。采用Flex布局的元素，称为Flex容器（flex container），简称&quot;容器&quot;。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称&quot;项目&quot;。容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis），项目默认沿主轴排列。以下6个属性设置在容器上。flex-direction属性决定主轴的方向（即项目的排列方向）。flex-wrap属性定义，如果一条轴线排不下，如何换行。flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。justify-content属性定义了项目在主轴上的对齐方式。align-items属性定义项目在交叉轴上如何对齐。align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。以下6个属性设置在项目上。order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。flex属性是flex-grow，flex-shrink和flex-basis的简写，默认值为0 1 auto。align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>回答：</p><pre class="line-numbers language-none"><code class="language-none">flex布局是CSS3新增的一种布局方式，我们可以通过将一个元素的display属性值设置为flex从而使它成为一个flex容器，它的所有子元素都会成为它的项目。一个容器默认有两条轴，一个是水平的主轴，一个是与主轴垂直的交叉轴。我们可以使用flex-direction来指定主轴的方向。我们可以使用justify-content来指定元素在主轴上的排列方式，使用align-items来指定元素在交叉轴上的排列方式。还可以使用flex-wrap来规定当一行排列不下时的换行方式。对于容器中的项目，我们可以使用order属性来指定项目的排列顺序，还可以使用flex-grow来指定当排列空间有剩余的时候，项目的放大比例。还可以使用flex-shrink来指定当排列空间不足时，项目的缩小比例。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>详细资料可以参考：<br><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">《Flex 布局教程：语法篇》</a><br><a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html">《Flex 布局教程：实例篇》</a></p><h4 id="14-用纯-CSS-创建一个三角形的原理是什么？"><a href="#14-用纯-CSS-创建一个三角形的原理是什么？" class="headerlink" title="14.用纯 CSS 创建一个三角形的原理是什么？"></a>14.用纯 CSS 创建一个三角形的原理是什么？</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">采用的是相邻边框连接处的均分原理。  将元素的宽高设为0，只设置  border  ，把任意三条边隐藏掉（颜色设为  transparent），剩下的就是一个三角形。  #demo</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">border-width</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>  <span class="token property">border-style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span>  <span class="token property">border-color</span><span class="token punctuation">:</span> transparent transparent red transparent<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="15-一个满屏品字布局如何设计"><a href="#15-一个满屏品字布局如何设计" class="headerlink" title="15.一个满屏品字布局如何设计?"></a>15.一个满屏品字布局如何设计?</h4><pre class="line-numbers language-none"><code class="language-none">简单的方式：    上面的div宽100%，    下面的两个div分别宽50%，    然后用float或者inline使其不换行即可<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="16-CSS-多列等高如何实现？"><a href="#16-CSS-多列等高如何实现？" class="headerlink" title="16.CSS 多列等高如何实现？"></a>16.CSS 多列等高如何实现？</h4><pre class="line-numbers language-none"><code class="language-none">（1）利用padding-bottom|margin-bottom正负值相抵，不会影响页面布局的特点。设置父容器设置超出隐藏（overflow:hidden），这样父容器的高度就还是它里面的列没有设定padding-bottom时的高度，当它里面的任一列高度增加了，则父容器的高度被撑到里面最高那列的高度，其他比这列矮的列会用它们的padding-bottom补偿这部分高度差。（2）利用table-cell所有单元格高度都相等的特性，来实现多列等高。（3）利用flex布局中项目align-items属性默认为stretch，如果项目未设置高度或设为auto，将占满整个容器的高度的特性，来实现多列等高。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>详细资料可以参考：<br><a href="https://juejin.im/post/5b0fb34151882515662238fd">《前端应该掌握的 CSS 实现多列等高布局》</a><br><a href="https://codepen.io/yangbo5207/post/equh">《CSS：多列等高布局》</a></p><h4 id="17-经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用-hack-的技巧？"><a href="#17-经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用-hack-的技巧？" class="headerlink" title="17.经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用 hack 的技巧？"></a>17.经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用 hack 的技巧？</h4><pre class="line-numbers language-none"><code class="language-none">（1）png24位的图片在iE6浏览器上出现背景解决方案：做成PNG8，也可以引用一段脚本处理。（2）浏览器默认的margin和padding不同解决方案：加一个全局的*&#123;margin:0;padding:0;&#125;来统一。（3）IE6双边距bug：在IE6下，如果对元素设置了浮动，同时又设置了margin-left或margin-right，margin值会加倍。#box&#123;float:left;width:10px;margin:0 0 0 10px;&#125;这种情况之下IE会产生20px的距离解决方案：在float的标签样式控制中加入_display:inline;将其转化为行内属性。(_这个符号只有ie6会识别)（4）渐进识别的方式，从总体中逐渐排除局部。首先，巧妙的使用&quot;\9&quot;这一标记，将IE游览器从所有情况中分离出来。接着，再次使用&quot;+&quot;将IE8和IE7、IE6分离开来，这样IE8已经独立识别。.bb&#123;background-color:#f1ee18;&#x2F;*所有识别*&#x2F;.background-color:#00deff\9;&#x2F;*IE6、7、8识别*&#x2F;+background-color:#a200ff;&#x2F;*IE6、7识别*&#x2F;_background-color:#1e0bd1;&#x2F;*IE6识别*&#x2F;&#125;（5）IE下，可以使用获取常规属性的方法来获取自定义属性，也可以使用getAttribute()获取自定义属性；Firefox下，只能使用getAttribute()获取自定义属性解决方法：统一通过getAttribute()获取自定义属性。（6）IE下，event对象有x、y属性，但是没有pageX、pageY属性;Firefox下，event对象有pageX、pageY属性，但是没有x、y属性。解决方法：（条件注释）缺点是在IE浏览器下可能会增加额外的HTTP请求数。（7）Chrome中文界面下默认会将小于12px的文本强制按照12px显示解决方法：1.可通过加入CSS属性-webkit-text-size-adjust:none;解决。但是，在chrome更新到27版本之后就不可以用了。2.还可以使用-webkit-transform:scale(0.5);注意-webkit-transform:scale(0.75);收缩的是整个span的大小，这时候，必须要将span转换成块元素，可以使用display：block&#x2F;inline-block&#x2F;...；（8）超链接访问过后hover样式就不出现了，被点击访问过的超链接样式不再具有hover和active了解决方法：改变CSS属性的排列顺序L-V-H-A（9）怪异模式问题：漏写DTD声明，Firefox仍然会按照标准模式来解析网页，但在IE中会触发怪异模式。为避免怪异模式给我们带来不必要的麻烦，最好养成书写DTD声明的好习惯。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="18-li-与-li-之间有看不见的空白间隔是什么原因引起的？有什么解决办法？"><a href="#18-li-与-li-之间有看不见的空白间隔是什么原因引起的？有什么解决办法？" class="headerlink" title="18.li 与 li 之间有看不见的空白间隔是什么原因引起的？有什么解决办法？"></a>18.li 与 li 之间有看不见的空白间隔是什么原因引起的？有什么解决办法？</h4><pre class="line-numbers language-none"><code class="language-none">浏览器会把inline元素间的空白字符（空格、换行、Tab等）渲染成一个空格。而为了美观。我们通常是一个&lt;li&gt;放在一行，这导致&lt;li&gt;换行后产生换行字符，它变成一个空格，占用了一个字符的宽度。解决办法：（1）为&lt;li&gt;设置float:left。不足：有些容器是不能设置浮动，如左右切换的焦点图等。（2）将所有&lt;li&gt;写在同一行。不足：代码不美观。（3）将&lt;ul&gt;内的字符尺寸直接设为0，即font-size:0。不足：&lt;ul&gt;中的其他字符尺寸也被设为0，需要额外重新设定其他字符尺寸，且在Safari浏览器依然会出现空白间隔。（4）消除&lt;ul&gt;的字符间隔letter-spacing:-8px，不足：这也设置了&lt;li&gt;内的字符间隔，因此需要将&lt;li&gt;内的字符间隔设为默认letter-spacing:normal。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>详细资料可以参考：<br><a href="https://blog.csdn.net/sjinsa/article/details/70919546">《li 与 li 之间有看不见的空白间隔是什么原因引起的？》</a></p><h4 id="19-为什么要初始化-CSS-样式？"><a href="#19-为什么要初始化-CSS-样式？" class="headerlink" title="19.为什么要初始化 CSS 样式？"></a>19.为什么要初始化 CSS 样式？</h4><pre class="line-numbers language-none"><code class="language-none">-因为浏览器的兼容问题，不同浏览器对有些标签的默认值是不同的，如果没对CSS初始化往往会出现浏览器之间的页面显示差异。-当然，初始化样式会对SEO有一定的影响，但鱼和熊掌不可兼得，但力求影响最小的情况下初始化。最简单的初始化方法：*&#123;padding:0;margin:0;&#125;（强烈不建议）淘宝的样式初始化代码：body,h1,h2,h3,h4,h5,h6,hr,p,blockquote,dl,dt,dd,ul,ol,li,pre,form,fieldset,legend,button,input,textarea,th,td&#123;margin:0;padding:0;&#125;body,button,input,select,textarea&#123;font:12px&#x2F;1.5tahoma,arial,\5b8b\4f53;&#125;h1,h2,h3,h4,h5,h6&#123;font-size:100%;&#125;address,cite,dfn,em,var&#123;font-style:normal;&#125;code,kbd,pre,samp&#123;font-family:couriernew,courier,monospace;&#125;small&#123;font-size:12px;&#125;ul,ol&#123;list-style:none;&#125;a&#123;text-decoration:none;&#125;a:hover&#123;text-decoration:underline;&#125;sup&#123;vertical-align:text-top;&#125;sub&#123;vertical-align:text-bottom;&#125;legend&#123;color:#000;&#125;fieldset,img&#123;border:0;&#125;button,input,select,textarea&#123;font-size:100%;&#125;table&#123;border-collapse:collapse;border-spacing:0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="20-什么是包含块，对于包含块的理解"><a href="#20-什么是包含块，对于包含块的理解" class="headerlink" title="20.什么是包含块，对于包含块的理解?"></a>20.什么是包含块，对于包含块的理解?</h4><pre class="line-numbers language-none"><code class="language-none">包含块（containing block）就是元素用来计算和定位的一个框。（1）根元素（很多场景下可以看成是&lt;html&gt;）被称为“初始包含块”，其尺寸等同于浏览器可视窗口的大小。（2）对于其他元素，如果该元素的position是relative或者static，则“包含块”由其最近的块容器祖先盒的content box边界形成。（3）如果元素position:fixed，则“包含块”是“初始包含块”。（4）如果元素position:absolute，则“包含块”由最近的position不为static的祖先元素建立，具体方式如下：如果该祖先元素是纯inline元素，则规则略复杂：•假设给内联元素的前后各生成一个宽度为0的内联盒子（inline box），则这两个内联盒子的padding box外面的包围盒就是内联元素的“包含块”；•如果该内联元素被跨行分割了，那么“包含块”是未定义的，也就是CSS2.1规范并没有明确定义，浏览器自行发挥否则，“包含块”由该祖先的padding box边界形成。如果没有符合条件的祖先元素，则“包含块”是“初始包含块”。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="21-CSS-里的-visibility-属性有个-collapse-属性值是干嘛用的？在不同浏览器下以后什么区别？"><a href="#21-CSS-里的-visibility-属性有个-collapse-属性值是干嘛用的？在不同浏览器下以后什么区别？" class="headerlink" title="21.CSS 里的 visibility 属性有个 collapse 属性值是干嘛用的？在不同浏览器下以后什么区别？"></a>21.CSS 里的 visibility 属性有个 collapse 属性值是干嘛用的？在不同浏览器下以后什么区别？</h4><pre class="line-numbers language-none"><code class="language-none">（1）对于一般的元素，它的表现跟visibility：hidden;是一样的。元素是不可见的，但此时仍占用页面空间。（2）但例外的是，如果这个元素是table相关的元素，例如table行，table group，table列，table column group，它的表现却跟display:none一样，也就是说，它们占用的空间也会释放。在不同浏览器下的区别：在谷歌浏览器里，使用collapse值和使用hidden值没有什么区别。在火狐浏览器、Opera和IE11里，使用collapse值的效果就如它的字面意思：table的行会消失，它的下面一行会补充它的位置。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>详细资料可以参考：<br><a href="http://www.webhek.com/post/visibility-collapse.html">《CSS 里的 visibility 属性有个鲜为人知的属性值：collapse》</a></p><h4 id="22-width-auto-和-width-100-的区别"><a href="#22-width-auto-和-width-100-的区别" class="headerlink" title="22.width:auto 和 width:100%的区别"></a>22.width:auto 和 width:100%的区别</h4><pre class="line-numbers language-none"><code class="language-none">一般而言width:100%会使元素box的宽度等于父元素的content box的宽度。width:auto会使元素撑满整个父元素，margin、border、padding、content区域会自动分配水平空间。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="23-绝对定位元素与非绝对定位元素的百分比计算的区别"><a href="#23-绝对定位元素与非绝对定位元素的百分比计算的区别" class="headerlink" title="23.绝对定位元素与非绝对定位元素的百分比计算的区别"></a>23.绝对定位元素与非绝对定位元素的百分比计算的区别</h4><pre class="line-numbers language-none"><code class="language-none">绝对定位元素的宽高百分比是相对于临近的position不为static的祖先元素的padding box来计算的。非绝对定位元素的宽高百分比则是相对于父元素的content box来计算的。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="24-简单介绍使用图片-base64-编码的优点和缺点。"><a href="#24-简单介绍使用图片-base64-编码的优点和缺点。" class="headerlink" title="24.简单介绍使用图片 base64 编码的优点和缺点。"></a>24.简单介绍使用图片 base64 编码的优点和缺点。</h4><pre class="line-numbers language-none"><code class="language-none">base64编码是一种图片处理格式，通过特定的算法将图片编码成一长串字符串，在页面上显示的时候，可以用该字符串来代替图片的url属性。使用base64的优点是：（1）减少一个图片的HTTP请求使用base64的缺点是：（1）根据base64的编码原理，编码后的大小会比原文件大小大1&#x2F;3，如果把大图片编码到html&#x2F;css中，不仅会造成文件体积的增加，影响文件的加载速度，还会增加浏览器对html或css文件解析渲染的时间。（2）使用base64无法直接缓存，要缓存只能缓存包含base64的文件，比如HTML或者CSS，这相比域直接缓存图片的效果要差很多。（3）兼容性的问题，ie8以前的浏览器不支持。一般一些网站的小图标可以使用base64图片来引入。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>详细资料可以参考：<br><a href="https://www.cnblogs.com/coco1s/p/4375774.html">《玩转图片 base64 编码》</a><br><a href="https://www.zhihu.com/question/31155574">《前端开发中，使用 base64 图片的弊端是什么？》</a><br><a href="https://www.zhangxinxu.com/wordpress/2012/04/base64-url-image-%E5%9B%BE%E7%89%87-%E9%A1%B5%E9%9D%A2%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/">《小 tip:base64:URL 背景图片与 web 页面性能优化》</a></p><h4 id="25-’display’、’position’和’float’的相互关系？"><a href="#25-’display’、’position’和’float’的相互关系？" class="headerlink" title="25.’display’、’position’和’float’的相互关系？"></a>25.’display’、’position’和’float’的相互关系？</h4><pre class="line-numbers language-none"><code class="language-none">（1）首先我们判断display属性是否为none，如果为none，则position和float属性的值不影响元素最后的表现。（2）然后判断position的值是否为absolute或者fixed，如果是，则float属性失效，并且display的值应该被设置为table或者block，具体转换需要看初始转换值。（3）如果position的值不为absolute或者fixed，则判断float属性的值是否为none，如果不是，则display的值则按上面的规则转换。注意，如果position的值为relative并且float属性的值存在，则relative相对于浮动后的最终位置定位。（4）如果float的值为none，则判断元素是否为根元素，如果是根元素则display属性按照上面的规则转换，如果不是，则保持指定的display属性值不变。总的来说，可以把它看作是一个类似优先级的机制，&quot;position:absolute&quot;和&quot;position:fixed&quot;优先级最高，有它存在的时候，浮动不起作用，&#39;display&#39;的值也需要调整；其次，元素的&#39;float&#39;特性的值不是&quot;none&quot;的时候或者它是根元素的时候，调整&#39;display&#39;的值；最后，非根元素，并且非浮动元素，并且非绝对定位的元素，&#39;display&#39;特性值同设置值。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>详细资料可以参考：<br><a href="https://www.cnblogs.com/jackyWHJ/p/3756087.html">《position 跟 display、margincollapse、overflow、float 这些特性相互叠加后会怎么样？》</a></p><h4 id="26-margin-重叠问题的理解。"><a href="#26-margin-重叠问题的理解。" class="headerlink" title="26.margin 重叠问题的理解。"></a>26.margin 重叠问题的理解。</h4><p>相关知识点：</p><pre class="line-numbers language-none"><code class="language-none">块级元素的上外边距（margin-top）与下外边距（margin-bottom）有时会合并为单个外边距，这样的现象称为“margin合并”。产生折叠的必备条件：margin必须是邻接的!而根据w3c规范，两个margin是邻接的必须满足以下条件：•必须是处于常规文档流（非float和绝对定位）的块级盒子，并且处于同一个BFC当中。•没有线盒，没有空隙，没有padding和border将他们分隔开•都属于垂直方向上相邻的外边距，可以是下面任意一种情况•元素的margin-top与其第一个常规文档流的子元素的margin-top•元素的margin-bottom与其下一个常规文档流的兄弟元素的margin-top•height为auto的元素的margin-bottom与其最后一个常规文档流的子元素的margin-bottom•高度为0并且最小高度也为0，不包含常规文档流的子元素，并且自身没有建立新的BFC的元素的margin-top和margin-bottommargin合并的3种场景：（1）相邻兄弟元素margin合并。解决办法：•设置块状格式化上下文元素（BFC）（2）父级和第一个&#x2F;最后一个子元素的margin合并。解决办法：对于margin-top合并，可以进行如下操作（满足一个条件即可）：•父元素设置为块状格式化上下文元素；•父元素设置border-top值；•父元素设置padding-top值；•父元素和第一个子元素之间添加内联元素进行分隔。对于margin-bottom合并，可以进行如下操作（满足一个条件即可）：•父元素设置为块状格式化上下文元素；•父元素设置border-bottom值；•父元素设置padding-bottom值；•父元素和最后一个子元素之间添加内联元素进行分隔；•父元素设置height、min-height或max-height。（3）空块级元素的margin合并。解决办法：•设置垂直方向的border；•设置垂直方向的padding；•里面添加内联元素（直接Space键空格是没用的）；•设置height或者min-height。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>回答：</p><pre class="line-numbers language-none"><code class="language-none">margin重叠指的是在垂直方向上，两个相邻元素的margin发生重叠的情况。一般来说可以分为四种情形：第一种是相邻兄弟元素的marin-bottom和margin-top的值发生重叠。这种情况下我们可以通过设置其中一个元素为BFC来解决。第二种是父元素的margin-top和子元素的margin-top发生重叠。它们发生重叠是因为它们是相邻的，所以我们可以通过这一点来解决这个问题。我们可以为父元素设置border-top、padding-top值来分隔它们，当然我们也可以将父元素设置为BFC来解决。第三种是高度为auto的父元素的margin-bottom和子元素的margin-bottom发生重叠。它们发生重叠一个是因为它们相邻，一个是因为父元素的高度不固定。因此我们可以为父元素设置border-bottom、padding-bottom来分隔它们，也可以为父元素设置一个高度，max-height和min-height也能解决这个问题。当然将父元素设置为BFC是最简单的方法。第四种情况，是没有内容的元素，自身的margin-top和margin-bottom发生的重叠。我们可以通过为其设置border、padding或者高度来解决这个问题。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="27-对-BFC-规范（块级格式化上下文：block-formatting-context）的理解？"><a href="#27-对-BFC-规范（块级格式化上下文：block-formatting-context）的理解？" class="headerlink" title="27.对 BFC 规范（块级格式化上下文：block formatting context）的理解？"></a>27.对 BFC 规范（块级格式化上下文：block formatting context）的理解？</h4><p>相关知识点：</p><pre class="line-numbers language-none"><code class="language-none">块格式化上下文（Block Formatting Context，BFC）是Web页面的可视化CSS渲染的一部分，是布局过程中生成块级盒子的区域，也是浮动元素与其他元素的交互限定区域。通俗来讲•BFC是一个独立的布局环境，可以理解为一个容器，在这个容器中按照一定规则进行物品摆放，并且不会影响其它环境中的物品。•如果一个元素符合触发BFC的条件，则BFC中的元素布局不受外部影响。创建BFC（1）根元素或包含根元素的元素（2）浮动元素float＝left|right或inherit（≠none）（3）绝对定位元素position＝absolute或fixed（4）display＝inline-block|flex|inline-flex|table-cell或table-caption（5）overflow＝hidden|auto或scroll(≠visible)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>回答：</p><pre class="line-numbers language-none"><code class="language-none">BFC指的是块级格式化上下文，一个元素形成了BFC之后，那么它内部元素产生的布局不会影响到外部元素，外部元素的布局也不会影响到BFC中的内部元素。一个BFC就像是一个隔离区域，和其他区域互不影响。一般来说根元素是一个BFC区域，浮动和绝对定位的元素也会形成BFC，display属性的值为inline-block、flex这些属性时也会创建BFC。还有就是元素的overflow的值不为visible时都会创建BFC。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>详细资料可以参考：<br><a href="https://www.w3cplus.com/css/understanding-bfc-and-margin-collapse.html">《深入理解 BFC 和 MarginCollapse》</a><br><a href="https://segmentfault.com/a/1190000013647777">《前端面试题-BFC（块格式化上下文）》</a></p><h4 id="28-IFC-是什么？"><a href="#28-IFC-是什么？" class="headerlink" title="28.IFC 是什么？"></a>28.IFC 是什么？</h4><pre class="line-numbers language-none"><code class="language-none">IFC指的是行级格式化上下文，它有这样的一些布局规则：（1）行级上下文内部的盒子会在水平方向，一个接一个地放置。（2）当一行不够的时候会自动切换到下一行。（3）行级上下文的高度由内部最高的内联盒子的高度决定。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>详细资料可以参考：<br><a href="https://segmentfault.com/a/1190000004466536#articleHeader5">《[译]:BFC 与 IFC》</a><br><a href="https://blog.csdn.net/paintandraw/article/details/80401741">《BFC 和 IFC 的理解（布局）》</a></p><h4 id="29-请解释一下为什么需要清除浮动？清除浮动的方式"><a href="#29-请解释一下为什么需要清除浮动？清除浮动的方式" class="headerlink" title="29.请解释一下为什么需要清除浮动？清除浮动的方式"></a>29.请解释一下为什么需要清除浮动？清除浮动的方式</h4><pre class="line-numbers language-none"><code class="language-none">浮动元素可以左右移动，直到遇到另一个浮动元素或者遇到它外边缘的包含框。浮动框不属于文档流中的普通流，当元素浮动之后，不会影响块级元素的布局，只会影响内联元素布局。此时文档流中的普通流就会表现得该浮动框不存在一样的布局模式。当包含框的高度小于浮动框的时候，此时就会出现“高度塌陷”。清除浮动是为了清除使用浮动元素产生的影响。浮动的元素，高度会塌陷，而高度的塌陷使我们页面后面的布局不能正常显示。清除浮动的方式（1）使用clear属性清除浮动。参考28。（2）使用BFC块级格式化上下文来清除浮动。参考26。因为BFC元素不会影响外部元素的特点，所以BFC元素也可以用来清除浮动的影响，因为如果不清除，子元素浮动则父元素高度塌陷，必然会影响后面元素布局和定位，这显然有违BFC元素的子元素不会影响外部元素的设定。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="30-使用-clear-属性清除浮动的原理？"><a href="#30-使用-clear-属性清除浮动的原理？" class="headerlink" title="30.使用 clear 属性清除浮动的原理？"></a>30.使用 clear 属性清除浮动的原理？</h4><pre class="line-numbers language-none"><code class="language-none">使用clear属性清除浮动，其语法如下：clear:none|left|right|both如果单看字面意思，clear:left应该是“清除左浮动”，clear:right应该是“清除右浮动”的意思，实际上，这种解释是有问题的，因为浮动一直还在，并没有清除。官方对clear属性的解释是：“元素盒子的边不能和前面的浮动元素相邻。”，我们对元素设置clear属性是为了避免浮动元素对该元素的影响，而不是清除掉浮动。还需要注意的一点是clear属性指的是元素盒子的边不能和前面的浮动元素相邻，注意这里“前面的”3个字，也就是clear属性对“后面的”浮动元素是不闻不问的。考虑到float属性要么是left，要么是right，不可能同时存在，同时由于clear属性对“后面的”浮动元素不闻不问，因此，当clear:left有效的时候，clear:right必定无效，也就是此时clear:left等同于设置clear:both；同样地，clear:right如果有效也是等同于设置clear:both。由此可见，clear:left和clear:right这两个声明就没有任何使用的价值，至少在CSS世界中是如此，直接使用clear:both吧。一般使用伪元素的方式清除浮动.clear::after&#123;content:&#39;&#39;;display:table;&#x2F;&#x2F;也可以是&#39;block&#39;，或者是&#39;list-item&#39;clear:both;&#125;clear属性只有块级元素才有效的，而::after等伪元素默认都是内联水平，这就是借助伪元素清除浮动影响时需要设置display属性值的原因。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="31-zoom-1-的清除浮动原理"><a href="#31-zoom-1-的清除浮动原理" class="headerlink" title="31.zoom:1 的清除浮动原理?"></a>31.zoom:1 的清除浮动原理?</h4><pre class="line-numbers language-none"><code class="language-none">清除浮动，触发hasLayout；zoom属性是IE浏览器的专有属性，它可以设置或检索对象的缩放比例。解决ie下比较奇葩的bug。譬如外边距（margin）的重叠，浮动清除，触发ie的haslayout属性等。来龙去脉大概如下：当设置了zoom的值之后，所设置的元素就会就会扩大或者缩小，高度宽度就会重新计算了，这里一旦改变zoom值时其实也会发生重新渲染，运用这个原理，也就解决了ie下子元素浮动时候父元素不随着自动扩大的问题。zoom属性是IE浏览器的专有属性，火狐和老版本的webkit核心的浏览器都不支持这个属性。然而，zoom现在已经被逐步标准化，出现在CSS3.0规范草案中。目前非ie由于不支持这个属性，它们又是通过什么属性来实现元素的缩放呢？可以通过css3里面的动画属性scale进行缩放。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="32-移动端的布局用过媒体查询吗？"><a href="#32-移动端的布局用过媒体查询吗？" class="headerlink" title="32.移动端的布局用过媒体查询吗？"></a>32.移动端的布局用过媒体查询吗？</h4><pre class="line-numbers language-none"><code class="language-none">假设你现在正用一台显示设备来阅读这篇文章，同时你也想把它投影到屏幕上，或者打印出来，而显示设备、屏幕投影和打印等这些媒介都有自己的特点，CSS就是为文档提供在不同媒介上展示的适配方法当媒体查询为真时，相关的样式表或样式规则会按照正常的级联规被应用。当媒体查询返回假，标签上带有媒体查询的样式表仍将被下载（只不过不会被应用）。包含了一个媒体类型和至少一个使用宽度、高度和颜色等媒体属性来限制样式表范围的表达式。CSS3加入的媒体查询使得无需修改内容便可以使样式应用于某些特定的设备范围。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>详细资料可以参考：<br><a href="http://www.runoob.com/cssref/css3-pr-mediaquery.html">《CSS3@media 查询》</a><br><a href="http://caibaojian.com/356.html">《响应式布局和自适应布局详解》</a></p><h4 id="33-使用-CSS-预处理器吗？喜欢哪个？"><a href="#33-使用-CSS-预处理器吗？喜欢哪个？" class="headerlink" title="33.使用 CSS 预处理器吗？喜欢哪个？"></a>33.使用 CSS 预处理器吗？喜欢哪个？</h4><pre class="line-numbers language-none"><code class="language-none">SASS（SASS、LESS没有本质区别，只因为团队前端都是用的SASS）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="34-CSS-优化、提高性能的方法有哪些？"><a href="#34-CSS-优化、提高性能的方法有哪些？" class="headerlink" title="34.CSS 优化、提高性能的方法有哪些？"></a>34.CSS 优化、提高性能的方法有哪些？</h4><pre class="line-numbers language-none"><code class="language-none">加载性能：（1）css压缩：将写好的css进行打包压缩，可以减少很多的体积。（2）css单一样式：当需要下边距和左边距的时候，很多时候选择:margin:top 0 bottom 0;但margin-bottom:bottom;margin-left:left;执行的效率更高。（3）减少使用@import,而建议使用link，因为后者在页面加载时一起加载，前者是等待页面加载完成之后再进行加载。选择器性能：（1）关键选择器（key selector）。选择器的最后面的部分为关键选择器（即用来匹配目标元素的部分）。CSS选择符是从右到左进行匹配的。当使用后代选择器的时候，浏览器会遍历所有子元素来确定是否是指定的元素等等；（2）如果规则拥有ID选择器作为其关键选择器，则不要为规则增加标签。过滤掉无关的规则（这样样式系统就不会浪费时间去匹配它们了）。（3）避免使用通配规则，如*&#123;&#125;计算次数惊人！只对需要用到的元素进行选择。（4）尽量少的去对标签进行选择，而是用class。（5）尽量少的去使用后代选择器，降低选择器的权重值。后代选择器的开销是最高的，尽量将选择器的深度降到最低，最高不要超过三层，更多的使用类来关联每一个标签元素。（6）了解哪些属性是可以通过继承而来的，然后避免对这些属性重复指定规则。渲染性能：（1）慎重使用高性能属性：浮动、定位。（2）尽量减少页面重排、重绘。（3）去除空规则：｛｝。空规则的产生原因一般来说是为了预留样式。去除这些空规则无疑能减少css文档体积。（4）属性值为0时，不加单位。（5）属性值为浮动小数0.**，可以省略小数点之前的0。（6）标准化各种浏览器前缀：带浏览器前缀的在前。标准属性在后。（7）不使用@import前缀，它会影响css的加载速度。（8）选择器优化嵌套，尽量避免层级过深。（9）css雪碧图，同一页面相近部分的小图标，方便使用，减少页面的请求次数，但是同时图片本身会变大，使用时，优劣考虑清楚，再使用。（10）正确使用display的属性，由于display的作用，某些样式组合会无效，徒增样式体积的同时也影响解析性能。（11）不滥用web字体。对于中文网站来说WebFonts可能很陌生，国外却很流行。web fonts通常体积庞大，而且一些浏览器在下载web fonts时会阻塞页面渲染损伤性能。可维护性、健壮性：（1）将具有相同属性的样式抽离出来，整合并通过class在页面中进行使用，提高css的可维护性。（2）样式与内容分离：将css代码定义到外部css中。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>详细资料可以参考：<br><a href="https://www.zhihu.com/question/19886806">《CSS 优化、提高性能的方法有哪些？》</a><br><a href="https://www.jianshu.com/p/4e673bf24a3b">《CSS 优化，提高性能的方法》</a></p><h4 id="35-浏览器是怎样解析-CSS-选择器的？"><a href="#35-浏览器是怎样解析-CSS-选择器的？" class="headerlink" title="35.浏览器是怎样解析 CSS 选择器的？"></a>35.浏览器是怎样解析 CSS 选择器的？</h4><pre class="line-numbers language-none"><code class="language-none">样式系统从关键选择器开始匹配，然后左移查找规则选择器的祖先元素。只要选择器的子树一直在工作，样式系统就会持续左移，直到和规则匹配，或者是因为不匹配而放弃该规则。试想一下，如果采用从左至右的方式读取CSS规则，那么大多数规则读到最后（最右）才会发现是不匹配的，这样做会费时耗能，最后有很多都是无用的；而如果采取从右向左的方式，那么只要发现最右边选择器不匹配，就可以直接舍弃了，避免了许多无效匹配。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>详细资料可以参考：<br><a href="https://juejin.im/entry/5a123c55f265da432240cc90">《探究 CSS 解析原理》</a></p><h4 id="36-在网页中应该使用奇数还是偶数的字体？为什么呢？"><a href="#36-在网页中应该使用奇数还是偶数的字体？为什么呢？" class="headerlink" title="36.在网页中应该使用奇数还是偶数的字体？为什么呢？"></a>36.在网页中应该使用奇数还是偶数的字体？为什么呢？</h4><pre class="line-numbers language-none"><code class="language-none">（1）偶数字号相对更容易和web设计的其他部分构成比例关系。比如：当我用了14px的正文字号，我可能会在一些地方用14×0.5&#x3D;7px的margin，在另一些地方用14×1.5&#x3D;21px的标题字号。（2）浏览器缘故，低版本的浏览器ie6会把奇数字体强制转化为偶数，即13px渲染为14px。（3）系统差别，早期的Windows里，中易宋体点阵只有12和14、15、16px，唯独缺少13px。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>详细资料可以参考：<br><a href="https://blog.csdn.net/jian_xi/article/details/79346477">《谈谈网页中使用奇数字体和偶数字体》</a><br><a href="https://www.zhihu.com/question/20440679">《现在网页设计中的为什么少有人用 11px、13px、15px 等奇数的字体？》</a></p><h4 id="37-margin-和-padding-分别适合什么场景使用？"><a href="#37-margin-和-padding-分别适合什么场景使用？" class="headerlink" title="37.margin 和 padding 分别适合什么场景使用？"></a>37.margin 和 padding 分别适合什么场景使用？</h4><pre class="line-numbers language-none"><code class="language-none">margin是用来隔开元素与元素的间距；padding是用来隔开元素与内容的间隔。margin用于布局分开元素使元素与元素互不相干。padding用于元素与内容之间的间隔，让内容（文字）与（包裹）元素之间有一段距离。何时应当使用margin：•需要在border外侧添加空白时。•空白处不需要背景（色）时。•上下相连的两个盒子之间的空白，需要相互抵消时。如15px+20px的margin，将得到20px的空白。何时应当时用padding：•需要在border内测添加空白时。•空白处需要背景（色）时。•上下相连的两个盒子之间的空白，希望等于两者之和时。如15px+20px的padding，将得到35px的空白。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="38-抽离样式模块怎么写，说出思路，有无实践经验？-阿里航旅的面试题"><a href="#38-抽离样式模块怎么写，说出思路，有无实践经验？-阿里航旅的面试题" class="headerlink" title="38.抽离样式模块怎么写，说出思路，有无实践经验？[阿里航旅的面试题]"></a>38.抽离样式模块怎么写，说出思路，有无实践经验？[阿里航旅的面试题]</h4><pre class="line-numbers language-none"><code class="language-none">我的理解是把常用的css样式单独做成css文件……通用的和业务相关的分离出来，通用的做成样式模块儿共享，业务相关的，放进业务相关的库里面做成对应功能的模块儿。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>详细资料可以参考：<br><a href="http://nec.netease.com/standard/css-sort.html">《CSS 规范-分类方法》</a></p><h4 id="39-简单说一下-css3-的-all-属性。"><a href="#39-简单说一下-css3-的-all-属性。" class="headerlink" title="39.简单说一下 css3 的 all 属性。"></a>39.简单说一下 css3 的 all 属性。</h4><pre class="line-numbers language-none"><code class="language-none">all属性实际上是所有CSS属性的缩写，表示，所有的CSS属性都怎样怎样，但是，不包括unicode-bidi和direction这两个CSS属性。支持三个CSS通用属性值，initial,inherit,unset。initial是初始值的意思，也就是该元素元素都除了unicode-bidi和direction以外的CSS属性都使用属性的默认初始值。inherit是继承的意思，也就是该元素除了unicode-bidi和direction以外的CSS属性都继承父元素的属性值。unset是取消设置的意思，也就是当前元素浏览器或用户设置的CSS忽略，然后如果是具有继承特性的CSS，如color，则使用继承值；如果是没有继承特性的CSS属性，如background-color，则使用初始值。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>详细资料可以参考：<br><a href="https://www.zhangxinxu.com/wordpress/2016/03/know-about-css3-all/">《简单了解 CSS3 的 all 属性》</a></p><h4 id="40-为什么不建议使用统配符初始化-css-样式。"><a href="#40-为什么不建议使用统配符初始化-css-样式。" class="headerlink" title="40.为什么不建议使用统配符初始化 css 样式。"></a>40.为什么不建议使用统配符初始化 css 样式。</h4><pre class="line-numbers language-none"><code class="language-none">采用*&#123;padding:0;margin:0;&#125;这样的写法好处是写起来很简单，但是是通配符，需要把所有的标签都遍历一遍，当网站较大时，样式比较多，这样写就大大的加强了网站运行的负载，会使网站加载的时候需要很长一段时间，因此一般大型的网站都有分层次的一套初始化样式。出于性能的考虑，并不是所有标签都会有padding和margin，因此对常见的具有默认padding和margin的元素初始化即可，并不需使用通配符*来初始化。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="41-absolute-的-containingblock（包含块）计算方式跟正常流有什么不同？"><a href="#41-absolute-的-containingblock（包含块）计算方式跟正常流有什么不同？" class="headerlink" title="41.absolute 的 containingblock（包含块）计算方式跟正常流有什么不同？"></a>41.absolute 的 containingblock（包含块）计算方式跟正常流有什么不同？</h4><pre class="line-numbers language-none"><code class="language-none">（1）内联元素也可以作为“包含块”所在的元素；（2）“包含块”所在的元素不是父块级元素，而是最近的position不为static的祖先元素或根元素；（3）边界是padding box而不是content box。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="42-对于-hasLayout-的理解？"><a href="#42-对于-hasLayout-的理解？" class="headerlink" title="42.对于 hasLayout 的理解？"></a>42.对于 hasLayout 的理解？</h4><pre class="line-numbers language-none"><code class="language-none">hasLayout是IE特有的一个属性。很多的IE下的css bug都与其息息相关。在IE中，一个元素要么自己对自身的内容进行计算大小和组织，要么依赖于父元素来计算尺寸和组织内容。当一个元素的hasLayout属性值为true时，它负责对自己和可能的子孙元素进行尺寸计算和定位。虽然这意味着这个元素需要花更多的代价来维护自身和里面的内容，而不是依赖于祖先元素来完成这些工作。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>详细资料可以参考：<br><a href="https://segmentfault.com/a/1190000010883974">《CSS 基础篇–CSS 中 IE 浏览器的 hasLayout，IE 低版本的 bug 根源》</a><br><a href="https://segmentfault.com/a/1190000004632071">《CSS 魔法堂：hasLayout 原来是这样的！》</a></p><h4 id="43-元素竖向的百分比设定是相对于容器的高度吗？"><a href="#43-元素竖向的百分比设定是相对于容器的高度吗？" class="headerlink" title="43.元素竖向的百分比设定是相对于容器的高度吗？"></a>43.元素竖向的百分比设定是相对于容器的高度吗？</h4><pre class="line-numbers language-none"><code class="language-none">如果是height的话，是相对于包含块的高度。如果是padding或者margin竖直方向的属性则是相对于包含块的宽度。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="44-全屏滚动的原理是什么？用到了-CSS-的哪些属性？（待深入实践）"><a href="#44-全屏滚动的原理是什么？用到了-CSS-的哪些属性？（待深入实践）" class="headerlink" title="44.全屏滚动的原理是什么？用到了 CSS 的哪些属性？（待深入实践）"></a>44.全屏滚动的原理是什么？用到了 CSS 的哪些属性？（待深入实践）</h4><pre class="line-numbers language-none"><code class="language-none">原理：有点类似于轮播，整体的元素一直排列下去，假设有5个需要展示的全屏页面，那么高度是500%，只是展示100%，容器及容器内的页面取当前可视区高度，同时容器的父级元素overflow属性值设为hidden，通过更改容器可视区的位置来实现全屏滚动效果。主要是响应鼠标事件，页面通过CSS的动画效果，进行移动。overflow：hidden；transition：all 1000 ms ease；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>详细资料可以参考：<br><a href="https://blog.csdn.net/liona_koukou/article/details/52680409">《js 实现网页全屏切换（平滑过渡），鼠标滚动切换》</a><br><a href="https://juejin.im/post/5aeef41cf265da0ba0630de0">《用 ES6 写全屏滚动插件》</a></p><h4 id="45-什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的-IE？（待深入了解）"><a href="#45-什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的-IE？（待深入了解）" class="headerlink" title="45.什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的 IE？（待深入了解）"></a>45.什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的 IE？（待深入了解）</h4><pre class="line-numbers language-none"><code class="language-none">响应式网站设计是一个网站能够兼容多个终端，而不是为每一个终端做一个特定的版本。基本原理是通过媒体查询检测不同的设备屏幕尺寸做处理。页面头部必须有meta声明的viewport。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>详细资料可以参考：<br><a href="https://blog.csdn.net/dreamerframework/article/details/8994741">《响应式布局原理》</a><br><a href="http://www.mahaixiang.cn/wzsj/278.html">《响应式布局的实现方法和原理》</a></p><h4 id="46-视差滚动效果，如何给每页做不同的动画？（回到顶部，向下滑动要再次出现，和只出现一次分别怎么做？）"><a href="#46-视差滚动效果，如何给每页做不同的动画？（回到顶部，向下滑动要再次出现，和只出现一次分别怎么做？）" class="headerlink" title="46.视差滚动效果，如何给每页做不同的动画？（回到顶部，向下滑动要再次出现，和只出现一次分别怎么做？）"></a>46.视差滚动效果，如何给每页做不同的动画？（回到顶部，向下滑动要再次出现，和只出现一次分别怎么做？）</h4><pre class="line-numbers language-none"><code class="language-none">视差滚动是指多层背景以不同的速度移动，形成立体的运动效果，带来非常出色的视觉体验。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>详细资料可以参考：<br><a href="https://www.zhihu.com/question/20990029">《如何实现视差滚动效果的网页？》</a></p><h4 id="47-如何修改-chrome-记住密码后自动填充表单的黄色背景？"><a href="#47-如何修改-chrome-记住密码后自动填充表单的黄色背景？" class="headerlink" title="47.如何修改 chrome 记住密码后自动填充表单的黄色背景？"></a>47.如何修改 chrome 记住密码后自动填充表单的黄色背景？</h4><pre class="line-numbers language-none"><code class="language-none">chrome表单自动填充后，input文本框的背景会变成黄色的，通过审查元素可以看到这是由于chrome会默认给自动填充的input表单加上input:-webkit-autofill私有属性，然后对其赋予以下样式：&#123;background-color:rgb(250,255,189)!important;background-image:none!important;color:rgb(0,0,0)!important;&#125;对chrome默认定义的background-color，background-image，color使用important是不能提高其优先级的，但是其他属性可使用。使用足够大的纯色内阴影来覆盖input输入框的黄色背景，处理如下input:-webkit-autofill,textarea:-webkit-autofill,select:-webkit-autofill&#123;-webkit-box-shadow:000px 1000px white inset;border:1px solid #CCC !important;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>详细资料可以参考：<br><a href="https://blog.csdn.net/zsl_955200/article/details/78276209">《去掉 chrome 记住密码后的默认填充样式》</a><br><a href="https://blog.csdn.net/M_agician/article/details/73381706">《修改谷歌浏览器 chrome 记住密码后自动填充表单的黄色背景》</a></p><h4 id="48-怎么让-Chrome-支持小于-12px-的文字？"><a href="#48-怎么让-Chrome-支持小于-12px-的文字？" class="headerlink" title="48.怎么让 Chrome 支持小于 12px 的文字？"></a>48.怎么让 Chrome 支持小于 12px 的文字？</h4><pre class="line-numbers language-none"><code class="language-none">在谷歌下css设置字体大小为12px及以下时，显示都是一样大小，都是默认12px。解决办法：（1）可以使用Webkit的内核的-webkit-text-size-adjust的私有CSS属性来解决，只要加了-webkit-text-size-adjust:none;字体大小就不受限制了。但是chrome更新到27版本之后就不可以用了。所以高版本chrome谷歌浏览器已经不再支持-webkit-text-size-adjust样式，所以要使用时候慎用。（2）还可以使用css3的transform缩放属性-webkit-transform:scale(0.5);注意-webkit-transform:scale(0.75);收缩的是整个元素的大小，这时候，如果是内联元素，必须要将内联元素转换成块元素，可以使用display：block&#x2F;inline-block&#x2F;...；（3）使用图片：如果是内容固定不变情况下，使用将小于12px文字内容切出做图片，这样不影响兼容也不影响美观。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>详细资料可以参考：<br><a href="https://570109268.iteye.com/blog/2406562">《谷歌浏览器不支持 CSS 设置小于 12px 的文字怎么办？》</a></p><h4 id="49-让页面里的字体变清晰，变细用-CSS-怎么做？"><a href="#49-让页面里的字体变清晰，变细用-CSS-怎么做？" class="headerlink" title="49.让页面里的字体变清晰，变细用 CSS 怎么做？"></a>49.让页面里的字体变清晰，变细用 CSS 怎么做？</h4><pre class="line-numbers language-none"><code class="language-none">webkit内核的私有属性：-webkit-font-smoothing，用于字体抗锯齿，使用后字体看起来会更清晰舒服。在MacOS测试环境下面设置-webkit-font-smoothing:antialiased;但是这个属性仅仅是面向MacOS，其他操作系统设置后无效。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>详细资料可以参考：<br><a href="https://blog.csdn.net/huo_bao/article/details/50251585">《让字体变的更清晰 CSS 中-webkit-font-smoothing》</a></p><h4 id="50-font-style-属性中-italic-和-oblique-的区别？"><a href="#50-font-style-属性中-italic-和-oblique-的区别？" class="headerlink" title="50.font-style 属性中 italic 和 oblique 的区别？"></a>50.font-style 属性中 italic 和 oblique 的区别？</h4><pre class="line-numbers language-none"><code class="language-none">italic和oblique这两个关键字都表示“斜体”的意思。它们的区别在于，italic是使用当前字体的斜体字体，而oblique只是单纯地让文字倾斜。如果当前字体没有对应的斜体字体，则退而求其次，解析为oblique，也就是单纯形状倾斜。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="51-设备像素、css-像素、设备独立像素、dpr、ppi-之间的区别？"><a href="#51-设备像素、css-像素、设备独立像素、dpr、ppi-之间的区别？" class="headerlink" title="51.设备像素、css 像素、设备独立像素、dpr、ppi 之间的区别？"></a>51.设备像素、css 像素、设备独立像素、dpr、ppi 之间的区别？</h4><pre class="line-numbers language-none"><code class="language-none">设备像素指的是物理像素，一般手机的分辨率指的就是设备像素，一个设备的设备像素是不可变的。css像素和设备独立像素是等价的，不管在何种分辨率的设备上，css像素的大小应该是一致的，css像素是一个相对单位，它是相对于设备像素的，一个css像素的大小取决于页面缩放程度和dpr的大小。dpr指的是设备像素和设备独立像素的比值，一般的pc屏幕，dpr&#x3D;1。在iphone4时，苹果推出了retina屏幕，它的dpr为2。屏幕的缩放会改变dpr的值。ppi指的是每英寸的物理像素的密度，ppi越大，屏幕的分辨率越大。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>详细资料可以参考：<br><a href="https://www.cnblogs.com/libin-1/p/7148377.html">《什么是物理像素、虚拟像素、逻辑像素、设备像素，什么又是 PPI,DPI,DPR 和 DIP》</a><br><a href="https://www.jianshu.com/p/af6dad66e49a">《前端工程师需要明白的「像素」》</a><br><a href="https://github.com/jawil/blog/issues/21">《CSS 像素、物理像素、逻辑像素、设备像素比、PPI、Viewport》</a><br><a href="https://github.com/wujunchuan/wujunchuan.github.io/issues/15">《前端开发中像素的概念》</a></p><h4 id="52-layout-viewport、visual-viewport-和-ideal-viewport-的区别？"><a href="#52-layout-viewport、visual-viewport-和-ideal-viewport-的区别？" class="headerlink" title="52.layout viewport、visual viewport 和 ideal viewport 的区别？"></a>52.layout viewport、visual viewport 和 ideal viewport 的区别？</h4><p>相关知识点：</p><pre class="line-numbers language-none"><code class="language-none">如果把移动设备上浏览器的可视区域设为viewport的话，某些网站就会因为viewport太窄而显示错乱，所以这些浏览器就决定默认情况下把viewport设为一个较宽的值，比如980px，这样的话即使是那些为桌面设计的网站也能在移动浏览器上正常显示了。ppk把这个浏览器默认的viewport叫做layout viewport。layout viewport的宽度是大于浏览器可视区域的宽度的，所以我们还需要一个viewport来代表浏览器可视区域的大小，ppk把这个viewport叫做visual viewport。ideal viewport是最适合移动设备的viewport，ideal viewport的宽度等于移动设备的屏幕宽度，只要在css中把某一元素的宽度设为ideal viewport的宽度（单位用px），那么这个元素的宽度就是设备屏幕的宽度了，也就是宽度为100%的效果。ideal viewport的意义在于，无论在何种分辨率的屏幕下，那些针对ideal viewport而设计的网站，不需要用户手动缩放，也不需要出现横向滚动条，都可以完美的呈现给用户。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>回答：</p><pre class="line-numbers language-none"><code class="language-none">移动端一共需要理解三个viewport的概念的理解。第一个视口是布局视口，在移动端显示网页时，由于移动端的屏幕尺寸比较小，如果网页使用移动端的屏幕尺寸进行布局的话，那么整个页面的布局都会显示错乱。所以移动端浏览器提供了一个layout viewport布局视口的概念，使用这个视口来对页面进行布局展示，一般layout viewport的大小为980px，因此页面布局不会有太大的变化，我们可以通过拖动和缩放来查看到这个页面。第二个视口指的是视觉视口，visual viewport指的是移动设备上我们可见的区域的视口大小，一般为屏幕的分辨率的大小。visual viewport和layout viewport的关系，就像是我们通过窗户看外面的风景，视觉视口就是窗户，而外面的风景就是布局视口中的网页内容。第三个视口是理想视口，由于layout viewport一般比visual viewport要大，所以想要看到整个页面必须通过拖动和缩放才能实现。所以又提出了ideal viewport的概念，ideal viewport下用户不用缩放和滚动条就能够查看到整个页面，并且页面在不同分辨率下显示的内容大小相同。ideal viewport其实就是通过修改layout viewport的大小，让它等于设备的宽度，这个宽度可以理解为是设备独立像素，因此根据ideal viewport设计的页面，在不同分辨率的屏幕下，显示应该相同。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>详细资料可以参考：<br><a href="https://www.cnblogs.com/2050/p/3877280.html">《移动前端开发之 viewport 的深入理解》</a><br><a href="https://www.html.cn/archives/5975">《说说移动前端中 viewport（视口）》</a><br><a href="https://juejin.im/post/5b6d21daf265da0f9d1a2ed7#heading-14">《移动端适配知识你到底知多少》</a></p><h4 id="53-position-fixed-在-android-下无效怎么处理？"><a href="#53-position-fixed-在-android-下无效怎么处理？" class="headerlink" title="53.position:fixed;在 android 下无效怎么处理？"></a>53.position:fixed;在 android 下无效怎么处理？</h4><pre class="line-numbers language-none"><code class="language-none">因为移动端浏览器默认的viewport叫做layout viewport。在移动端显示时，因为layout viewport的宽度大于移动端屏幕的宽度，所以页面会出现滚动条左右移动，fixed的元素是相对layout viewport来固定位置的，而不是移动端屏幕来固定位置的，所以会出现感觉fixed无效的情况。如果想实现fixed相对于屏幕的固定效果，我们需要改变的是viewport的大小为ideal viewport，可以如下设置：&lt;metaname&#x3D;&quot;viewport&quot;content&#x3D;&quot;width&#x3D;device-width,initial-scale&#x3D;1.0,maximum-scale&#x3D;1.0,minimum-scale&#x3D;1.0,user-scalable&#x3D;no&quot;&#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="54-如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里）"><a href="#54-如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里）" class="headerlink" title="54.如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里）"></a>54.如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里）</h4><pre class="line-numbers language-none"><code class="language-none">多数显示器默认频率是60Hz，即1秒刷新60次，所以理论上最小间隔为1&#x2F;60*1000ms＝16.7ms<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="55-如何让去除-inline-block-元素间间距？"><a href="#55-如何让去除-inline-block-元素间间距？" class="headerlink" title="55.如何让去除 inline-block 元素间间距？"></a>55.如何让去除 inline-block 元素间间距？</h4><pre class="line-numbers language-none"><code class="language-none">移除空格、使用margin负值、使用font-size:0、letter-spacing、word-spacing<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>详细资料可以参考：<br><a href="https://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/">《去除 inline-block 元素间间距的 N 种方法》</a></p><h4 id="56-overflow-scroll-时不能平滑滚动的问题怎么处理？"><a href="#56-overflow-scroll-时不能平滑滚动的问题怎么处理？" class="headerlink" title="56.overflow:scroll 时不能平滑滚动的问题怎么处理？"></a>56.overflow:scroll 时不能平滑滚动的问题怎么处理？</h4><pre class="line-numbers language-none"><code class="language-none">以下代码可解决这种卡顿的问题：-webkit-overflow-scrolling:touch;是因为这行代码启用了硬件加速特性，所以滑动很流畅。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>详细资料可以参考：<br><a href="https://www.jianshu.com/p/1f4693d0ad2d">《解决页面使用 overflow:scroll 在 iOS 上滑动卡顿的问题》</a></p><h4 id="57-有一个高度自适应的-div，里面有两个-div，一个高度-100px，希望另一个填满剩下的高度。"><a href="#57-有一个高度自适应的-div，里面有两个-div，一个高度-100px，希望另一个填满剩下的高度。" class="headerlink" title="57.有一个高度自适应的 div，里面有两个 div，一个高度 100px，希望另一个填满剩下的高度。"></a>57.有一个高度自适应的 div，里面有两个 div，一个高度 100px，希望另一个填满剩下的高度。</h4><pre class="line-numbers language-none"><code class="language-none">（1）外层div使用position：relative；高度要求自适应的div使用position:absolute;top:100px;bottom:0;left:0;right:0;（2）使用flex布局，设置主轴为竖轴，第二个div的flex-grow为1。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>详细资料可以参考：<br><a href="https://blog.csdn.net/xutongbao/article/details/79408522">《有一个高度自适应的 div，里面有两个 div，一个高度 100px，希望另一个填满剩下的高度(三种方案)》</a></p><h4 id="58-png、jpg、gif-这些图片格式解释一下，分别什么时候用。有没有了解过-webp？"><a href="#58-png、jpg、gif-这些图片格式解释一下，分别什么时候用。有没有了解过-webp？" class="headerlink" title="58.png、jpg、gif 这些图片格式解释一下，分别什么时候用。有没有了解过 webp？"></a>58.png、jpg、gif 这些图片格式解释一下，分别什么时候用。有没有了解过 webp？</h4><p>相关知识点：</p><pre class="line-numbers language-none"><code class="language-none">（1）BMP，是无损的、既支持索引色也支持直接色的、点阵图。这种图片格式几乎没有对数据进行压缩，所以BMP格式的图片通常具有较大的文件大小。（2）GIF是无损的、采用索引色的、点阵图。采用LZW压缩算法进行编码。文件小，是GIF格式的优点，同时，GIF格式还具有支持动画以及透明的优点。但，GIF格式仅支持8bit的索引色，所以GIF格式适用于对色彩要求不高同时需要文件体积较小的场景。（3）JPEG是有损的、采用直接色的、点阵图。JPEG的图片的优点，是采用了直接色，得益于更丰富的色彩，JPEG非常适合用来存储照片，与GIF相比，JPEG不适合用来存储企业Logo、线框类的图。因为有损压缩会导致图片模糊，而直接色的选用，又会导致图片文件较GIF更大。（4）PNG-8是无损的、使用索引色的、点阵图。PNG是一种比较新的图片格式，PNG-8是非常好的GIF格式替代者，在可能的情况下，应该尽可能的使用PNG-8而不是GIF，因为在相同的图片效果下，PNG-8具有更小的文件体积。除此之外，PNG-8还支持透明度的调节，而GIF并不支持。现在，除非需要动画的支持，否则我们没有理由使用GIF而不是PNG-8。（5）PNG-24是无损的、使用直接色的、点阵图。PNG-24的优点在于，它压缩了图片的数据，使得同样效果的图片，PNG-24格式的文件大小要比BMP小得多。当然，PNG24的图片还是要比JPEG、GIF、PNG-8大得多。（6）SVG是无损的、矢量图。SVG是矢量图。这意味着SVG图片由直线和曲线以及绘制它们的方法组成。当你放大一个SVG图片的时候，你看到的还是线和曲线，而不会出现像素点。这意味着SVG图片在放大时，不会失真，所以它非常适合用来绘制企业Logo、Icon等。（7）WebP是谷歌开发的一种新图片格式，WebP是同时支持有损和无损压缩的、使用直接色的、点阵图。从名字就可以看出来它是为Web而生的，什么叫为Web而生呢？就是说相同质量的图片，WebP具有更小的文件体积。现在网站上充满了大量的图片，如果能够降低每一个图片的文件大小，那么将大大减少浏览器和服务器之间的数据传输量，进而降低访问延迟，提升访问体验。•在无损压缩的情况下，相同质量的WebP图片，文件大小要比PNG小26%；•在有损压缩的情况下，具有相同图片精度的WebP图片，文件大小要比JPEG小25%~34%；•WebP图片格式支持图片透明度，一个无损压缩的WebP图片，如果要支持透明度只需要22%的格外文件大小。但是目前只有Chrome浏览器和Opera浏览器支持WebP格式，兼容性不太好。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>回答：</p><pre class="line-numbers language-none"><code class="language-none">我了解到的一共有七种常见的图片的格式。（1）第一种是BMP格式，它是无损压缩的，支持索引色和直接色的点阵图。由于它基本上没有进行压缩，因此它的文件体积一般比较大。（2）第二种是GIF格式，它是无损压缩的使用索引色的点阵图。由于使用了LZW压缩方法，因此文件的体积很小。并且GIF还支持动画和透明度。但因为它使用的是索引色，所以它适用于一些对颜色要求不高且需要文件体积小的场景。（3）第三种是JPEG格式，它是有损压缩的使用直接色的点阵图。由于使用了直接色，色彩较为丰富，一般适用于来存储照片。但由于使用的是直接色，可能文件的体积相对于GIF格式来说更大。（4）第四种是PNG-8格式，它是无损压缩的使用索引色的点阵图。它是GIF的一种很好的替代格式，它也支持透明度的调整，并且文件的体积相对于GIF格式更小。一般来说如果不是需要动画的情况，我们都可以使用PNG-8格式代替GIF格式。（5）第五种是PNG-24格式，它是无损压缩的使用直接色的点阵图。PNG-24的优点是它使用了压缩算法，所以它的体积比BMP格式的文件要小得多，但是相对于其他的几种格式，还是要大一些。（6）第六种格式是svg格式，它是矢量图，它记录的图片的绘制方式，因此对矢量图进行放大和缩小不会产生锯齿和失真。它一般适合于用来制作一些网站logo或者图标之类的图片。（7）第七种格式是webp格式，它是支持有损和无损两种压缩方式的使用直接色的点阵图。使用webp格式的最大的优点是，在相同质量的文件下，它拥有更小的文件体积。因此它非常适合于网络图片的传输，因为图片体积的减少，意味着请求时间的减小，这样会提高用户的体验。这是谷歌开发的一种新的图片格式，目前在兼容性上还不是太好。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>详细资料可以参考：<br><a href="https://www.cnblogs.com/xinzhao/p/5130410.html">《图片格式那么多，哪种更适合你？》</a></p><h4 id="59-浏览器如何判断是否支持-webp-格式图片"><a href="#59-浏览器如何判断是否支持-webp-格式图片" class="headerlink" title="59.浏览器如何判断是否支持 webp 格式图片"></a>59.浏览器如何判断是否支持 webp 格式图片</h4><pre class="line-numbers language-none"><code class="language-none">（1）宽高判断法。通过创建image对象，将其src属性设置为webp格式的图片，然后在onload事件中获取图片的宽高，如果能够获取，则说明浏览器支持webp格式图片。如果不能获取或者触发了onerror函数，那么就说明浏览器不支持webp格式的图片。（2）canvas判断方法。我们可以动态的创建一个canvas对象，通过canvas的toDataURL将设置为webp格式，然后判断返回值中是否含有image&#x2F;webp字段，如果包含则说明支持WebP，反之则不支持。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>详细资料可以参考：<br><a href="https://blog.csdn.net/jesslu/article/details/82495061">《判断浏览器是否支持 WebP 图片》</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCanvasElement/toDataURL">《toDataURL()》</a></p><h4 id="60-什么是-Cookie-隔离？（或者说：请求资源的时候不要让它带-cookie-怎么做）"><a href="#60-什么是-Cookie-隔离？（或者说：请求资源的时候不要让它带-cookie-怎么做）" class="headerlink" title="60.什么是 Cookie 隔离？（或者说：请求资源的时候不要让它带 cookie 怎么做）"></a>60.什么是 Cookie 隔离？（或者说：请求资源的时候不要让它带 cookie 怎么做）</h4><pre class="line-numbers language-none"><code class="language-none">网站向服务器请求的时候，会自动带上cookie这样增加表头信息量，使请求变慢。如果静态文件都放在主域名下，那静态文件请求的时候都带有的cookie的数据提交给server的，非常浪费流量，所以不如隔离开，静态资源放CDN。因为cookie有域的限制，因此不能跨域提交请求，故使用非主要域名的时候，请求头中就不会带有cookie数据，这样可以降低请求头的大小，降低请求时间，从而达到降低整体请求延时的目的。同时这种方式不会将cookie传入WebServer，也减少了WebServer对cookie的处理分析环节，提高了webserver的http请求的解析速度。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>详细资料可以参考：<br><a href="https://www.zhihu.com/question/36514327?rf=37353035">《CDN 是什么？使用 CDN 有什么优势？》</a></p><h4 id="61-style-标签写在-body-后与-body-前有什么区别？"><a href="#61-style-标签写在-body-后与-body-前有什么区别？" class="headerlink" title="61.style 标签写在 body 后与 body 前有什么区别？"></a>61.style 标签写在 body 后与 body 前有什么区别？</h4><pre class="line-numbers language-none"><code class="language-none">页面加载自上而下当然是先加载样式。写在body标签后由于浏览器以逐行方式对HTML文档进行解析，当解析到写在尾部的样式表（外联或写在style标签）会导致浏览器停止之前的渲染，等待加载且解析样式表完成之后重新渲染，在windows的IE下可能会出现FOUC现象（即样式失效导致的页面闪烁问题）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="62-什么是-CSS-预处理器-后处理器？"><a href="#62-什么是-CSS-预处理器-后处理器？" class="headerlink" title="62.什么是 CSS 预处理器/后处理器？"></a>62.什么是 CSS 预处理器/后处理器？</h4><pre class="line-numbers language-none"><code class="language-none">CSS预处理器定义了一种新的语言，其基本思想是，用一种专门的编程语言，为CSS增加了一些编程的特性，将CSS作为目标生成文件，然后开发者就只要使用这种语言进行编码工作。通俗的说，CSS预处理器用一种专门的编程语言，进行Web页面样式设计，然后再编译成正常的CSS文件。预处理器例如：LESS、Sass、Stylus，用来预编译Sass或less csssprite，增强了css代码的复用性，还有层级、mixin、变量、循环、函数等，具有很方便的UI组件模块化开发能力，极大的提高工作效率。CSS后处理器是对CSS进行处理，并最终生成CSS的预处理器，它属于广义上的CSS预处理器。我们很久以前就在用CSS后处理器了，最典型的例子是CSS压缩工具（如clean-css），只不过以前没单独拿出来说过。还有最近比较火的Autoprefixer，以CanIUse上的浏览器支持数据为基础，自动处理兼容性问题。后处理器例如：PostCSS，通常被视为在完成的样式表中根据CSS规范处理CSS，让其更有效；目前最常做的是给CSS属性添加浏览器私有前缀，实现跨浏览器兼容性的问题。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>详细资料可以参考：<br><a href="https://blog.csdn.net/yushuangyushuang/article/details/79209752">《CSS 预处理器和后处理器》</a></p><h4 id="63-阐述一下-CSSSprites"><a href="#63-阐述一下-CSSSprites" class="headerlink" title="63.阐述一下 CSSSprites"></a>63.阐述一下 CSSSprites</h4><pre class="line-numbers language-none"><code class="language-none">将一个页面涉及到的所有图片都包含到一张大图中去，然后利用CSS的background-image，background-repeat，background-position的组合进行背景定位。利用CSSSprites能很好地减少网页的http请求，从而很好的提高页面的性能；CSSSprites能减少图片的字节。优点：减少HTTP请求数，极大地提高页面加载速度增加图片信息重复度，提高压缩比，减少图片大小更换风格方便，只需在一张或几张图片上修改颜色或样式即可实现缺点：图片合并麻烦维护麻烦，修改一个图片可能需要重新布局整个图片，样式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="64-使用-rem-布局的优缺点？"><a href="#64-使用-rem-布局的优缺点？" class="headerlink" title="64.使用 rem 布局的优缺点？"></a>64.使用 rem 布局的优缺点？</h4><pre class="line-numbers language-none"><code class="language-none">优点：在屏幕分辨率千差万别的时代，只要将rem与屏幕分辨率关联起来就可以实现页面的整体缩放，使得在设备上的展现都统一起来了。而且现在浏览器基本都已经支持rem了，兼容性也非常的好。缺点：（1）在奇葩的dpr设备上表现效果不太好，比如一些华为的高端机型用rem布局会出现错乱。（2）使用iframe引用也会出现问题。（3）rem在多屏幕尺寸适配上与当前两大平台的设计哲学不一致。即大屏的出现到底是为了看得又大又清楚，还是为了看的更多的问题。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>详细资料可以参考：<br><a href="https://www.zhihu.com/question/21504656">《css3 的字体大小单位 rem 到底好在哪？》</a><br><a href="https://www.jianshu.com/p/e8ae1c3861dc">《VW:是时候放弃 REM 布局了》</a><br><a href="https://blog.csdn.net/Honeymao/article/details/76795089">《为什么设计稿是 750px》</a><br><a href="https://github.com/amfe/article/issues/17">《使用 Flexible 实现手淘 H5 页面的终端适配》</a></p><h4 id="65-几种常见的-CSS-布局"><a href="#65-几种常见的-CSS-布局" class="headerlink" title="65.几种常见的 CSS 布局"></a>65.几种常见的 CSS 布局</h4><p>详细的资料可以参考：<br><a href="https://juejin.im/post/5bbcd7ff5188255c80668028#heading-12">《几种常见的 CSS 布局》</a></p><h4 id="66-画一条-0-5px-的线"><a href="#66-画一条-0-5px-的线" class="headerlink" title="66.画一条 0.5px 的线"></a>66.画一条 0.5px 的线</h4><pre class="line-numbers language-none"><code class="language-none">采用meta viewport的方式采用border-image的方式采用transform:scale()的方式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>详细资料可以参考：<br><a href="https://juejin.im/post/5ab65f40f265da2384408a95">《怎么画一条 0.5px 的边（更新）》</a></p><h4 id="67-transition-和-animation-的区别"><a href="#67-transition-和-animation-的区别" class="headerlink" title="67.transition 和 animation 的区别"></a>67.transition 和 animation 的区别</h4><pre class="line-numbers language-none"><code class="language-none">transition关注的是CSS property的变化，property值和时间的关系是一个三次贝塞尔曲线。animation作用于元素本身而不是样式属性，可以使用关键帧的概念，应该说可以实现更自由的动画效果。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>详细资料可以参考：<br><a href="https://www.zhihu.com/question/19749045">《CSSanimation 与 CSStransition 有何区别？》</a><br><a href="https://blog.csdn.net/cddcj/article/details/53582334">《CSS3Transition 和 Animation 区别及比较》</a><br><a href="http://www.ruanyifeng.com/blog/2014/02/css_transition_and_animation.html">《CSS 动画简介》</a><br><a href="https://juejin.im/post/5b137e6e51882513ac201dfb">《CSS 动画：animation、transition、transform、translate》</a></p><h4 id="68-什么是首选最小宽度？"><a href="#68-什么是首选最小宽度？" class="headerlink" title="68.什么是首选最小宽度？"></a>68.什么是首选最小宽度？</h4><pre class="line-numbers language-none"><code class="language-none">“首选最小宽度”，指的是元素最适合的最小宽度。东亚文字（如中文）最小宽度为每个汉字的宽度。西方文字最小宽度由特定的连续的英文字符单元决定。并不是所有的英文字符都会组成连续单元，一般会终止于空格（普通空格）、短横线、问号以及其他非英文字符等。如果想让英文字符和中文一样，每一个字符都用最小宽度单元，可以试试使用CSS中的word-break:break-all。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="69-为什么-height-100-会无效？"><a href="#69-为什么-height-100-会无效？" class="headerlink" title="69.为什么 height:100%会无效？"></a>69.为什么 height:100%会无效？</h4><pre class="line-numbers language-none"><code class="language-none">对于普通文档流中的元素，百分比高度值要想起作用，其父级必须有一个可以生效的高度值。原因是如果包含块的高度没有显式指定（即高度由内容决定），并且该元素不是绝对定位，则计算值为auto，因为解释成了auto，所以无法参与计算。使用绝对定位的元素会有计算值，即使祖先元素的height计算为auto也是如此。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="70-min-width-max-width-和-min-height-max-height-属性间的覆盖规则？"><a href="#70-min-width-max-width-和-min-height-max-height-属性间的覆盖规则？" class="headerlink" title="70.min-width/max-width 和 min-height/max-height 属性间的覆盖规则？"></a>70.min-width/max-width 和 min-height/max-height 属性间的覆盖规则？</h4><pre class="line-numbers language-none"><code class="language-none">（1）max-width会覆盖width，即使width是行类样式或者设置了!important。（2）min-width会覆盖max-width，此规则发生在min-width和max-width冲突的时候。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="71-内联盒模型基本概念"><a href="#71-内联盒模型基本概念" class="headerlink" title="71.内联盒模型基本概念"></a>71.内联盒模型基本概念</h4><pre class="line-numbers language-none"><code class="language-none">（1）内容区域（content area）。内容区域指一种围绕文字看不见的盒子，其大小仅受字符本身特性控制，本质上是一个字符盒子（character box）；但是有些元素，如图片这样的替换元素，其内容显然不是文字，不存在字符盒子之类的，因此，对于这些元素，内容区域可以看成元素自身。（2）内联盒子（inline box）。“内联盒子”不会让内容成块显示，而是排成一行，这里的“内联盒子”实际指的就是元素的“外在盒子”，用来决定元素是内联还是块级。该盒子又可以细分为“内联盒子”和“匿名内联盒子”两类。（3）行框盒子（line box），每一行就是一个“行框盒子”（实线框标注），每个“行框盒子”又是由一个一个“内联盒子”组成的。（4）包含块（containing box），由一行一行的“行框盒子”组成。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="72-什么是幽灵空白节点？"><a href="#72-什么是幽灵空白节点？" class="headerlink" title="72.什么是幽灵空白节点？"></a>72.什么是幽灵空白节点？</h4><pre class="line-numbers language-none"><code class="language-none">“幽灵空白节点”是内联盒模型中非常重要的一个概念，具体指的是：在HTML5文档声明中，内联元素的所有解析和渲染表现就如同每个行框盒子的前面有一个“空白节点”一样。这个“空白节点”永远透明，不占据任何宽度，看不见也无法通过脚本获取，就好像幽灵一样，但又确确实实地存在，表现如同文本节点一样，因此，我称之为“幽灵空白节点”。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="73-什么是替换元素？"><a href="#73-什么是替换元素？" class="headerlink" title="73.什么是替换元素？"></a>73.什么是替换元素？</h4><pre class="line-numbers language-none"><code class="language-none">通过修改某个属性值呈现的内容就可以被替换的元素就称为“替换元素”。因此，&lt;img&gt;、&lt;object&gt;、&lt;video&gt;、&lt;iframe&gt;或者表单元素&lt;textarea&gt;和&lt;input&gt;和&lt;select&gt;都是典型的替换元素。替换元素除了内容可替换这一特性以外，还有以下一些特性。（1）内容的外观不受页面上的CSS的影响。用专业的话讲就是在样式表现在CSS作用域之外。如何更改替换元素本身的外观需要类似appearance属性，或者浏览器自身暴露的一些样式接口，（2）有自己的尺寸。在Web中，很多替换元素在没有明确尺寸设定的情况下，其默认的尺寸（不包括边框）是300像素×150像素，如&lt;video&gt;、&lt;iframe&gt;或者&lt;canvas&gt;等，也有少部分替换元素为0像素，如&lt;img&gt;图片，而表单元素的替换元素的尺寸则和浏览器有关，没有明显的规律。（3）在很多CSS属性上有自己的一套表现规则。比较具有代表性的就是vertical-align属性，对于替换元素和非替换元素，vertical-align属性值的解释是不一样的。比方说vertical-align的默认值的baseline，很简单的属性值，基线之意，被定义为字符x的下边缘，而替换元素的基线却被硬生生定义成了元素的下边缘。（4）所有的替换元素都是内联水平元素，也就是替换元素和替换元素、替换元素和文字都是可以在一行显示的。但是，替换元素默认的display值却是不一样的，有的是inline，有的是inline-block。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="74-替换元素的计算规则？"><a href="#74-替换元素的计算规则？" class="headerlink" title="74.替换元素的计算规则？"></a>74.替换元素的计算规则？</h4><pre class="line-numbers language-none"><code class="language-none">替换元素的尺寸从内而外分为3类：固有尺寸、HTML尺寸和CSS尺寸。（1）固有尺寸指的是替换内容原本的尺寸。例如，图片、视频作为一个独立文件存在的时候，都是有着自己的宽度和高度的。（2）HTML尺寸只能通过HTML原生属性改变，这些HTML原生属性包括&lt;img&gt;的width和height属性、&lt;input&gt;的size属性、&lt;textarea&gt;的cols和rows属性等。（3）CSS尺寸特指可以通过CSS的width和height或者max-width&#x2F;min-width和max-height&#x2F;min-height设置的尺寸，对应盒尺寸中的content box。这3层结构的计算规则具体如下（1）如果没有CSS尺寸和HTML尺寸，则使用固有尺寸作为最终的宽高。（2）如果没有CSS尺寸，则使用HTML尺寸作为最终的宽高。（3）如果有CSS尺寸，则最终尺寸由CSS属性决定。（4）如果“固有尺寸”含有固有的宽高比例，同时仅设置了宽度或仅设置了高度，则元素依然按照固有的宽高比例显示。（5）如果上面的条件都不符合，则最终宽度表现为300像素，高度为150像素。（6）内联替换元素和块级替换元素使用上面同一套尺寸计算规则。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="75-content-与替换元素的关系？"><a href="#75-content-与替换元素的关系？" class="headerlink" title="75.content 与替换元素的关系？"></a>75.content 与替换元素的关系？</h4><pre class="line-numbers language-none"><code class="language-none">content属性生成的对象称为“匿名替换元素”。（1）我们使用content生成的文本是无法选中、无法复制的，好像设置了user select:none声明一般，但是普通元素的文本却可以被轻松选中。同时，content生成的文本无法被屏幕阅读设备读取，也无法被搜索引擎抓取，因此，千万不要自以为是地把重要的文本信息使用content属性生成，因为这对可访问性和SEO都很不友好。（2）content生成的内容不能左右:empty伪类。（3）content动态生成值无法获取。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="76-margin-auto-的填充规则？"><a href="#76-margin-auto-的填充规则？" class="headerlink" title="76.margin:auto 的填充规则？"></a>76.margin:auto 的填充规则？</h4><pre class="line-numbers language-none"><code class="language-none">margin的&#39;auto&#39;可不是摆设，是具有强烈的计算意味的关键字，用来计算元素对应方向应该获得的剩余间距大小。但是触发margin:auto计算有一个前提条件，就是width或height为auto时，元素是具有对应方向的自动填充特性的。（1）如果一侧定值，一侧auto，则auto为剩余空间大小。（2）如果两侧均是auto，则平分剩余空间。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="77-margin-无效的情形"><a href="#77-margin-无效的情形" class="headerlink" title="77.margin 无效的情形"></a>77.margin 无效的情形</h4><pre class="line-numbers language-none"><code class="language-none">（1）display计算值inline的非替换元素的垂直margin是无效的。对于内联替换元素，垂直margin有效，并且没有margin合并的问题。（2）表格中的&lt;tr&gt;和&lt;td&gt;元素或者设置display计算值是table-cell或table-row的元素的margin都是无效的。（3）绝对定位元素非定位方位的margin值“无效”。（4）定高容器的子元素的margin-bottom或者宽度定死的子元素的margin-right的定位“失效”。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="78-border-的特殊性？"><a href="#78-border-的特殊性？" class="headerlink" title="78.border 的特殊性？"></a>78.border 的特殊性？</h4><pre class="line-numbers language-none"><code class="language-none">（1）border-width却不支持百分比。（2）border-style的默认值是none，有一部分人可能会误以为是solid。这也是单纯设置border-width或border-color没有边框显示的原因。（3）border-style:double的表现规则：双线宽度永远相等，中间间隔±1。（4）border-color默认颜色就是color色值。（5）默认background背景图片是相对于padding box定位的。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="79-什么是基线和-x-height？"><a href="#79-什么是基线和-x-height？" class="headerlink" title="79.什么是基线和 x-height？"></a>79.什么是基线和 x-height？</h4><pre class="line-numbers language-none"><code class="language-none">字母x的下边缘（线）就是我们的基线。x-height指的就是小写字母x的高度，术语描述就是基线和等分线（meanline）（也称作中线，midline）之间的距离。在CSS世界中，middle指的是基线往上1&#x2F;2x-height高度。我们可以近似理解为字母x交叉点那个位置。ex是CSS中的一个相对单位，指的是小写字母x的高度，没错，就是指x-height。ex的价值就在其副业上不受字体和字号影响的内联元素的垂直居中对齐效果。内联元素默认是基线对齐的，而基线就是x的底部，而1ex就是一个x的高度。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="80-line-height-的特殊性？"><a href="#80-line-height-的特殊性？" class="headerlink" title="80.line-height 的特殊性？"></a>80.line-height 的特殊性？</h4><pre class="line-numbers language-none"><code class="language-none">（1）对于非替换元素的纯内联元素，其可视高度完全由line-height决定。对于文本这样的纯内联元素，line-height就是高度计算的基石，用专业说法就是指定了用来计算行框盒子高度的基础高度。（2）内联元素的高度由固定高度和不固定高度组成，这个不固定的部分就是这里的“行距”。换句话说，line-height之所以起作用，就是通过改变“行距”来实现的。在CSS中，“行距”分散在当前文字的上方和下方，也就是即使是第一行文字，其上方也是有“行距”的，只不过这个“行距”的高度仅仅是完整“行距”高度的一半，因此，也被称为“半行距”。（3）行距&#x3D;line-height-font-size。（4）border以及line-height等传统CSS属性并没有小数像素的概念。如果标注的是文字上边距，则向下取整；如果是文字下边距，则向上取整。（5）对于纯文本元素，line-height直接决定了最终的高度。但是，如果同时有替换元素，则line-height只能决定最小高度。（6）对于块级元素，line-height对其本身是没有任何作用的，我们平时改变line-height，块级元素的高度跟着变化实际上是通过改变块级元素里面内联级别元素占据的高度实现的。（7）line-height的默认值是normal，还支持数值、百分比值以及长度值。为数值类型时，其最终的计算值是和当前font-size相乘后的值。为百分比值时，其最终的计算值是和当前font-size相乘后的值。为长度值时原意不变。（8）如果使用数值作为line-height的属性值，那么所有的子元素继承的都是这个值；但是，如果使用百分比值或者长度值作为属性值，那么所有的子元素继承的是最终的计算值。（9）无论内联元素line-height如何设置，最终父级元素的高度都是由数值大的那个line-height决定的。（10）只要有“内联盒子”在，就一定会有“行框盒子”，就是每一行内联元素外面包裹的一层看不见的盒子。然后，重点来了，在每个“行框盒子”前面有一个宽度为0的具有该元素的字体和行高属性的看不见的“幽灵空白节点”。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="81-vertical-align-的特殊性？"><a href="#81-vertical-align-的特殊性？" class="headerlink" title="81.vertical-align 的特殊性？"></a>81.vertical-align 的特殊性？</h4><pre class="line-numbers language-none"><code class="language-none">（1）vertical-align的默认值是baseline，即基线对齐，而基线的定义是字母x的下边缘。因此，内联元素默认都是沿着字母x的下边缘对齐的。对于图片等替换元素，往往使用元素本身的下边缘作为基线。：一个inline-block元素，如果里面没有内联元素，或者overflow不是visible，则该元素的基线就是其margin底边缘；否则其基线就是元素里面最后一行内联元素的基线。（2）vertical-align:top就是垂直上边缘对齐，如果是内联元素，则和这一行位置最高的内联元素的顶部对齐；如果display计算值是table-cell的元素，我们不妨脑补成&lt;td&gt;元素，则和&lt;tr&gt;元素上边缘对齐。（3）vertical-align:middle是中间对齐，对于内联元素，元素的垂直中心点和行框盒子基线往上1&#x2F;2x-height处对齐。对于table-cell元素，单元格填充盒子相对于外面的表格行居中对齐。（4）vertical-align支持数值属性，根据数值的不同，相对于基线往上或往下偏移，如果是负值，往下偏移，如果是正值，往上偏移。（5）vertical-align属性的百分比值则是相对于line-height的计算值计算的。（6）vertical-align起作用是有前提条件的，这个前提条件就是：只能应用于内联元素以及display值为table-cell的元素。（7）table-cell元素设置vertical-align垂直对齐的是子元素，但是其作用的并不是子元素，而是table-cell元素自身。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="82-overflow-的特殊性？"><a href="#82-overflow-的特殊性？" class="headerlink" title="82.overflow 的特殊性？"></a>82.overflow 的特殊性？</h4><pre class="line-numbers language-none"><code class="language-none">（1）一个设置了overflow:hidden声明的元素，假设同时存在border属性和padding属性，则当子元素内容超出容器宽度高度限制的时候，剪裁的边界是border box的内边缘，而非padding box的内边缘。（2）HTML中有两个标签是默认可以产生滚动条的，一个是根元素&lt;html&gt;，另一个是文本域&lt;textarea&gt;。（3）滚动条会占用容器的可用宽度或高度。（4）元素设置了overflow:hidden声明，里面内容高度溢出的时候，滚动依然存在，仅仅滚动条不存在！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="83-无依赖绝对定位是什么？"><a href="#83-无依赖绝对定位是什么？" class="headerlink" title="83.无依赖绝对定位是什么？"></a>83.无依赖绝对定位是什么？</h4><pre class="line-numbers language-none"><code class="language-none">没有设置left&#x2F;top&#x2F;right&#x2F;bottom属性值的绝对定位称为“无依赖绝对定位”。无依赖绝对定位其定位的位置和没有设置position:absolute时候的位置相关。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="84-absolute-与-overflow-的关系？"><a href="#84-absolute-与-overflow-的关系？" class="headerlink" title="84.absolute 与 overflow 的关系？"></a>84.absolute 与 overflow 的关系？</h4><pre class="line-numbers language-none"><code class="language-none">（1）如果overflow不是定位元素，同时绝对定位元素和overflow容器之间也没有定位元素，则overflow无法对absolute元素进行剪裁。（2）如果overflow的属性值不是hidden而是auto或者scroll，即使绝对定位元素高宽比overflow元素高宽还要大，也都不会出现滚动条。（3）overflow元素自身transform的时候，Chrome和Opera浏览器下的overflow剪裁是无效的。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="85-clip-裁剪是什么？"><a href="#85-clip-裁剪是什么？" class="headerlink" title="85.clip 裁剪是什么？"></a>85.clip 裁剪是什么？</h4><pre class="line-numbers language-none"><code class="language-none">所谓“可访问性隐藏”，指的是虽然内容肉眼看不见，但是其他辅助设备却能够进行识别和访问的隐藏。clip剪裁被我称为“最佳可访问性隐藏”的另外一个原因就是，它具有更强的普遍适应性，任何元素、任何场景都可以无障碍使用。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="86-relative-的特殊性？"><a href="#86-relative-的特殊性？" class="headerlink" title="86.relative 的特殊性？"></a>86.relative 的特殊性？</h4><pre class="line-numbers language-none"><code class="language-none">（1）相对定位元素的left&#x2F;top&#x2F;right&#x2F;bottom的百分比值是相对于包含块计算的，而不是自身。注意，虽然定位位移是相对自身，但是百分比值的计算值不是。（2）top和bottom这两个垂直方向的百分比值计算跟height的百分比值是一样的，都是相对高度计算的。同时，如果包含块的高度是auto，那么计算值是0，偏移无效，也就是说，如果父元素没有设定高度或者不是“格式化高度”，那么relative类似top:20%的代码等同于top:0。（3）当相对定位元素同时应用对立方向定位值的时候，也就是top&#x2F;bottom和left&#x2F;right同时使用的时候，只有一个方向的定位属性会起作用。而谁起作用则是与文档流的顺序有关的，默认的文档流是自上而下、从左往右，因此top&#x2F;bottom同时使用的时候，bottom失效；left&#x2F;right同时使用的时候，right失效。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="87-什么是层叠上下文？"><a href="#87-什么是层叠上下文？" class="headerlink" title="87.什么是层叠上下文？"></a>87.什么是层叠上下文？</h4><pre class="line-numbers language-none"><code class="language-none">层叠上下文，英文称作stacking context，是HTML中的一个三维的概念。如果一个元素含有层叠上下文，我们可以理解为这个元素在z轴上就“高人一等”。层叠上下文元素有如下特性：（1）层叠上下文的层叠水平要比普通元素高（原因后面会说明）。（2）层叠上下文可以阻断元素的混合模式。（3）层叠上下文可以嵌套，内部层叠上下文及其所有子元素均受制于外部的“层叠上下文”。（4）每个层叠上下文和兄弟元素独立，也就是说，当进行层叠变化或渲染的时候，只需要考虑后代元素。（5）每个层叠上下文是自成体系的，当元素发生层叠的时候，整个元素被认为是在父层叠上下文的层叠顺序中。层叠上下文的创建：（1）页面根元素天生具有层叠上下文，称为根层叠上下文。根层叠上下文指的是页面根元素，可以看成是&lt;html&gt;元素。因此，页面中所有的元素一定处于至少一个“层叠结界”中。（2）对于position值为relative&#x2F;absolute以及Firefox&#x2F;IE浏览器（不包括Chrome浏览器）下含有position:fixed声明的定位元素，当其z-index值不是auto的时候，会创建层叠上下文。Chrome等WebKit内核浏览器下，position:fixed元素天然层叠上下文元素，无须z-index为数值。根据我的测试，目前IE和Firefox仍是老套路。（3）其他一些CSS3属性，比如元素的opacity值不是1。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="88-什么是层叠水平？"><a href="#88-什么是层叠水平？" class="headerlink" title="88.什么是层叠水平？"></a>88.什么是层叠水平？</h4><pre class="line-numbers language-none"><code class="language-none">层叠水平，英文称作stacking level，决定了同一个层叠上下文中元素在z轴上的显示顺序。显而易见，所有的元素都有层叠水平，包括层叠上下文元素，也包括普通元素。然而，对普通元素的层叠水平探讨只局限在当前层叠上下文元素中。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="89-元素的层叠顺序？"><a href="#89-元素的层叠顺序？" class="headerlink" title="89.元素的层叠顺序？"></a>89.元素的层叠顺序？</h4><p>层叠顺序，英文称作 stacking order，表示元素发生层叠时有着特定的垂直显示顺序。</p><p><img src="https://cavszhouyou-1254093697.cos.ap-chongqing.myqcloud.com/note-15.png" alt="层叠顺序"></p><h4 id="90-层叠准则？"><a href="#90-层叠准则？" class="headerlink" title="90.层叠准则？"></a>90.层叠准则？</h4><pre class="line-numbers language-none"><code class="language-none">（1）谁大谁上：当具有明显的层叠水平标识的时候，如生效的z-index属性值，在同一个层叠上下文领域，层叠水平值大的那一个覆盖小的那一个。（2）后来居上：当元素的层叠水平一致、层叠顺序相同的时候，在DOM流中处于后面的元素会覆盖前面的元素。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="91-font-weight-的特殊性？"><a href="#91-font-weight-的特殊性？" class="headerlink" title="91.font-weight 的特殊性？"></a>91.font-weight 的特殊性？</h4><pre class="line-numbers language-none"><code class="language-none">如果使用数值作为font-weight属性值，必须是100～900的整百数。因为这里的数值仅仅是外表长得像数值，实际上是一个具有特定含义的关键字，并且这里的数值关键字和字母关键字之间是有对应关系的。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="92-text-indent-的特殊性？"><a href="#92-text-indent-的特殊性？" class="headerlink" title="92.text-indent 的特殊性？"></a>92.text-indent 的特殊性？</h4><pre class="line-numbers language-none"><code class="language-none">（1）text-indent仅对第一行内联盒子内容有效。（2）非替换元素以外的display计算值为inline的内联元素设置text-indent值无效，如果计算值inline-block&#x2F;inline-table则会生效。（3）&lt;input&gt;标签按钮text-indent值无效。（4）&lt;button&gt;标签按钮text-indent值有效。（5）text-indent的百分比值是相对于当前元素的“包含块”计算的，而不是当前元素。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="93-letter-spacing-与字符间距？"><a href="#93-letter-spacing-与字符间距？" class="headerlink" title="93.letter-spacing 与字符间距？"></a>93.letter-spacing 与字符间距？</h4><pre class="line-numbers language-none"><code class="language-none">letter-spacing可以用来控制字符之间的间距，这里说的“字符”包括英文字母、汉字以及空格等。letter-spacing具有以下一些特性。（1）继承性。（2）默认值是normal而不是0。虽然说正常情况下，normal的计算值就是0，但两者还是有差别的，在有些场景下，letter-spacing会调整normal的计算值以实现更好的版面布局。（3）支持负值，且值足够大的时候，会让字符形成重叠，甚至反向排列。（4）和text-indent属性一样，无论值多大或多小，第一行一定会保留至少一个字符。（5）支持小数值，即使0.1px也是支持的。（6）暂不支持百分比值。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="94-word-spacing-与单词间距？"><a href="#94-word-spacing-与单词间距？" class="headerlink" title="94.word-spacing 与单词间距？"></a>94.word-spacing 与单词间距？</h4><pre class="line-numbers language-none"><code class="language-none">letter-spacing作用于所有字符，但word-spacing仅作用于空格字符。换句话说，word-spacing的作用就是增加空格的间隙宽度。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="95-white-space-与换行和空格的控制？"><a href="#95-white-space-与换行和空格的控制？" class="headerlink" title="95.white-space 与换行和空格的控制？"></a>95.white-space 与换行和空格的控制？</h4><pre class="line-numbers language-none"><code class="language-none">white-space属性声明了如何处理元素内的空白字符，这类空白字符包括Space（空格）键、Enter（回车）键、Tab（制表符）键产生的空白。因此，white-space可以决定图文内容是否在一行显示（回车空格是否生效），是否显示大段连续空白（空格是否生效）等。其属性值包括下面这些。•normal：合并空白字符和换行符。•pre：空白字符不合并，并且内容只在有换行符的地方换行。•nowrap：该值和normal一样会合并空白字符，但不允许文本环绕。•pre-wrap：空白字符不合并，并且内容只在有换行符的地方换行，同时允许文本环绕。•pre-line：合并空白字符，但只在有换行符的地方换行，允许文本环绕。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="96-隐藏元素的-background-image-到底加不加载？"><a href="#96-隐藏元素的-background-image-到底加不加载？" class="headerlink" title="96.隐藏元素的 background-image 到底加不加载？"></a>96.隐藏元素的 background-image 到底加不加载？</h4><p>相关知识点：</p><pre class="line-numbers language-none"><code class="language-none">根据测试，一个元素如果display计算值为none，在IE浏览器下（IE8～IE11，更高版本不确定）依然会发送图片请求，Firefox浏览器不会，至于Chrome和Safari浏览器则似乎更加智能一点：如果隐藏元素同时又设置了background-image，则图片依然会去加载；如果是父元素的display计算值为none，则背景图不会请求，此时浏览器或许放心地认为这个背景图暂时是不会使用的。如果不是background-image，而是&lt;img&gt;元素，则设置display:none在所有浏览器下依旧都会请求图片资源。还需要注意的是如果设置的样式没有对应的元素，则background-image也不会加载。hover情况下的background-image，在触发时加载。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>回答：</p><p>-（1）元素的背景图片</p><p>-元素本身设置 display:none，会请求图片 -父级元素设置 display:none，不会请求图片 -样式没有元素使用，不会请求<br>-:hover 样式下，触发时请求</p><p>-（2）img 标签图片任何情况下都会请求图片</p><p>详细资料可以参考：<br><a href="https://www.jb51.net/css/469033.html">《CSS 控制前端图片 HTTP 请求的各种情况示例》</a></p><h4 id="97-如何实现单行／多行文本溢出的省略（…）？"><a href="#97-如何实现单行／多行文本溢出的省略（…）？" class="headerlink" title="97.如何实现单行／多行文本溢出的省略（…）？"></a>97.如何实现单行／多行文本溢出的省略（…）？</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*单行文本溢出*/</span><span class="token selector">p</span> <span class="token punctuation">&#123;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span>  <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*多行文本溢出*/</span><span class="token selector">p</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> 1.5em<span class="token punctuation">;</span>  <span class="token comment">/*高度为需要显示的行数*行高，比如这里我们显示两行，则为3*/</span>  <span class="token property">height</span><span class="token punctuation">:</span> 3em<span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">p:after</span> <span class="token punctuation">&#123;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'...'</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>详细资料可以参考：<br><a href="https://zhuanlan.zhihu.com/p/30707916">《【CSS/JS】如何实现单行／多行文本溢出的省略》</a><br><a href="https://juejin.im/entry/587f453e1b69e60058555a5f">《CSS 多行文本溢出省略显示》</a></p><h4 id="98-常见的元素隐藏方式？"><a href="#98-常见的元素隐藏方式？" class="headerlink" title="98.常见的元素隐藏方式？"></a>98.常见的元素隐藏方式？</h4><p>-（1）使用 display:none;隐藏元素，渲染树不会包含该渲染对象，因此该元素不会在页面中占据位置，也不会响应绑定的监听事件。</p><p>-（2）使用 visibility:hidden;隐藏元素。元素在页面中仍占据空间，但是不会响应绑定的监听事件。</p><p>-（3）使用 opacity:0;将元素的透明度设置为 0，以此来实现元素的隐藏。元素在页面中仍然占据空间，并且能够响应元素绑定的监听事件。</p><p>-（4）通过使用绝对定位将元素移除可视区域内，以此来实现元素的隐藏。</p><p>-（5）通过 z-index 负值，来使其他元素遮盖住该元素，以此来实现隐藏。</p><p>-（6）通过 clip/clip-path 元素裁剪的方法来实现元素的隐藏，这种方法下，元素仍在页面中占据位置，但是不会响应绑定的监听事件。</p><p>-（7）通过 transform:scale(0,0)来将元素缩放为 0，以此来实现元素的隐藏。这种方法下，元素仍在页面中占据位置，但是不会响应绑定的监听事件。</p><p>详细资料可以参考：<br><a href="https://juejin.im/post/584b645a128fe10058a0d625#heading-2">《CSS 隐藏元素的八种方法》</a></p><h4 id="99-css-实现上下固定中间自适应布局？"><a href="#99-css-实现上下固定中间自适应布局？" class="headerlink" title="99.css 实现上下固定中间自适应布局？"></a>99.css 实现上下固定中间自适应布局？</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">利用绝对定位实现body</span> <span class="token punctuation">&#123;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.header</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.footer</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">利用flex布局实现html,body</span> <span class="token punctuation">&#123;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">body</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.header</span> <span class="token punctuation">&#123;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex-grow</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.footer</span> <span class="token punctuation">&#123;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>详细资料可以参考：<br><a href="https://www.jianshu.com/p/30bc9751e3e8">《css 实现上下固定中间自适应布局》</a></p><h4 id="100-css-两栏布局的实现？"><a href="#100-css-两栏布局的实现？" class="headerlink" title="100.css 两栏布局的实现？"></a>100.css 两栏布局的实现？</h4><p>相关资料：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*两栏布局一般指的是页面中一共两栏，左边固定，右边自适应的布局，一共有四种实现的方式。*/</span><span class="token comment">/*以左边宽度固定为200px为例*/</span><span class="token comment">/*（1）利用浮动，将左边元素宽度设置为200px，并且设置向左浮动。将右边元素的margin-left设置为200px，宽度设置为auto（默认为auto，撑满整个父元素）。*/</span><span class="token selector">.outer</span> <span class="token punctuation">&#123;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.left</span> <span class="token punctuation">&#123;</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> tomato<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.right</span> <span class="token punctuation">&#123;</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> gold<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*（2）第二种是利用flex布局，将左边元素的放大和缩小比例设置为0，基础大小设置为200px。将右边的元素的放大比例设置为1，缩小比例设置为1，基础大小设置为auto。*/</span><span class="token selector">.outer</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.left</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex-shrink</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">flex-grow</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">flex-basis</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> tomato<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.right</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>  <span class="token comment">/*11auto*/</span>  <span class="token property">background</span><span class="token punctuation">:</span> gold<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*（3）第三种是利用绝对定位布局的方式，将父级元素设置相对定位。左边元素设置为absolute定位，并且宽度设置为200px。将右边元素的margin-left的值设置为200px。*/</span><span class="token selector">.outer</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.left</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> tomato<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.right</span> <span class="token punctuation">&#123;</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> gold<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*（4）第四种还是利用绝对定位的方式，将父级元素设置为相对定位。左边元素宽度设置为200px，右边元素设置为绝对定位，左边定位为200px，其余方向定位为0。*/</span><span class="token selector">.outer</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.left</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> tomato<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.right</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> gold<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="http://cavszhouyou.top/Demo-Display/TwoColumnLayout/index.html">《两栏布局 demo 展示》</a></p><p>回答：</p><p>两栏布局一般指的是页面中一共两栏，左边固定，右边自适应的布局，一共有四种实现的方式。</p><p>以左边宽度固定为 200px 为例</p><p>-（1）利用浮动，将左边元素宽度设置为 200px，并且设置向左浮动。将右边元素的 margin-left 设置为 200px，宽度设置为 auto（默认为 auto，撑满整个父元素）。</p><p>-（2）第二种是利用 flex 布局，将左边元素的放大和缩小比例设置为 0，基础大小设置为 200px。将右边的元素的放大比例设置为 1，缩小比例设置为 1，基础大小设置为 auto。</p><p>-（3）第三种是利用绝对定位布局的方式，将父级元素设置相对定位。左边元素设置为 absolute 定位，并且宽度设置为 200px。将右边元素的 margin-left 的值设置为 200px。</p><p>-（4）第四种还是利用绝对定位的方式，将父级元素设置为相对定位。左边元素宽度设置为 200px，右边元素设置为绝对定位，左边定位为 200px，其余方向定位为 0。</p><h4 id="101-css-三栏布局的实现？"><a href="#101-css-三栏布局的实现？" class="headerlink" title="101.css 三栏布局的实现？"></a>101.css 三栏布局的实现？</h4><p>相关资料：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*三栏布局一般指的是页面中一共有三栏，左右两栏宽度固定，中间自适应的布局，一共有五种实现方式。这里以左边宽度固定为100px，右边宽度固定为200px为例。*/</span><span class="token comment">/*（1）利用绝对定位的方式，左右两栏设置为绝对定位，中间设置对应方向大小的margin的值。*/</span><span class="token selector">.outer</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.left</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> tomato<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.right</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> gold<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.center</span> <span class="token punctuation">&#123;</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">margin-right</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> lightgreen<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*（2）利用flex布局的方式，左右两栏的放大和缩小比例都设置为0，基础大小设置为固定的大小，中间一栏设置为auto*/</span><span class="token selector">.outer</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.left</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex</span><span class="token punctuation">:</span> 00100px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> tomato<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.right</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex</span><span class="token punctuation">:</span> 00200px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> gold<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.center</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> lightgreen<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*（3）利用浮动的方式，左右两栏设置固定大小，并设置对应方向的浮动。中间一栏设置左右两个方向的margin值，注意这种方式，中间一栏必须放到最后。*/</span><span class="token selector">.outer</span> <span class="token punctuation">&#123;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.left</span> <span class="token punctuation">&#123;</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> tomato<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.right</span> <span class="token punctuation">&#123;</span>  <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> gold<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.center</span> <span class="token punctuation">&#123;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">margin-right</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> lightgreen<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*（4）圣杯布局，利用浮动和负边距来实现。父级元素设置左右的 padding，三列均设置向左浮动，中间一列放在最前面，宽度设置为父级元素的宽度，因此后面两列都被挤到了下一行，通过设置 margin 负值将其移动到上一行，再利用相对定位，定位到两边。*/</span><span class="token selector">.outer</span> <span class="token punctuation">&#123;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">padding-left</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">padding-right</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.left</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> -100px<span class="token punctuation">;</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> -100%<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> tomato<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.right</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> -200px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> gold<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.center</span> <span class="token punctuation">&#123;</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> lightgreen<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*（5）双飞翼布局，双飞翼布局相对于圣杯布局来说，左右位置的保留是通过中间列的 margin 值来实现的，而不是通过父元素的 padding 来实现的。本质上来说，也是通过浮动和外边距负值来实现的。*/</span><span class="token selector">.outer</span> <span class="token punctuation">&#123;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.left</span> <span class="token punctuation">&#123;</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> -100%<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> tomato<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.right</span> <span class="token punctuation">&#123;</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> -200px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> gold<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.wrapper</span> <span class="token punctuation">&#123;</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> lightgreen<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.center</span> <span class="token punctuation">&#123;</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">margin-right</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="http://cavszhouyou.top/Demo-Display/ThreeColumnLayout/index.html">《三栏布局 demo 展示》</a></p><p>回答：</p><pre class="line-numbers language-none"><code class="language-none">三栏布局一般指的是页面中一共有三栏，左右两栏宽度固定，中间自适应的布局，一共有五种实现方式。这里以左边宽度固定为100px，右边宽度固定为200px为例。（1）利用绝对定位的方式，左右两栏设置为绝对定位，中间设置对应方向大小的margin的值。（2）利用flex布局的方式，左右两栏的放大和缩小比例都设置为0，基础大小设置为固定的大小，中间一栏设置为auto。（3）利用浮动的方式，左右两栏设置固定大小，并设置对应方向的浮动。中间一栏设置左右两个方向的margin值，注意这种方式，中间一栏必须放到最后。（4）圣杯布局，利用浮动和负边距来实现。父级元素设置左右的padding，三列均设置向左浮动，中间一列放在最前面，宽度设置为父级元素的宽度，因此后面两列都被挤到了下一行，通过设置margin负值将其移动到上一行，再利用相对定位，定位到两边。圣杯布局中间列的宽度不能小于两边任意列的宽度，而双飞翼布局则不存在这个问题。（5）双飞翼布局，双飞翼布局相对于圣杯布局来说，左右位置的保留是通过中间列的margin值来实现的，而不是通过父元素的padding来实现的。本质上来说，也是通过浮动和外边距负值来实现的。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="102-实现一个宽高自适应的正方形"><a href="#102-实现一个宽高自适应的正方形" class="headerlink" title="102.实现一个宽高自适应的正方形"></a>102.实现一个宽高自适应的正方形</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*1.第一种方式是利用vw来实现*/</span><span class="token selector">.square</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 10%<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 10vw<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> tomato<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*2.第二种方式是利用元素的margin/padding百分比是相对父元素width的性质来实现*/</span><span class="token selector">.square</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 20%<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">padding-top</span><span class="token punctuation">:</span> 20%<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*3.第三种方式是利用子元素的margin-top的值来实现的*/</span><span class="token selector">.square</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 30%<span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.square::after</span> <span class="token punctuation">&#123;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="http://cavszhouyou.top/Demo-Display/AdaptiveSquare/index.html">《自适应正方形 demo 展示》</a></p><h4 id="103-实现一个三角形"><a href="#103-实现一个三角形" class="headerlink" title="103.实现一个三角形"></a>103.实现一个三角形</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*三角形的实现原理是利用了元素边框连接处的等分原理。*/</span><span class="token selector">.triangle</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">border-width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">border-style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span>  <span class="token property">border-color</span><span class="token punctuation">:</span> tomatotransparenttransparenttransparent<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="http://cavszhouyou.top/Demo-Display/Triangle/index.html">《三角形 demo 展示》</a></p><h4 id="104-一个自适应矩形，水平垂直居中，且宽高比为-2-1"><a href="#104-一个自适应矩形，水平垂直居中，且宽高比为-2-1" class="headerlink" title="104.一个自适应矩形，水平垂直居中，且宽高比为 2:1"></a>104.一个自适应矩形，水平垂直居中，且宽高比为 2:1</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*实现原理参考自适应正方形和水平居中方式*/</span><span class="token selector">.box</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 10%<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">padding-top</span><span class="token punctuation">:</span> 20%<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> tomato<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="105-你知道-CSS-中不同属性设置为百分比-时对应的计算基准？"><a href="#105-你知道-CSS-中不同属性设置为百分比-时对应的计算基准？" class="headerlink" title="105.你知道 CSS 中不同属性设置为百分比%时对应的计算基准？"></a>105.你知道 CSS 中不同属性设置为百分比%时对应的计算基准？</h4><pre class="line-numbers language-none"><code class="language-none">公式：当前元素某CSS属性值 &#x3D; 基准 * 对应的百分比元素的 position 为 relative 和 absolute 时，top和bottom、left和right基准分别为包含块的 height、width元素的 position 为 fixed 时，top和bottom、left和right基准分别为初始包含块（也就是视口）的 height、width，移动设备较为复杂，基准为 Layout viewport 的 height、width元素的 height 和 width 设置为百分比时，基准分别为包含块的 height 和 width元素的 margin 和 padding 设置为百分比时，基准为包含块的 width（易错）元素的 border-width，不支持百分比元素的 text-indent，基准为包含块的 width元素的 border-radius，基准为分别为自身的height、width元素的 background-size，基准为分别为自身的height、width元素的 translateX、translateY，基准为分别为自身的height、width元素的 line-height，基准为自身的 font-size元素的 font-size，基准为父元素字体<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本部分主要是笔者在复习 CSS 相关知识和一些相关面试题时所做的笔记，如果出现错误，希望大家指出！&lt;/p&gt;
&lt;h3 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href</summary>
      
    
    
    
    <category term="面试知识点" scheme="https://www.carryone.top/categories/%E9%9D%A2%E8%AF%95%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
    <category term="面试知识点" scheme="https://www.carryone.top/tags/%E9%9D%A2%E8%AF%95%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript基础语法学习笔记03</title>
    <link href="https://www.carryone.top/2022/01/23/Untitled-1/"/>
    <id>https://www.carryone.top/2022/01/23/Untitled-1/</id>
    <published>2022-01-23T06:02:00.000Z</published>
    <updated>2022-01-23T06:05:02.401Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="声明和调用函数"><a href="#声明和调用函数" class="headerlink" title="声明和调用函数"></a>声明和调用函数</h3><a id="more"></a><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 通过函数关键字自定义声明函数（命名函数）</span><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span><span class="token parameter">形参<span class="token number">1</span><span class="token punctuation">,</span> 形参<span class="token number">2</span><span class="token punctuation">,</span> 形参<span class="token number">3</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 函数体代码</span><span class="token punctuation">&#125;</span><span class="token comment">// 通过函数表达式方法来声明函数（匿名函数，变量名不是函数名）</span><span class="token keyword">var</span> <span class="token function-variable function">变量名</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 调用函数</span><span class="token function">函数名</span><span class="token punctuation">(</span>实参<span class="token number">1</span><span class="token punctuation">,</span> 实参<span class="token number">2</span><span class="token punctuation">,</span> 实参<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="形参与实参的匹配问题"><a href="#形参与实参的匹配问题" class="headerlink" title="形参与实参的匹配问题"></a>形参与实参的匹配问题</h3><ol><li><p>形参与实参的个数相等，正常输出结果</p></li><li><p>形参个数少于实参，则实参按顺序传递给形参</p></li><li><p>形参个数多余实参，则多余的实参被定义为undefined（形参可以被看成是一个不需要声明的变量，默认值为undefined）</p><p>&lt;!–hexoPostRenderEscape:<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><br> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1 <span class="token operator">+</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">&#125;</span></p></li></ol><p><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span><br><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span><br><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN (数字型加上一个undefined所得为NaN)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>:hexoPostRenderEscape–&gt;</p><h3 id="return的注意事项"><a href="#return的注意事项" class="headerlink" title="return的注意事项"></a>return的注意事项</h3><ol><li>return只能返回一个值。如果return后接了多个值，则返回的结果为最后一个值。</li><li>return具有终止函数运行的作用。函数中return之后的代码都不会被执行。</li><li>函数都有返回值。有return时返回return后的值；不含有return则返回undefined。</li></ol><h3 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h3><p>JS中的arguments是当前函数的一个内置对象，其存储了传递的所有实参。</p><p>arguments的展示形式是一个伪数组，其具有length属性、能按索引方式储存数据，但不具有push、pop等数组方法。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//arguments的使用</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span class="token punctuation">&#125;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>作用域的使用能提高程序逻辑的局部性、增强程序可靠性并减少名字冲突。</p><p>JS中包含两种作用域类型（es6之前），作用域决定了变量的可访问性。</p><ul><li>局部作用域与局部变量</li></ul><p>​    函数内部声明的变量，会成为函数的局部变量，其作用域是局部的，只能从函数内部访问，从函数外部是不可访问的。</p><p>​    局部变量在代码块被执行时会被初始化，代码块运行结束后局部变量也会被销毁，更节省内存空间。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 此处代码不可使用 age 变量</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>    <span class="token comment">// 此处代码可以使用 age 变量</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>全局作用域与全局变量</li></ul><p>​    函数之外声明的变量，会成为全局变量，其作用域为全局的，网页中的所有脚本和函数都可以访问。</p><p>​    全局变量在声明后直到浏览器关闭时才会被销毁，期间一直占据着内存资源。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token comment">// 此处代码可以使用 age 变量</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 此处代码也可使用 age 变量</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h2><p>JS代码是由浏览器中的JS解析器来执行的，分为两步：预解析和代码执行。</p><p>预解析又分为</p><ul><li>变量预解析</li></ul><p>​    把所有的变量声明提升到当前作用域的最前面，不提升赋值操作</p><ul><li>函数预解析</li></ul><p>​    把所有函数声明提升到当前作用域的最前面，不调用函数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 例1 </span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//程序相当于执行了以下代码</span><span class="token keyword">var</span> num<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> num<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 结果为undefined</span>    num <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 例2</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> b <span class="token operator">=</span> c <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token comment">// 相当于var a = 9; b = 9; c = 9; b 和 c是直接赋值，没有声明变量，所以可以看作是全局变量。</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 等同于以下代码</span><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a<span class="token punctuation">;</span>    a <span class="token operator">=</span> b <span class="token operator">=</span> c <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9</span><span class="token punctuation">&#125;</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错，a为局部变量，未被声明</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>JS中的对象是一组无序的相关属性和方法的集合</p><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><ul><li><p>利用字面量创建对象 {}</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 创建了一个空对象</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'Kobe'</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">,</span>  sex<span class="token operator">:</span> <span class="token string">'male'</span><span class="token punctuation">,</span>  <span class="token function-variable function">practice</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'practicing'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 对象中的属性和方法采用键值对的形式 属性名（键）: 属性值（值）</span><span class="token comment">// 调用属性的两种方法：1、对象名.属性名；2、对象名['属性名']</span><span class="token comment">// 调用方法的方法： 对象名.方法名()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>利用 new Object 创建对象</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建了一个空对象</span>obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Kobe'</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">'male'</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function-variable function">practice</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'practicing'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>利用构造函数创建对象</p><p>&lt;!–hexoPostRenderEscape:<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 构造函数的语法</span><br><span class="token keyword">function</span> <span class="token function">构造函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><br>  <span class="token keyword">this</span><span class="token punctuation">.</span>属性 <span class="token operator">=</span> 值；<br>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">方法</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><br><span class="token punctuation">&#125;</span><br><span class="token keyword">new</span> <span class="token function">构造函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></p></li></ul><p><span class="token comment">// 举例</span><br><span class="token keyword">function</span> <span class="token function">Player</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 构造函数名首字母要大写</span><br>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><br>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><br>    <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span><br>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">practice</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><br>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">‘practicing’</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>    <span class="token punctuation">&#125;</span><br><span class="token punctuation">&#125;</span><br><span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token string">‘Kobe’</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token string">‘male’</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>:hexoPostRenderEscape–&gt;</p><p>  new关键字的执行过程</p><ol><li>new 构造函数在内存中创建了一个空的对象</li><li>this 会指向创建的空对象</li><li>执行构造函数中的代码，给空对象添加属性和方法</li><li>返回这个对象</li></ol><h3 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h3><p>for…in 语句用于对数组或者对象的属性进行循环操作</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'Kobe'</span><span class="token punctuation">,</span>    age<span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">,</span>    sex<span class="token operator">:</span> <span class="token string">'male'</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 得到各属性名</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 得到对象的各属性值（需要注意写法）</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><p>JS自带的一些对象，提供了一些基本且常用的功能给开发者使用。</p><h3 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h3><p>Math 对象可以用来执行数学任务。 Math 不是构造函数。 Math 的所有属性/方法都可以通过使用 Math 作为对象来调用，而无需创建它：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">;</span>            <span class="token comment">// 返回 PI</span><span class="token keyword">var</span> y <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 返回 16 的平方更</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 向下取整</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 向上取整</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 四舍五入</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回一个随机小数</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> min<span class="token punctuation">;</span> <span class="token comment">// 得到一个大于等于 min 且小于等于 max 的数 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h3><p>Date对象用于处理日期和时间，通过 new Date() 来创建。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建了一个Date对象，无参数时是获取当前的系统时间</span><span class="token keyword">var</span> d1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">'2021/11/23'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 带参数的实例化</span><span class="token comment">// 获取时间戳(总毫秒数)</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 方法1</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 方法2</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 方法3</span><span class="token comment">// 利用时间戳来创建倒计时效果</span><span class="token keyword">function</span> <span class="token function">countDown</span><span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> nowTime <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 当前时间的总毫秒数</span>    <span class="token keyword">var</span> inputTime <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输入时间的总毫秒数</span>    <span class="token keyword">var</span> times <span class="token operator">=</span> <span class="token punctuation">(</span>inputTime <span class="token operator">-</span> nowTime<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">;</span> <span class="token comment">// 剩余时间的总秒数</span>    <span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>times <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 天</span>    d <span class="token operator">=</span> d <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> d <span class="token operator">:</span> d<span class="token punctuation">;</span>    <span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>times <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">%</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 时</span>    h <span class="token operator">=</span> h <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> h <span class="token operator">:</span> h<span class="token punctuation">;</span>    <span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>times <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">%</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 分</span>    m <span class="token operator">=</span> m <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> m <span class="token operator">:</span> m<span class="token punctuation">;</span>    <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>times <span class="token operator">%</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//秒</span>    s <span class="token operator">=</span> s <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> s <span class="token operator">:</span> s<span class="token punctuation">;</span>    <span class="token keyword">return</span> d <span class="token operator">+</span> <span class="token string">'天'</span> <span class="token operator">+</span> h <span class="token operator">+</span> <span class="token string">'时'</span> <span class="token operator">+</span> m <span class="token operator">+</span> <span class="token string">'分'</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">'秒'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组对象"><a href="#数组对象" class="headerlink" title="数组对象"></a>数组对象</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 使用new Array()来创建数组</span><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建了一个空数组</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建了一个长度为2的空数组</span><span class="token keyword">var</span> arr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等价于var arr3 = [2, 3]; 创建方式与使用字面量创建相同</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="检测是否为数组"><a href="#检测是否为数组" class="headerlink" title="检测是否为数组"></a>检测是否为数组</h4><ul><li><p>instanceof 运算符</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Array.isArray() 方法</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="增删数组元素"><a href="#增删数组元素" class="headerlink" title="增删数组元素"></a>增删数组元素</h4><ul><li>push(参数…)，在数组末尾增加一个或多个元素，返回值为新数组的长度</li><li>pop()，删除数组最后的一个元素，并将该元素作为返回值</li><li>unshift(参数…)，在数组开头增加一个或多个元素，返回值为新数组的长度</li><li>shift()，删除数组的第一个元素，并将该元素作为返回值</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// [1, 2, 3, 4]</span>arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [0, 1, 2, 3, 4]</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// [0, 1, 2, 3]</span>arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [1, 2, 3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h4><ul><li><p>reverse()，颠倒数组中的元素顺序</p></li><li><p>sort()，对数组元素进行排序（冒泡排序）</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 13, 4, 7, 77]这样写时，元素按照转换为的字符串的各个字符的Unicode位点进行排序</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// function用来指定按某种顺序进行排列</span>  <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span> <span class="token comment">// 升序排列，b - a 则改为降序排列</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// [1, 4, 7, 13, 77]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="查找数组索引"><a href="#查找数组索引" class="headerlink" title="查找数组索引"></a>查找数组索引</h4><ul><li>indexOf()，查找给定元素在数组中的第一个索引并返回索引值，否则返回-1</li><li>lastIndexOf()，查找给定元素在数组中的最后一个索引并返回索引值，否则返回-1</li></ul><h4 id="数组转换成字符串"><a href="#数组转换成字符串" class="headerlink" title="数组转换成字符串"></a>数组转换成字符串</h4><ul><li><p>toString()</p></li><li><p>join(‘分隔符’)</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1,2,3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1,2,3 默认分隔符是 ,</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1-2-3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串对象"><a href="#字符串对象" class="headerlink" title="字符串对象"></a>字符串对象</h3><h4 id="根据字符返回位置"><a href="#根据字符返回位置" class="headerlink" title="根据字符返回位置"></a>根据字符返回位置</h4><ul><li>indexOf(‘要查找的字符’, 开始的位置)，从指定位置开始（未指定则从头开始）返回指定字符在字符串中的位置，不存在该字符则返回 -1</li><li>lastIndexOf()，与上述类似，只是从后往前查找</li></ul><h4 id="根据位置返回字符"><a href="#根据位置返回字符" class="headerlink" title="根据位置返回字符"></a>根据位置返回字符</h4><ul><li>charAt(index)，返回指定位置的字符</li><li>charCodeAt(index)，返回指定位置字符的ASCII码</li><li>str[index]，获取指定位置处的字符</li></ul><h4 id="截取拼接字符串"><a href="#截取拼接字符串" class="headerlink" title="截取拼接字符串"></a>截取拼接字符串</h4><ul><li>concat(str1, str2, str3…)，用于连接字符串，等同于 + </li><li>substr(start, length)，从start位置开始截取长度为length的字符串</li><li>slice(start, end)，从start开始截取到end位置的字符串，不包括end</li><li>substring(start, end)，与slice基本相同，但不接受负值</li></ul><h4 id="替换字符"><a href="#替换字符" class="headerlink" title="替换字符"></a>替换字符</h4><p>replace(‘被替换的字符’, ‘替换成的字符’)   只会替换遇到的第一个字符</p><h4 id="字符串转换为数组"><a href="#字符串转换为数组" class="headerlink" title="字符串转换为数组"></a>字符串转换为数组</h4><p>split(‘分隔符’)</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'1, 2, 3'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1,2,3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="简单数据类型和复杂数据类型"><a href="#简单数据类型和复杂数据类型" class="headerlink" title="简单数据类型和复杂数据类型"></a>简单数据类型和复杂数据类型</h2><h3 id="简单数据类型"><a href="#简单数据类型" class="headerlink" title="简单数据类型"></a>简单数据类型</h3><p>在存储变量时存储的是值本事，所以又可以叫做值类型或基本数据类型。</p><p>string, number, boolean, undefined, null(返回一个空对象)。</p><p>当简单数据类型变量作为参数传递给函数的形参时，实际上是把变量在栈空间里的值复制了一份给形参，于是在函数内对形参做任何修改都不会影响到外部的变量。</p><h3 id="复杂数据类型"><a href="#复杂数据类型" class="headerlink" title="复杂数据类型"></a>复杂数据类型</h3><p>在存储变量时存储的是地址（引用），又可以叫做引用类型。</p><p>包括通过 new 关键字创建的对象（自定义对象、内置对象），如Object、Array、Date等。</p><p>复杂数据类型变量传参时，实际上是把变量在栈空间里保存的堆地址复制给了形参，形参和实参保存的是同一个堆地址，所以操作的是同一个对象。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h2&gt;&lt;h3 id=&quot;声明和调用函数&quot;&gt;&lt;a href=&quot;#声明和调用函数&quot; class=&quot;headerlink&quot; title=&quot;声明和调用函数&quot;&gt;&lt;/a&gt;声明和调用函数&lt;/h3&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://www.carryone.top/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://www.carryone.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript基础语法学习笔记02</title>
    <link href="https://www.carryone.top/2022/01/23/Untitled1/"/>
    <id>https://www.carryone.top/2022/01/23/Untitled1/</id>
    <published>2022-01-23T05:54:00.000Z</published>
    <updated>2022-01-23T05:57:49.250Z</updated>
    
    <content type="html"><![CDATA[<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><a id="more"></a><ul><li><p>+</p></li><li><p>-</p></li><li><p>*</p></li><li><p>/</p></li><li><p>% 取余</p></li></ul><p>在进行算数运算时，浮点数的精确度不如整数，会有精度缺失问题，所以无法直接判断两个浮点数是否相等</p><h3 id="自增-减运算符"><a href="#自增-减运算符" class="headerlink" title="自增/减运算符"></a>自增/减运算符</h3><h4 id="前置自增"><a href="#前置自增" class="headerlink" title="前置自增"></a>前置自增</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">++</span>num<span class="token punctuation">;</span> <span class="token comment">//效果上等同于 num = num + 1;</span><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">++</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出值21，先自增，后返回值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="后置自增"><a href="#后置自增" class="headerlink" title="后置自增"></a>后置自增</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>num<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//效果上也等同于 ++num 和 num = num + 1;</span><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出值20，先返回原值，后自增</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>递减运算的规则类似，可参考递增运算</p><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><ul><li>&lt;</li><li>&gt;</li><li>&lt;=</li><li>&gt;=</li><li>==  判断值相等即可</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true，默认会转换数据类型，将字符串转换成数字型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>!=</li><li>===  要求值和类型完全一致</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">===</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>!==</li></ul><p>比较运算后会返回一个布尔值</p><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><ul><li>&amp;&amp; 与</li><li>|| 或</li><li>! 非</li></ul><h4 id="短路运算（逻辑中断）"><a href="#短路运算（逻辑中断）" class="headerlink" title="短路运算（逻辑中断）"></a>短路运算（逻辑中断）</h4><p>多个表达式或值进行逻辑运算时，当左边的表达式可以确定结果时，便不再运算右边的表达式</p><ul><li>表达式1 &amp;&amp; 表达式2</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//如果表达式1为真，返回表达式2</span><span class="token comment">//如果表达式1为假，返回表达式1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span> <span class="token operator">&amp;&amp;</span> <span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 456</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>表达式1 || 表达式2</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//如果表达式1为真，返回表达式1</span><span class="token comment">//如果表达式1为假，返回表达式2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span> <span class="token operator">||</span> <span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">||</span> <span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意，短路运算会影响程序的运行结果</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span> <span class="token operator">||</span> num<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0 程序没有进行num++操作便以中断</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><ul><li>=</li><li>+=</li><li>-=</li><li>*=</li><li>/=</li><li>%=</li></ul><h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><p>优先级由高到低排列</p><ol><li>()</li><li>一元运算符：++、–、! （! 的优先级很高）</li><li>算数运算符：先 * / %，后 + - </li><li>关系运算符：&gt;  &lt;  &gt;=  &lt;=</li><li>相等运算符：==  !=  ===  !==</li><li>逻辑运算符：先&amp;&amp; 后||</li><li>赋值运算符：=</li><li>,</li></ol><h2 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h2><p>在使用switch时需要注意以下几点</p><ol><li>switch() 中的表达式常使用变量</li><li>表达式的值和case的值只有在全等（===）时才匹配，即值与数据类型都一致</li><li>每个case中需要加上break，如果没有break则在执行完当前case后会继续执行下一个case</li></ol><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><ul><li>for</li><li>while</li><li>do while</li></ul><h3 id="continue关键字"><a href="#continue关键字" class="headerlink" title="continue关键字"></a>continue关键字</h3><p>用于立即跳出本次循环，继续下一次循环（本次循环中continue之后的代码就不会再被执行）</p><h3 id="break关键字"><a href="#break关键字" class="headerlink" title="break关键字"></a>break关键字</h3><p>用于立即跳出整个循环体</p><p>需要注意的是，当存在多重循环时，break只能跳出最内层的循环体</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h3><ol><li><p>使用new关键字来创建</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个空的数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用数组字面量来创建</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 空数组</span><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 初始化数组，可存放各种类型的数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="获取数组元素"><a href="#获取数组元素" class="headerlink" title="获取数组元素"></a>获取数组元素</h3><p>通过索引（数组下标）来获取元素，下表从0开始</p><h3 id="数组长度"><a href="#数组长度" class="headerlink" title="数组长度"></a>数组长度</h3><p>可以通过数组的length属性来获取数组的长度</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>length属性是可读写的</p><h3 id="数组中新增元素"><a href="#数组中新增元素" class="headerlink" title="数组中新增元素"></a>数组中新增元素</h3><ul><li><p>通过修改length实现</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 修改数组的length属性，在数组后新增了两个元素</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>通过索引追加数组元素</p><p>&lt;!–hexoPostRenderEscape:<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><br>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'black'</span><span class="token punctuation">;</span> <span class="token comment">// arr数组后新增了一个元素'black'</span></p></li></ul><p><span class="token comment">//需要注意的是，不可直接给数组名赋值</span><br>arr <span class="token operator">=</span> <span class="token string">‘数组’</span><span class="token punctuation">;</span><br>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 操作台的输出结果不是arr的内容，而是’数组’</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>:hexoPostRenderEscape–&gt;</p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>基本思想：比较相邻的两个元素的大小，如果这两个元素顺序错误则交换两个元素的位置，重复这样的操作直到所有元素位置正确即完成排序。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token comment">//将元素按从小到大顺序排列</span>    <span class="token keyword">var</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// 外层循环每执行一次便有一个元素完成排序，内层循环就可以少执行一次</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 相邻元素两两对比</span>                <span class="token keyword">var</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 元素交换</span>                arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;运算符&quot;&gt;&lt;a href=&quot;#运算符&quot; class=&quot;headerlink&quot; title=&quot;运算符&quot;&gt;&lt;/a&gt;运算符&lt;/h2&gt;&lt;h3 id=&quot;算数运算符&quot;&gt;&lt;a href=&quot;#算数运算符&quot; class=&quot;headerlink&quot; title=&quot;算数运算符&quot;&gt;&lt;/a&gt;算数运算符&lt;/h3&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://www.carryone.top/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://www.carryone.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>前端知识图谱</title>
    <link href="https://www.carryone.top/2022/01/23/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/"/>
    <id>https://www.carryone.top/2022/01/23/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/</id>
    <published>2022-01-23T05:52:00.000Z</published>
    <updated>2022-01-23T05:53:25.508Z</updated>
    
    <content type="html"><![CDATA[<h2 id="网络知识"><a href="#网络知识" class="headerlink" title="网络知识"></a>网络知识</h2><h3 id="1-网络工作原理"><a href="#1-网络工作原理" class="headerlink" title="1. 网络工作原理"></a>1. 网络工作原理</h3><h3 id="计算机网络原理：https-www-bilibili-com-video-BV1xJ41137Q3"><a href="#计算机网络原理：https-www-bilibili-com-video-BV1xJ41137Q3" class="headerlink" title="计算机网络原理：https://www.bilibili.com/video/BV1xJ41137Q3"></a>计算机网络原理：<a href="https://www.bilibili.com/video/BV1xJ41137Q3">https://www.bilibili.com/video/BV1xJ41137Q3</a></h3><a id="more"></a><h3 id="2-什么是HTTP"><a href="#2-什么是HTTP" class="headerlink" title="2. 什么是HTTP"></a>2. 什么是HTTP</h3><h3 id="HTTP协议详解：https-www-bilibili-com-video-BV1js411g7Fw"><a href="#HTTP协议详解：https-www-bilibili-com-video-BV1js411g7Fw" class="headerlink" title="HTTP协议详解：https://www.bilibili.com/video/BV1js411g7Fw"></a>HTTP协议详解：<a href="https://www.bilibili.com/video/BV1js411g7Fw">https://www.bilibili.com/video/BV1js411g7Fw</a></h3><h3 id="3-浏览器及工作方式"><a href="#3-浏览器及工作方式" class="headerlink" title="3. 浏览器及工作方式"></a>3. 浏览器及工作方式</h3><h3 id="浏览器是如何运作的？：https-www-bilibili-com-video-BV1x54y1B7RE"><a href="#浏览器是如何运作的？：https-www-bilibili-com-video-BV1x54y1B7RE" class="headerlink" title="浏览器是如何运作的？：https://www.bilibili.com/video/BV1x54y1B7RE"></a>浏览器是如何运作的？：<a href="https://www.bilibili.com/video/BV1x54y1B7RE">https://www.bilibili.com/video/BV1x54y1B7RE</a></h3><h3 id="4-DNS-及其工作原理"><a href="#4-DNS-及其工作原理" class="headerlink" title="4. DNS 及其工作原理"></a>4. DNS 及其工作原理</h3><h3 id="DNS基本工作原理：https-www-bilibili-com-video-BV1GW411j7Ts"><a href="#DNS基本工作原理：https-www-bilibili-com-video-BV1GW411j7Ts" class="headerlink" title="DNS基本工作原理：https://www.bilibili.com/video/BV1GW411j7Ts"></a>DNS基本工作原理：<a href="https://www.bilibili.com/video/BV1GW411j7Ts">https://www.bilibili.com/video/BV1GW411j7Ts</a></h3><h3 id="直观DNS科普：https-www-bilibili-com-video-BV1F54y1R7BC"><a href="#直观DNS科普：https-www-bilibili-com-video-BV1F54y1R7BC" class="headerlink" title="直观DNS科普：https://www.bilibili.com/video/BV1F54y1R7BC"></a>直观DNS科普：<a href="https://www.bilibili.com/video/BV1F54y1R7BC">https://www.bilibili.com/video/BV1F54y1R7BC</a></h3><h3 id="5-域名相关知识"><a href="#5-域名相关知识" class="headerlink" title="5. 域名相关知识"></a>5. 域名相关知识</h3><h3 id="域名解析完整讲解：https-www-bilibili-com-video-BV1zA411x7Pj"><a href="#域名解析完整讲解：https-www-bilibili-com-video-BV1zA411x7Pj" class="headerlink" title="域名解析完整讲解：https://www.bilibili.com/video/BV1zA411x7Pj"></a>域名解析完整讲解：<a href="https://www.bilibili.com/video/BV1zA411x7Pj">https://www.bilibili.com/video/BV1zA411x7Pj</a></h3><h3 id="6-云服务相关知识"><a href="#6-云服务相关知识" class="headerlink" title="6. 云服务相关知识"></a>6. 云服务相关知识</h3><h3 id="揭秘阿里云服务器：https-www-bilibili-com-video-BV1Rt411u7k4"><a href="#揭秘阿里云服务器：https-www-bilibili-com-video-BV1Rt411u7k4" class="headerlink" title="揭秘阿里云服务器：https://www.bilibili.com/video/BV1Rt411u7k4"></a>揭秘阿里云服务器：<a href="https://www.bilibili.com/video/BV1Rt411u7k4">https://www.bilibili.com/video/BV1Rt411u7k4</a></h3><h2 id="超文本标记语言"><a href="#超文本标记语言" class="headerlink" title="超文本标记语言"></a>超文本标记语言</h2><p>（HTML）</p><h3 id="1-HTML基础知识学习"><a href="#1-HTML基础知识学习" class="headerlink" title="1. HTML基础知识学习"></a>1. HTML基础知识学习</h3><h3 id="HTML全套基础教程：https-www-bilibili-com-video-BV11t411K74Q"><a href="#HTML全套基础教程：https-www-bilibili-com-video-BV11t411K74Q" class="headerlink" title="HTML全套基础教程：https://www.bilibili.com/video/BV11t411K74Q"></a>HTML全套基础教程：<a href="https://www.bilibili.com/video/BV11t411K74Q">https://www.bilibili.com/video/BV11t411K74Q</a></h3><h3 id="2-HTML-编写规则-和语义化写法"><a href="#2-HTML-编写规则-和语义化写法" class="headerlink" title="2. HTML 编写规则 和语义化写法"></a>2. HTML 编写规则 和语义化写法</h3><h3 id="HTML-速成：https-www-bilibili-com-video-BV1vs411M7aT"><a href="#HTML-速成：https-www-bilibili-com-video-BV1vs411M7aT" class="headerlink" title="HTML 速成：https://www.bilibili.com/video/BV1vs411M7aT"></a>HTML 速成：<a href="https://www.bilibili.com/video/BV1vs411M7aT">https://www.bilibili.com/video/BV1vs411M7aT</a></h3><h3 id="3-表单和验证"><a href="#3-表单和验证" class="headerlink" title="3. 表单和验证"></a>3. 表单和验证</h3><h3 id="html5表单验证：https-www-bilibili-com-video-BV16K4y1Z7Gb"><a href="#html5表单验证：https-www-bilibili-com-video-BV16K4y1Z7Gb" class="headerlink" title="html5表单验证：https://www.bilibili.com/video/BV16K4y1Z7Gb"></a>html5表单验证：<a href="https://www.bilibili.com/video/BV16K4y1Z7Gb">https://www.bilibili.com/video/BV16K4y1Z7Gb</a></h3><h3 id="4-公约和最佳实践方法"><a href="#4-公约和最佳实践方法" class="headerlink" title="4. 公约和最佳实践方法"></a>4. 公约和最佳实践方法</h3><h3 id="前端代码规范秘籍：https-www-bilibili-com-video-BV19P4y147Jz"><a href="#前端代码规范秘籍：https-www-bilibili-com-video-BV19P4y147Jz" class="headerlink" title="前端代码规范秘籍：https://www.bilibili.com/video/BV19P4y147Jz"></a>前端代码规范秘籍：<a href="https://www.bilibili.com/video/BV19P4y147Jz">https://www.bilibili.com/video/BV19P4y147Jz</a></h3><h3 id="5-SEO-基础知识"><a href="#5-SEO-基础知识" class="headerlink" title="5. SEO 基础知识"></a>5. SEO 基础知识</h3><h3 id="SEO优化学习教程：https-www-bilibili-com-video-BV1fE411J7ya"><a href="#SEO优化学习教程：https-www-bilibili-com-video-BV1fE411J7ya" class="headerlink" title="SEO优化学习教程：https://www.bilibili.com/video/BV1fE411J7ya"></a>SEO优化学习教程：<a href="https://www.bilibili.com/video/BV1fE411J7ya">https://www.bilibili.com/video/BV1fE411J7ya</a></h3><h2 id="层叠样式表"><a href="#层叠样式表" class="headerlink" title="层叠样式表"></a>层叠样式表</h2><p>（CSS)</p><h3 id="1-CSS-基础知识学习"><a href="#1-CSS-基础知识学习" class="headerlink" title="1. CSS 基础知识学习"></a>1. CSS 基础知识学习</h3><h3 id="CSS3基础教程：https-www-bilibili-com-video-BV1Bx411u7cS"><a href="#CSS3基础教程：https-www-bilibili-com-video-BV1Bx411u7cS" class="headerlink" title="CSS3基础教程：https://www.bilibili.com/video/BV1Bx411u7cS"></a>CSS3基础教程：<a href="https://www.bilibili.com/video/BV1Bx411u7cS">https://www.bilibili.com/video/BV1Bx411u7cS</a></h3><h3 id="CSS3全套教程：https-www-bilibili-com-video-BV1et411q74F"><a href="#CSS3全套教程：https-www-bilibili-com-video-BV1et411q74F" class="headerlink" title="CSS3全套教程：https://www.bilibili.com/video/BV1et411q74F"></a>CSS3全套教程：<a href="https://www.bilibili.com/video/BV1et411q74F">https://www.bilibili.com/video/BV1et411q74F</a></h3><h3 id="2-页面切图和布局实现"><a href="#2-页面切图和布局实现" class="headerlink" title="2. 页面切图和布局实现"></a>2. 页面切图和布局实现</h3><ul><li>浮动布局</li><li>浮动布局：<a href="https://www.bilibili.com/video/BV1Zs411j7Z3">https://www.bilibili.com/video/BV1Zs411j7Z3</a></li><li>定位布局</li><li>CSS定位布局：<a href="https://www.bilibili.com/video/BV1ni4y1g7tc">https://www.bilibili.com/video/BV1ni4y1g7tc</a></li><li>Display</li><li>display&amp;visibility：<a href="https://www.bilibili.com/video/BV1HJ411M7CM">https://www.bilibili.com/video/BV1HJ411M7CM</a></li><li>盒子模型</li><li>CSS盒子模型与定位：<a href="https://www.bilibili.com/video/BV1P7411G7BW">https://www.bilibili.com/video/BV1P7411G7BW</a></li><li>Grid 布局</li><li>如何用grid：<a href="https://www.bilibili.com/video/BV14C4y1W7oA">https://www.bilibili.com/video/BV14C4y1W7oA</a></li><li>Flex 布局</li><li>Flex伸缩布局：<a href="https://www.bilibili.com/video/BV1BJ41197XE">https://www.bilibili.com/video/BV1BJ41197XE</a><h3 id="3-页面响应式布局设计"><a href="#3-页面响应式布局设计" class="headerlink" title="3. 页面响应式布局设计"></a>3. 页面响应式布局设计</h3><h3 id="六个案例学会响应式布局：https-www-bilibili-com-video-BV1ov411k7sm"><a href="#六个案例学会响应式布局：https-www-bilibili-com-video-BV1ov411k7sm" class="headerlink" title="六个案例学会响应式布局：https://www.bilibili.com/video/BV1ov411k7sm"></a>六个案例学会响应式布局：<a href="https://www.bilibili.com/video/BV1ov411k7sm">https://www.bilibili.com/video/BV1ov411k7sm</a></h3><h2 id="浏览器脚本语言"><a href="#浏览器脚本语言" class="headerlink" title="浏览器脚本语言"></a>浏览器脚本语言</h2>(JavaScript)<h3 id="1-JavaScript基础语法和知识"><a href="#1-JavaScript基础语法和知识" class="headerlink" title="1. JavaScript基础语法和知识"></a>1. JavaScript基础语法和知识</h3><h3 id="JavaScript基础语法：https-www-bilibili-com-video-BV1Sy4y1C7ha"><a href="#JavaScript基础语法：https-www-bilibili-com-video-BV1Sy4y1C7ha" class="headerlink" title="JavaScript基础语法：https://www.bilibili.com/video/BV1Sy4y1C7ha"></a>JavaScript基础语法：<a href="https://www.bilibili.com/video/BV1Sy4y1C7ha">https://www.bilibili.com/video/BV1Sy4y1C7ha</a></h3><h3 id="2-使用JavaScript-操作-DOM元素"><a href="#2-使用JavaScript-操作-DOM元素" class="headerlink" title="2. 使用JavaScript 操作 DOM元素"></a>2. 使用JavaScript 操作 DOM元素</h3><h3 id="JS必会的DOM-BOM操作：https-www-bilibili-com-video-BV1k4411w7sV"><a href="#JS必会的DOM-BOM操作：https-www-bilibili-com-video-BV1k4411w7sV" class="headerlink" title="JS必会的DOM BOM操作：https://www.bilibili.com/video/BV1k4411w7sV"></a>JS必会的DOM BOM操作：<a href="https://www.bilibili.com/video/BV1k4411w7sV">https://www.bilibili.com/video/BV1k4411w7sV</a></h3><h3 id="3-Ajax-异步请求相关知识学习"><a href="#3-Ajax-异步请求相关知识学习" class="headerlink" title="3. Ajax 异步请求相关知识学习"></a>3. Ajax 异步请求相关知识学习</h3><h3 id="Ajax入门到精通：https-www-bilibili-com-video-BV1WC4y1b78y"><a href="#Ajax入门到精通：https-www-bilibili-com-video-BV1WC4y1b78y" class="headerlink" title="Ajax入门到精通：https://www.bilibili.com/video/BV1WC4y1b78y"></a>Ajax入门到精通：<a href="https://www.bilibili.com/video/BV1WC4y1b78y">https://www.bilibili.com/video/BV1WC4y1b78y</a></h3><h3 id="4-ES6-以上版本-的JavaScript"><a href="#4-ES6-以上版本-的JavaScript" class="headerlink" title="4. ES6 以上版本 的JavaScript"></a>4. ES6 以上版本 的JavaScript</h3><h3 id="ES6-ES11新特性：https-www-bilibili-com-video-BV1uK411H7on"><a href="#ES6-ES11新特性：https-www-bilibili-com-video-BV1uK411H7on" class="headerlink" title="ES6-ES11新特性：https://www.bilibili.com/video/BV1uK411H7on"></a>ES6-ES11新特性：<a href="https://www.bilibili.com/video/BV1uK411H7on">https://www.bilibili.com/video/BV1uK411H7on</a></h3><h2 id="版本控制管理系统"><a href="#版本控制管理系统" class="headerlink" title="版本控制管理系统"></a>版本控制管理系统</h2>Version Control System<h3 id="1-Git的基本用法"><a href="#1-Git的基本用法" class="headerlink" title="1.  Git的基本用法"></a>1.  Git的基本用法</h3><h3 id="Git最新教程：https-www-bilibili-com-video-BV1FE411P7B3"><a href="#Git最新教程：https-www-bilibili-com-video-BV1FE411P7B3" class="headerlink" title="Git最新教程：https://www.bilibili.com/video/BV1FE411P7B3"></a>Git最新教程：<a href="https://www.bilibili.com/video/BV1FE411P7B3">https://www.bilibili.com/video/BV1FE411P7B3</a></h3><h3 id="2-相关平台-软件的使用"><a href="#2-相关平台-软件的使用" class="headerlink" title="2.  相关平台/软件的使用"></a>2.  相关平台/软件的使用</h3></li><li>GitHub</li><li>十分钟学会Github：<a href="https://www.bilibili.com/video/BV1yo4y1d7UK">https://www.bilibili.com/video/BV1yo4y1d7UK</a></li><li>GitLab</li><li>gitlab使用说明：<a href="https://www.bilibili.com/video/BV11E411x7Uv">https://www.bilibili.com/video/BV11E411x7Uv</a></li><li>Gitee</li><li>这个看中文网址就可以了，目前B站还没有很好的视频介绍<h2 id="网络安全相关知识"><a href="#网络安全相关知识" class="headerlink" title="网络安全相关知识"></a>网络安全相关知识</h2>Web Security Knowledge<h3 id="1-HTTPS-原理和使用"><a href="#1-HTTPS-原理和使用" class="headerlink" title="1. HTTPS 原理和使用"></a>1. HTTPS 原理和使用</h3><h3 id="你连HTTPS原理都不懂：https-www-bilibili-com-video-BV1Up4y1i7PG"><a href="#你连HTTPS原理都不懂：https-www-bilibili-com-video-BV1Up4y1i7PG" class="headerlink" title="你连HTTPS原理都不懂：https://www.bilibili.com/video/BV1Up4y1i7PG"></a>你连HTTPS原理都不懂：<a href="https://www.bilibili.com/video/BV1Up4y1i7PG">https://www.bilibili.com/video/BV1Up4y1i7PG</a></h3><h3 id="2-CORS-跨域请求和安全知识"><a href="#2-CORS-跨域请求和安全知识" class="headerlink" title="2. CORS 跨域请求和安全知识"></a>2. CORS 跨域请求和安全知识</h3><h3 id="什么是CORS：https-www-bilibili-com-video-BV1Kt411E76z"><a href="#什么是CORS：https-www-bilibili-com-video-BV1Kt411E76z" class="headerlink" title="什么是CORS：https://www.bilibili.com/video/BV1Kt411E76z"></a>什么是CORS：<a href="https://www.bilibili.com/video/BV1Kt411E76z">https://www.bilibili.com/video/BV1Kt411E76z</a></h3><h3 id="3-内容安全策略"><a href="#3-内容安全策略" class="headerlink" title="3. 内容安全策略"></a>3. 内容安全策略</h3><h3 id="网络渗透：https-www-bilibili-com-video-BV1kh411W7Vv"><a href="#网络渗透：https-www-bilibili-com-video-BV1kh411W7Vv" class="headerlink" title="网络渗透：https://www.bilibili.com/video/BV1kh411W7Vv"></a>网络渗透：<a href="https://www.bilibili.com/video/BV1kh411W7Vv">https://www.bilibili.com/video/BV1kh411W7Vv</a></h3><h3 id="4-OWASP-安全风险知识"><a href="#4-OWASP-安全风险知识" class="headerlink" title="4. OWASP 安全风险知识"></a>4. OWASP 安全风险知识</h3><h3 id="OWASP-TOP10：https-www-bilibili-com-video-BV1ey4y1V7Jj"><a href="#OWASP-TOP10：https-www-bilibili-com-video-BV1ey4y1V7Jj" class="headerlink" title="OWASP  TOP10：https://www.bilibili.com/video/BV1ey4y1V7Jj"></a>OWASP  TOP10：<a href="https://www.bilibili.com/video/BV1ey4y1V7Jj">https://www.bilibili.com/video/BV1ey4y1V7Jj</a></h3><h2 id="包管理工具"><a href="#包管理工具" class="headerlink" title="包管理工具"></a>包管理工具</h2>Package Managers<h3 id="1-npm"><a href="#1-npm" class="headerlink" title="1. npm"></a>1. npm</h3><h3 id="包管理工具：https-www-bilibili-com-video-BV1Dv411W7XP"><a href="#包管理工具：https-www-bilibili-com-video-BV1Dv411W7XP" class="headerlink" title="包管理工具：https://www.bilibili.com/video/BV1Dv411W7XP"></a>包管理工具：<a href="https://www.bilibili.com/video/BV1Dv411W7XP">https://www.bilibili.com/video/BV1Dv411W7XP</a></h3><h3 id="2-yarn"><a href="#2-yarn" class="headerlink" title="2. yarn"></a>2. yarn</h3><h3 id="Yarn入门：https-www-imooc-com-learn-766-B站没有，推荐这个免费"><a href="#Yarn入门：https-www-imooc-com-learn-766-B站没有，推荐这个免费" class="headerlink" title="Yarn入门：https://www.imooc.com/learn/766  (B站没有，推荐这个免费)"></a>Yarn入门：<a href="https://www.imooc.com/learn/766">https://www.imooc.com/learn/766</a>  (B站没有，推荐这个免费)</h3><h2 id="CSS-预处理-语言"><a href="#CSS-预处理-语言" class="headerlink" title="CSS 预处理 语言"></a>CSS 预处理 语言</h2>CSS Preprocessors<h3 id="1-Sass"><a href="#1-Sass" class="headerlink" title="1. Sass"></a>1. Sass</h3><h3 id="SCSS从入门到实战：https-www-bilibili-com-video-BV1Zg4y1v75U"><a href="#SCSS从入门到实战：https-www-bilibili-com-video-BV1Zg4y1v75U" class="headerlink" title="SCSS从入门到实战：https://www.bilibili.com/video/BV1Zg4y1v75U"></a>SCSS从入门到实战：<a href="https://www.bilibili.com/video/BV1Zg4y1v75U">https://www.bilibili.com/video/BV1Zg4y1v75U</a></h3><h3 id="2-PostCSS"><a href="#2-PostCSS" class="headerlink" title="2. PostCSS"></a>2. PostCSS</h3><h3 id="B站没太好的视频，建议买书《深入PostCSS-Web设计》"><a href="#B站没太好的视频，建议买书《深入PostCSS-Web设计》" class="headerlink" title="B站没太好的视频，建议买书《深入PostCSS Web设计》"></a>B站没太好的视频，建议买书《深入PostCSS Web设计》</h3><h3 id="3-Less"><a href="#3-Less" class="headerlink" title="3. Less"></a>3. Less</h3><h3 id="前端less教程：https-www-bilibili-com-video-BV1YW411T7vd"><a href="#前端less教程：https-www-bilibili-com-video-BV1YW411T7vd" class="headerlink" title="前端less教程：https://www.bilibili.com/video/BV1YW411T7vd"></a>前端less教程：<a href="https://www.bilibili.com/video/BV1YW411T7vd">https://www.bilibili.com/video/BV1YW411T7vd</a></h3><h2 id="构建工具"><a href="#构建工具" class="headerlink" title="构建工具"></a>构建工具</h2>Build Tools<h3 id="1-任务执行命令"><a href="#1-任务执行命令" class="headerlink" title="1. 任务执行命令"></a>1. 任务执行命令</h3>[Task Runners]</li><li>npm scripts</li><li>npm包管理应用：<a href="https://www.bilibili.com/video/BV1Dv411W7XP">https://www.bilibili.com/video/BV1Dv411W7XP</a></li><li>Gulp</li><li>Gulp入门：<a href="https://www.bilibili.com/video/BV1yA411s72G">https://www.bilibili.com/video/BV1yA411s72G</a><h3 id="2-打包工具"><a href="#2-打包工具" class="headerlink" title="2. 打包工具"></a>2. 打包工具</h3></li><li>Webpack</li><li>Webpack从入门到精通：<a href="https://www.bilibili.com/video/BV1e7411j7T5">https://www.bilibili.com/video/BV1e7411j7T5</a></li><li>Parcel</li><li>Parcel初体验：<a href="https://www.bilibili.com/video/BV1Pa4y147Kf">https://www.bilibili.com/video/BV1Pa4y147Kf</a><h3 id="3-代码格式化工具"><a href="#3-代码格式化工具" class="headerlink" title="3. 代码格式化工具"></a>3. 代码格式化工具</h3></li><li>Prettier</li><li>Prettier和ESLint使用：<a href="https://www.bilibili.com/video/BV183411r7YK">https://www.bilibili.com/video/BV183411r7YK</a></li><li>ESLint</li><li>ESLint基础入门：<a href="https://space.bilibili.com/390120104/search/video?keyword=ESLint">https://space.bilibili.com/390120104/search/video?keyword=ESLint</a><h2 id="三大前端框架"><a href="#三大前端框架" class="headerlink" title="三大前端框架"></a>三大前端框架</h2>Web Framework<h3 id="React-js"><a href="#React-js" class="headerlink" title="React.js"></a>React.js</h3><h3 id="React基础视频：https-www-bilibili-com-video-BV1g4411i7po"><a href="#React基础视频：https-www-bilibili-com-video-BV1g4411i7po" class="headerlink" title="React基础视频：https://www.bilibili.com/video/BV1g4411i7po"></a>React基础视频：<a href="https://www.bilibili.com/video/BV1g4411i7po">https://www.bilibili.com/video/BV1g4411i7po</a></h3><h3 id="React全家桶：https-www-bilibili-com-video-BV1wy4y1D7JT"><a href="#React全家桶：https-www-bilibili-com-video-BV1wy4y1D7JT" class="headerlink" title="React全家桶：https://www.bilibili.com/video/BV1wy4y1D7JT"></a>React全家桶：<a href="https://www.bilibili.com/video/BV1wy4y1D7JT">https://www.bilibili.com/video/BV1wy4y1D7JT</a></h3><h3 id="React实战博客：https-www-bilibili-com-video-BV1CJ411377B"><a href="#React实战博客：https-www-bilibili-com-video-BV1CJ411377B" class="headerlink" title="React实战博客：https://www.bilibili.com/video/BV1CJ411377B"></a>React实战博客：<a href="https://www.bilibili.com/video/BV1CJ411377B">https://www.bilibili.com/video/BV1CJ411377B</a></h3><h3 id="React商城实战：https-www-bilibili-com-video-BV1i5411c7xp"><a href="#React商城实战：https-www-bilibili-com-video-BV1i5411c7xp" class="headerlink" title="React商城实战：https://www.bilibili.com/video/BV1i5411c7xp"></a>React商城实战：<a href="https://www.bilibili.com/video/BV1i5411c7xp">https://www.bilibili.com/video/BV1i5411c7xp</a></h3><h3 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h3><h3 id="Vue2全家桶：https-www-jspang-com-detailed-id-57"><a href="#Vue2全家桶：https-www-jspang-com-detailed-id-57" class="headerlink" title="Vue2全家桶：https://www.jspang.com/detailed?id=57"></a>Vue2全家桶：<a href="https://www.jspang.com/detailed?id=57">https://www.jspang.com/detailed?id=57</a></h3><h3 id="Vue3全家桶：https-www-jspang-com-detailed-id-67"><a href="#Vue3全家桶：https-www-jspang-com-detailed-id-67" class="headerlink" title="Vue3全家桶：https://www.jspang.com/detailed?id=67"></a>Vue3全家桶：<a href="https://www.jspang.com/detailed?id=67">https://www.jspang.com/detailed?id=67</a></h3><h3 id="vuejs从入门到精通：https-www-bilibili-com-video-BV1Zy4y1K7SH"><a href="#vuejs从入门到精通：https-www-bilibili-com-video-BV1Zy4y1K7SH" class="headerlink" title="vuejs从入门到精通：https://www.bilibili.com/video/BV1Zy4y1K7SH"></a>vuejs从入门到精通：<a href="https://www.bilibili.com/video/BV1Zy4y1K7SH">https://www.bilibili.com/video/BV1Zy4y1K7SH</a></h3><h3 id="Angular"><a href="#Angular" class="headerlink" title="Angular"></a>Angular</h3><h3 id="Angular基础：https-www-bilibili-com-video-BV1Wx411R7qt"><a href="#Angular基础：https-www-bilibili-com-video-BV1Wx411R7qt" class="headerlink" title="Angular基础：https://www.bilibili.com/video/BV1Wx411R7qt"></a>Angular基础：<a href="https://www.bilibili.com/video/BV1Wx411R7qt">https://www.bilibili.com/video/BV1Wx411R7qt</a></h3><h2 id="Web-组件化编程"><a href="#Web-组件化编程" class="headerlink" title="Web 组件化编程"></a>Web 组件化编程</h2>Web Components<h3 id="HTML-Templates"><a href="#HTML-Templates" class="headerlink" title="HTML Templates"></a>HTML Templates</h3><h3 id="Custom-Elements"><a href="#Custom-Elements" class="headerlink" title="Custom Elements"></a>Custom Elements</h3><h3 id="Shadow-DOM"><a href="#Shadow-DOM" class="headerlink" title="Shadow DOM"></a>Shadow DOM</h3><h3 id="概要-此部分内容没有找到合适视频"><a href="#概要-此部分内容没有找到合适视频" class="headerlink" title="概要: 此部分内容没有找到合适视频"></a>概要: 此部分内容没有找到合适视频</h3><h2 id="CSS-相关框架"><a href="#CSS-相关框架" class="headerlink" title="CSS 相关框架"></a>CSS 相关框架</h2>CSS Frameworks<h3 id="BootStrap"><a href="#BootStrap" class="headerlink" title="BootStrap"></a>BootStrap</h3><h3 id="一周学会BootStrap：https-www-bilibili-com-video-BV1Lx411v73k"><a href="#一周学会BootStrap：https-www-bilibili-com-video-BV1Lx411v73k" class="headerlink" title="一周学会BootStrap：https://www.bilibili.com/video/BV1Lx411v73k"></a>一周学会BootStrap：<a href="https://www.bilibili.com/video/BV1Lx411v73k">https://www.bilibili.com/video/BV1Lx411v73k</a></h3><h3 id="Material-UI"><a href="#Material-UI" class="headerlink" title="Material UI"></a>Material UI</h3><h3 id="Material-UI入门教程：https-www-bilibili-com-video-BV12J411s75b"><a href="#Material-UI入门教程：https-www-bilibili-com-video-BV12J411s75b" class="headerlink" title="Material  UI入门教程：https://www.bilibili.com/video/BV12J411s75b"></a>Material  UI入门教程：<a href="https://www.bilibili.com/video/BV12J411s75b">https://www.bilibili.com/video/BV12J411s75b</a></h3><h3 id="Materialize-CSS"><a href="#Materialize-CSS" class="headerlink" title="Materialize CSS"></a>Materialize CSS</h3><h3 id="Materialize-CSS-Crash-Course：https-www-bilibili-com-video-BV1gx411h7Y5"><a href="#Materialize-CSS-Crash-Course：https-www-bilibili-com-video-BV1gx411h7Y5" class="headerlink" title="Materialize CSS Crash Course：https://www.bilibili.com/video/BV1gx411h7Y5"></a>Materialize CSS Crash Course：<a href="https://www.bilibili.com/video/BV1gx411h7Y5">https://www.bilibili.com/video/BV1gx411h7Y5</a></h3><h3 id="ReactStrap"><a href="#ReactStrap" class="headerlink" title="ReactStrap"></a>ReactStrap</h3><h2 id="JavaScript-语法糖"><a href="#JavaScript-语法糖" class="headerlink" title="JavaScript 语法糖"></a>JavaScript 语法糖</h2>Type Checkers<h3 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h3><h3 id="TypeScript从入门到精通：https-www-bilibili-com-video-BV1qV41167VD"><a href="#TypeScript从入门到精通：https-www-bilibili-com-video-BV1qV41167VD" class="headerlink" title="TypeScript从入门到精通：https://www.bilibili.com/video/BV1qV41167VD"></a>TypeScript从入门到精通：<a href="https://www.bilibili.com/video/BV1qV41167VD">https://www.bilibili.com/video/BV1qV41167VD</a></h3><h3 id="Flow"><a href="#Flow" class="headerlink" title="Flow"></a>Flow</h3><h2 id="服务端渲染"><a href="#服务端渲染" class="headerlink" title="服务端渲染"></a>服务端渲染</h2>Server Side  Rendering （SSR）<h3 id="React-js-1"><a href="#React-js-1" class="headerlink" title="React.js"></a>React.js</h3></li><li>Next.js</li><li>Next.js入门教程：<a href="https://www.bilibili.com/video/BV13441117KK">https://www.bilibili.com/video/BV13441117KK</a></li><li>GatsbyJS</li><li>GatsbyJS 实战：<a href="https://www.bilibili.com/video/BV1i4411T7AR">https://www.bilibili.com/video/BV1i4411T7AR</a> （英文）<h3 id="Vue-js-1"><a href="#Vue-js-1" class="headerlink" title="Vue.js"></a>Vue.js</h3></li><li>Nuxt.js</li><li>Nuxt.js入门：<a href="https://www.bilibili.com/video/BV1Xt41117Kg">https://www.bilibili.com/video/BV1Xt41117Kg</a><h3 id="Angular-1"><a href="#Angular-1" class="headerlink" title="Angular"></a>Angular</h3></li><li>Universal<h2 id="图形化编程"><a href="#图形化编程" class="headerlink" title="图形化编程"></a>图形化编程</h2>GraphQL<h3 id="Cocos-Creator"><a href="#Cocos-Creator" class="headerlink" title="Cocos Creator"></a>Cocos Creator</h3><h3 id="Cocos-图形游戏开发：https-www-bilibili-com-video-BV1sA411Y7x4"><a href="#Cocos-图形游戏开发：https-www-bilibili-com-video-BV1sA411Y7x4" class="headerlink" title="Cocos 图形游戏开发：https://www.bilibili.com/video/BV1sA411Y7x4"></a>Cocos 图形游戏开发：<a href="https://www.bilibili.com/video/BV1sA411Y7x4">https://www.bilibili.com/video/BV1sA411Y7x4</a></h3><h3 id="Three-js"><a href="#Three-js" class="headerlink" title="Three.js"></a>Three.js</h3><h3 id="Three-js基础教程-英文：https-www-bilibili-com-video-BV1ks411W78i"><a href="#Three-js基础教程-英文：https-www-bilibili-com-video-BV1ks411W78i" class="headerlink" title="Three.js基础教程-英文：https://www.bilibili.com/video/BV1ks411W78i"></a>Three.js基础教程-英文：<a href="https://www.bilibili.com/video/BV1ks411W78i">https://www.bilibili.com/video/BV1ks411W78i</a></h3><h3 id="Three-js教程：https-www-bilibili-com-video-BV1va4y1p7QB"><a href="#Three-js教程：https-www-bilibili-com-video-BV1va4y1p7QB" class="headerlink" title="Three.js教程：https://www.bilibili.com/video/BV1va4y1p7QB"></a>Three.js教程：<a href="https://www.bilibili.com/video/BV1va4y1p7QB">https://www.bilibili.com/video/BV1va4y1p7QB</a></h3><h2 id="静态站点生成器"><a href="#静态站点生成器" class="headerlink" title="静态站点生成器"></a>静态站点生成器</h2>Static Site Generators<h3 id="Next-js"><a href="#Next-js" class="headerlink" title="Next.js"></a>Next.js</h3><h3 id="Next-js入门教程：https-www-bilibili-com-video-BV13441117KK"><a href="#Next-js入门教程：https-www-bilibili-com-video-BV13441117KK" class="headerlink" title="Next.js入门教程：https://www.bilibili.com/video/BV13441117KK"></a>Next.js入门教程：<a href="https://www.bilibili.com/video/BV13441117KK">https://www.bilibili.com/video/BV13441117KK</a></h3><h3 id="GatsbyJS"><a href="#GatsbyJS" class="headerlink" title="GatsbyJS"></a>GatsbyJS</h3><h3 id="GatsbyJS-实战：https-www-bilibili-com-video-BV1i4411T7AR-（英文）"><a href="#GatsbyJS-实战：https-www-bilibili-com-video-BV1i4411T7AR-（英文）" class="headerlink" title="GatsbyJS 实战：https://www.bilibili.com/video/BV1i4411T7AR （英文）"></a>GatsbyJS 实战：<a href="https://www.bilibili.com/video/BV1i4411T7AR">https://www.bilibili.com/video/BV1i4411T7AR</a> （英文）</h3><h3 id="Nuxt-js"><a href="#Nuxt-js" class="headerlink" title="Nuxt.js"></a>Nuxt.js</h3><h3 id="Nuxt-js入门：https-www-bilibili-com-video-BV1Xt41117Kg"><a href="#Nuxt-js入门：https-www-bilibili-com-video-BV1Xt41117Kg" class="headerlink" title="Nuxt.js入门：https://www.bilibili.com/video/BV1Xt41117Kg"></a>Nuxt.js入门：<a href="https://www.bilibili.com/video/BV1Xt41117Kg">https://www.bilibili.com/video/BV1Xt41117Kg</a></h3><h3 id="Vuepress"><a href="#Vuepress" class="headerlink" title="Vuepress"></a>Vuepress</h3><h3 id="Vuepress入门到精通：https-www-bilibili-com-video-BV1vb411m7NY"><a href="#Vuepress入门到精通：https-www-bilibili-com-video-BV1vb411m7NY" class="headerlink" title="Vuepress入门到精通：https://www.bilibili.com/video/BV1vb411m7NY"></a>Vuepress入门到精通：<a href="https://www.bilibili.com/video/BV1vb411m7NY">https://www.bilibili.com/video/BV1vb411m7NY</a></h3><h3 id="Hugo"><a href="#Hugo" class="headerlink" title="Hugo"></a>Hugo</h3><h3 id="10分钟搭建个人网站：https-www-bilibili-com-video-BV1x64y117PX"><a href="#10分钟搭建个人网站：https-www-bilibili-com-video-BV1x64y117PX" class="headerlink" title="10分钟搭建个人网站：https://www.bilibili.com/video/BV1x64y117PX"></a>10分钟搭建个人网站：<a href="https://www.bilibili.com/video/BV1x64y117PX">https://www.bilibili.com/video/BV1x64y117PX</a></h3><h2 id="移动App开发"><a href="#移动App开发" class="headerlink" title="移动App开发"></a>移动App开发</h2>Mobile Applications<h3 id="React-Native"><a href="#React-Native" class="headerlink" title="React  Native"></a>React  Native</h3><h3 id="ReactNatvie基础：https-www-bilibili-com-video-BV1Eg4y16735"><a href="#ReactNatvie基础：https-www-bilibili-com-video-BV1Eg4y16735" class="headerlink" title="ReactNatvie基础：https://www.bilibili.com/video/BV1Eg4y16735"></a>ReactNatvie基础：<a href="https://www.bilibili.com/video/BV1Eg4y16735">https://www.bilibili.com/video/BV1Eg4y16735</a></h3><h3 id="ReactNatvie实战：https-www-bilibili-com-video-BV15K411s75p"><a href="#ReactNatvie实战：https-www-bilibili-com-video-BV15K411s75p" class="headerlink" title="ReactNatvie实战：https://www.bilibili.com/video/BV15K411s75p"></a>ReactNatvie实战：<a href="https://www.bilibili.com/video/BV15K411s75p">https://www.bilibili.com/video/BV15K411s75p</a></h3><h3 id="UniApp"><a href="#UniApp" class="headerlink" title="UniApp"></a>UniApp</h3><h3 id="Uni-App从入门到实战：https-www-bilibili-com-video-BV1BJ411W7pX"><a href="#Uni-App从入门到实战：https-www-bilibili-com-video-BV1BJ411W7pX" class="headerlink" title="Uni-App从入门到实战：https://www.bilibili.com/video/BV1BJ411W7pX"></a>Uni-App从入门到实战：<a href="https://www.bilibili.com/video/BV1BJ411W7pX">https://www.bilibili.com/video/BV1BJ411W7pX</a></h3><h3 id="Uni-App美团外卖：https-www-bilibili-com-video-BV1Zt4y117RR"><a href="#Uni-App美团外卖：https-www-bilibili-com-video-BV1Zt4y117RR" class="headerlink" title="Uni-App美团外卖：https://www.bilibili.com/video/BV1Zt4y117RR"></a>Uni-App美团外卖：<a href="https://www.bilibili.com/video/BV1Zt4y117RR">https://www.bilibili.com/video/BV1Zt4y117RR</a></h3><h3 id="Flutter"><a href="#Flutter" class="headerlink" title="Flutter"></a>Flutter</h3><h3 id="Flutter基础：https-www-bilibili-com-video-BV15t411U7yf"><a href="#Flutter基础：https-www-bilibili-com-video-BV15t411U7yf" class="headerlink" title="Flutter基础：https://www.bilibili.com/video/BV15t411U7yf"></a>Flutter基础：<a href="https://www.bilibili.com/video/BV15t411U7yf">https://www.bilibili.com/video/BV15t411U7yf</a></h3><h3 id="Flutter实战：https-www-bilibili-com-video-BV1kt411B7mu"><a href="#Flutter实战：https-www-bilibili-com-video-BV1kt411B7mu" class="headerlink" title="Flutter实战：https://www.bilibili.com/video/BV1kt411B7mu"></a>Flutter实战：<a href="https://www.bilibili.com/video/BV1kt411B7mu">https://www.bilibili.com/video/BV1kt411B7mu</a></h3><h3 id="Ionic"><a href="#Ionic" class="headerlink" title="Ionic"></a>Ionic</h3><h3 id="Ionic入门：https-www-bilibili-com-video-BV1Ub41117q5"><a href="#Ionic入门：https-www-bilibili-com-video-BV1Ub41117q5" class="headerlink" title="Ionic入门：https://www.bilibili.com/video/BV1Ub41117q5"></a>Ionic入门：<a href="https://www.bilibili.com/video/BV1Ub41117q5">https://www.bilibili.com/video/BV1Ub41117q5</a></h3><h2 id="桌面应用开发"><a href="#桌面应用开发" class="headerlink" title="桌面应用开发"></a>桌面应用开发</h2>Desktop Applications<h3 id="Electron"><a href="#Electron" class="headerlink" title="Electron"></a>Electron</h3><h3 id="Electron入门：https-www-bilibili-com-video-BV1QB4y1F722"><a href="#Electron入门：https-www-bilibili-com-video-BV1QB4y1F722" class="headerlink" title="Electron入门：https://www.bilibili.com/video/BV1QB4y1F722"></a>Electron入门：<a href="https://www.bilibili.com/video/BV1QB4y1F722">https://www.bilibili.com/video/BV1QB4y1F722</a></h3><h3 id="Electron基础：https-www-bilibili-com-video-BV177411s7Lt"><a href="#Electron基础：https-www-bilibili-com-video-BV177411s7Lt" class="headerlink" title="Electron基础：https://www.bilibili.com/video/BV177411s7Lt"></a>Electron基础：<a href="https://www.bilibili.com/video/BV177411s7Lt">https://www.bilibili.com/video/BV177411s7Lt</a></h3><h2 id="学到此处，基础部分学习已经全部完成。"><a href="#学到此处，基础部分学习已经全部完成。" class="headerlink" title="学到此处，基础部分学习已经全部完成。"></a>学到此处，基础部分学习已经全部完成。</h2></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;网络知识&quot;&gt;&lt;a href=&quot;#网络知识&quot; class=&quot;headerlink&quot; title=&quot;网络知识&quot;&gt;&lt;/a&gt;网络知识&lt;/h2&gt;&lt;h3 id=&quot;1-网络工作原理&quot;&gt;&lt;a href=&quot;#1-网络工作原理&quot; class=&quot;headerlink&quot; title=&quot;1. 网络工作原理&quot;&gt;&lt;/a&gt;1. 网络工作原理&lt;/h3&gt;&lt;h3 id=&quot;计算机网络原理：https-www-bilibili-com-video-BV1xJ41137Q3&quot;&gt;&lt;a href=&quot;#计算机网络原理：https-www-bilibili-com-video-BV1xJ41137Q3&quot; class=&quot;headerlink&quot; title=&quot;计算机网络原理：https://www.bilibili.com/video/BV1xJ41137Q3&quot;&gt;&lt;/a&gt;计算机网络原理：&lt;a href=&quot;https://www.bilibili.com/video/BV1xJ41137Q3&quot;&gt;https://www.bilibili.com/video/BV1xJ41137Q3&lt;/a&gt;&lt;/h3&gt;</summary>
    
    
    
    <category term="前端学习" scheme="https://www.carryone.top/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="前端学习" scheme="https://www.carryone.top/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>技术胖收藏夹分享</title>
    <link href="https://www.carryone.top/2022/01/23/%E6%8A%80%E6%9C%AF%E8%83%96%E6%94%B6%E8%97%8F%E5%A4%B9%E5%88%86%E4%BA%AB/"/>
    <id>https://www.carryone.top/2022/01/23/%E6%8A%80%E6%9C%AF%E8%83%96%E6%94%B6%E8%97%8F%E5%A4%B9%E5%88%86%E4%BA%AB/</id>
    <published>2022-01-23T05:44:00.000Z</published>
    <updated>2022-01-23T05:45:28.087Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自学前端程序-私藏工具和网站分享"><a href="#自学前端程序-私藏工具和网站分享" class="headerlink" title="自学前端程序 私藏工具和网站分享"></a>自学前端程序 私藏工具和网站分享</h1><h2 id="01-JavaScript"><a href="#01-JavaScript" class="headerlink" title="01.JavaScript"></a>01.JavaScript</h2><ul><li><a href="https://wangdoc.com/javascript/">JavaScript 教程 | 通俗易懂的JavaScript教程</a></li><li><a href="https://es6.ruanyifeng.com/">ES6 入门教程 | 通俗易懂的ES6入门教程</a><a id="more"></a></li><li><a href="https://javascript30.com/">JavaScript 30  |  使用原生JavaScript在30天内完成30个项目</a></li><li><a href="https://zh.javascript.info/">现代 JavaScript 教程 |  最近很流行的JavaScript教程</a></li><li><a href="https://blog.poetries.top/node-learning-notes/">Node.js学习指南 | 系统的Node.js学习教程和笔记系统整理</a></li><li><a href="https://github.com/ryanmcdermott/clean-code-javascript">JS 代码规范 | 优秀的 JS代码规范</a></li><li><a href="https://github.com/xcatliu/typescript-tutorial">TypeScript 教程 | 通俗易懂的TypeScript教程</a></li><li><a href="https://jspang.com/detailed?id=63">TypeScript 教程 |  最好的TypeScript 视频+图文教程</a></li></ul><h2 id="02-CSS样式"><a href="#02-CSS样式" class="headerlink" title="02.CSS样式"></a>02.CSS样式</h2><ul><li><a href="https://lhammer.cn/You-need-to-know-css/#/zh-cn/">CSS Tricks 效果大全 | CSS的各种效果实现 有很多动画效果</a></li><li><a href="https://github.com/chokcoco/CSS-Inspiration">CSS Inspiration |  CSS灵感的诞生地  我每天都的网站</a></li><li><a href="https://github.com/QiShaoXuan/css_tricks"> CSS 常用样式 |  有很多常用的CSS样式</a></li><li><a href="https://animista.net/"> Animista | CSS动画库  主打按需定制CSS动画效果</a></li><li><a href="https://animista.net/"> Animista | CSS动画库  主打按需定制CSS动画效果</a></li><li><a href="https://cssminifier.com/"> CSS Minifier | 在线CSS代码简化/压缩工具</a></li><li><a href="https://sass.bootcss.com/documentation"> Sass: Sass 文档 | Sass 中文网  成熟、稳定、强大的CSS扩展语言</a></li><li><a href="https://less.bootcss.com/"> Less 快速入门 | Less.js 中文文档 将CSS赋予了动态语言特性的样式语言</a></li><li><a href="https://stylus-lang.com/"> stylus | CSS扩展  富有变现里、动态、健壮的CSS</a></li></ul><h2 id="03-算法数据"><a href="#03-算法数据" class="headerlink" title="03.算法数据"></a>03.算法数据</h2><ul><li><a href="http://github.com/trekhleb/javascript-algorithms"> JavaScript 算法与数据结构 | 多种基于JavaScript的算法与数据结构</a></li><li><a href="https://github.com/azl397985856/leetcode"> leetcode 解题之路 |  私藏LeetCode解题攻略 </a></li><li><a href="https://github.com/MisterBooo/LeetCodeAnimation"> 五分钟学算法 |  每天拿出五分钟  学学算法  比如上个厕所就学了 </a></li><li><a href="https://github.com/biaochenxuying/blog/issues/43">数据结构与算法项目推荐 | Github上170K+Star的前端学习数据结构和算法题目 </a></li><li><a href="https://github.com/biaochenxuying/blog/issues/42">JavaScript  十大经典排序算法 | JavaScript排序必会题目  作者功力很深 值得学习 </a></li><li><a href="https://github.com/algorithm-visualizer/algorithm-visualizer">算法可视化工具 |  用可视化工具和交互方式 让你从代码中可视化算法 </a></li><li><a href="https://visualgo.net/en">算法可视化来源 </a></li><li><a href="https://github.com/skidding/illustrated-algorithms">算法的工作方式 | 变量和操作的可视化表示 增强了控制流和实际源代码 </a></li></ul><h2 id="04-前端面试"><a href="#04-前端面试" class="headerlink" title="04.前端面试"></a>04.前端面试</h2><ul><li><a href="https://blog.poetries.top/FE-Interview-Questions/">前端面试常考问题整理 |  按模块和知识点分类</a></li><li><a href="https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions">前端开发面试题</a></li><li><a href="https://github.com/h5bp/Front-end-Developer-Interview-Questions/">WEB前端面试宝典</a></li><li><a href="https://github.com/shfshanyue/blog/blob/master/post/juejin-interview.md">掘金前端面试题合集</a></li><li><a href="https://yuchengkai.cn/">前端面试图谱</a></li><li><a href="https://github.com/biaochenxuying/blog/issues/47">前端面试开源项目汇总 | Github上100K+ Star 的前端面试开源项目汇总</a></li></ul><h2 id="05-技术社区"><a href="#05-技术社区" class="headerlink" title="05.技术社区"></a>05.技术社区</h2><ul><li><a href="https://github.com/">GitHub  |  高质量内容创作和分享平台</a></li><li><a href="https://stackoverflow.com/">Stackoverflow |一个回答技术问题的网站</a></li><li><a href="https://juejin.cn/">掘金 | 国内的很多优质前端文章都掘金</a></li><li><a href="https://www.cnblogs.com/">博客园  | 一个很纯粹的技术博客平台</a></li><li><a href="https://www.zhihu.com/">知乎 |  很多程序人喜欢泡在知乎</a></li><li><a href="https://www.csdn.net/">CSDN  | 老牌社区  程序员必上的一个社区</a></li><li><a href="https://www.v2ex.com/">v2ex  | 程序员分享和探索的社区</a></li><li><a href="https://segmentfault.com/">segmentfault  | 低调技术博客社区</a></li><li><a href="https://cnodejs.org/">Node.js 中文社区 |  node专业中文社区</a></li><li><a href="https://www.smashingmagazine.com/">博客杂志站点 | 一个 web 技术类的博客杂志站点</a></li><li><a href="https://www.jstips.co/">JS 技术的网站 | 每天推出一个JS技巧的网站</a></li><li><a href="https://www.jstips.co/">W3Cplus | 推广国内行业的技术博客</a></li><li><a href="https://docschina.org/">印记中文 | 最权威的技术中文文档社区</a></li></ul><h2 id="06-前端博客"><a href="#06-前端博客" class="headerlink" title="06.前端博客"></a>06.前端博客</h2><ul><li><a href="https://jspang.com/">技术胖博客 |  专注前端 每年100集免费前端视频</a></li><li><a href="http://www.alloyteam.com/">腾讯Alloy Team  | 腾讯前端博客 每天必看</a></li><li><a href="https://isux.tencent.com/">腾讯用户体验博客 | 专注于前端用户体验</a></li><li><a href="https://fed.taobao.org/">淘系前端博客 |  淘宝前端博客 代表中国最强前端实力</a></li><li><a href="https://aotu.io/">京东凹凸实验室  |  京东前端技术博客</a></li><li><a href="https://zhuanlan.zhihu.com/ElemeFE">饿了么前端博客  |  知乎上的最强前端博客</a></li><li><a href="http://fex.baidu.com/">百度前端博客  |  百度前端团队旗下博客</a></li><li><a href="https://75.team/">360奇舞团  |  360公司前端团队</a></li><li><a href="https://tech.meituan.com/">美团技术博客  |  美团技术团队博客</a></li></ul><h2 id="07-构建工具"><a href="#07-构建工具" class="headerlink" title="07.构建工具"></a>07.构建工具</h2><ul><li><a href="https://www.npmjs.com/">NPM |  包管理 和 项目构建工具</a></li><li><a href="https://webpack.js.org/">webpack  | 前端最流行的项目构建工具</a></li><li><a href="https://yarnpkg.com/">Yarn  |  后起之秀 优秀的包管理和构建工具</a></li><li><a href="https://www.gulpjs.com.cn/">Gulp  |  老牌构建工具</a></li><li><a href="https://babeljs.io/">Babel  | ES6构建转换工具</a></li><li><a href="https://cn.eslint.org/">ESLint  | 可组装的JavaScript和JSX检查工具</a></li><li><a href="https://www.postcss.com.cn/">PostCSS | 用JavaScript转换CSS代码的工具</a></li></ul><h2 id="08-部署工具"><a href="#08-部署工具" class="headerlink" title="08.部署工具"></a>08.部署工具</h2><ul><li><a href="https://pages.github.com/">Github Page  | Github提供的免费静态网站托管服务</a></li><li><a href="https://www.netlify.com/">Netlify  |  30秒内部署你的网站</a></li><li><a href="https://vercel.com/">Vercel  |  快速部署你的网站 国外很流行</a></li><li><a href="https://surge.sh/">Surge  |  一个命令部署你的网站</a></li><li><a href="https://www.heroku.com/">Heroku  |  运动构建 、 运行你的网站和应用</a></li></ul><h2 id="09-静态站点搭建"><a href="#09-静态站点搭建" class="headerlink" title="09.静态站点搭建"></a>09.静态站点搭建</h2><ul><li><a href="https://hexo.io/zh-cn/">Hexo  |  最流行的静态博客程序 Markdown编写 生成静态站点</a></li><li><a href="https://www.vuepress.cn/">VuePress  |  Vue驱动的静态网站生成器</a></li><li><a href="https://www.gitbook.com/">GitBook  | 现代化的文档平台，支持团队协作</a></li></ul><h2 id="10-前端代码规范"><a href="#10-前端代码规范" class="headerlink" title="10.前端代码规范"></a>10.前端代码规范</h2><ul><li><a href="https://tgideas.qq.com/doc/index.html">Tgideas | 腾讯前端代码规范 值得参考</a></li><li><a href="https://guide.aotu.io/index.html">京东  |  京东前端代码规范文档 分类详细</a></li><li><a href="https://codeguide.bootcss.com/">Bootstrap编码规范  |  适合个人和小团队使用的代码规范 不复杂</a></li><li><a href="https://es6.ruanyifeng.com/#docs/style">ES6 编程风格  | 阮一峰编写的ES6代码规范  值得每个人阅读并参考</a></li><li><a href="https://github.com/airbnb/javascript">Airbnb  前端代码规范  |  国外企业的前端代码规范</a></li><li><a href="https://eslint.org/">ESLint  |  代码规范检查和格式化工具</a></li><li><a href="https://prettier.io/">Prettier  | VSCode 最热门的代码格式化工具  让你写出漂亮的代码</a></li></ul><h2 id="11-调试抓包"><a href="#11-调试抓包" class="headerlink" title="11.调试抓包"></a>11.调试抓包</h2><ul><li><a href="https://wproxy.org/whistle/">Whistle  |  代理抓包工具  我一直在用的工具 很好很强大</a></li><li><a href="https://www.telerik.com/fiddler">Fiddler  |  使用人数最多的抓包工具</a></li></ul><h2 id="12-在线工具"><a href="#12-在线工具" class="headerlink" title="12.在线工具"></a>12.在线工具</h2><ul><li><a href="https://codepen.io/">CodePen  |  前端在线测试和演示工具  国外站点</a></li><li><a href="https://caniuse.com/">Can  I  use |  Web前端兼容性列表</a></li><li><a href="https://tinypng.com/">TinyPNG  |  PNG/JPG 图片在线压缩工具</a></li><li><a href="https://www.umeng.com/">CNZZ |  老牌站点统计工具  5年前国内站长必上网站</a></li><li><a href="https://web.dev/measure/">web.dev  |  评测网站性能  基于Lighthouse</a></li><li><a href="https://www.shapedivider.app/">Shape Divider  | 定制各种形状SVG的工具</a></li><li><a href="https://gtmetrix.com/">GTmetrix  |  网页性能在线分析工具</a></li><li><a href="https://carbon.now.sh/">Carbon  |  代码转图片工具  </a></li><li><a href="https://www.wappalyzer.com/">Wappalyzer  |  检测某个网站的技术栈  </a></li><li><a href="https://unbug.github.io/codelf">CODEIF | 变量方法起名工具  人工智能加持  </a></li><li><a href="https://tool.lu/"> tool.lu  |  程序员在线工具大全   </a></li></ul><h2 id="13-开发工具"><a href="#13-开发工具" class="headerlink" title="13.开发工具"></a>13.开发工具</h2><ul><li><a href="https://code.visualstudio.com/"> VSCode  |  前端最流行的编辑器   </a></li><li><a href="https://www.sublimetext.com/"> Sublime Text  |  轻量级代码编辑工具 曾经我的最爱   </a></li><li><a href="https://www.jetbrains.com/webstorm/"> WebStom |  忠爱粉最多的编辑器 </a></li><li><a href="https://atom.io/"> Atom  |   用的人很多  我却不喜欢的编辑器 </a></li><li><a href="https://www.typora.io/"> Typora |  程序人Mrakdown笔记  一直在用的笔记工具 </a></li></ul><h2 id="14-开发者大会"><a href="#14-开发者大会" class="headerlink" title="14.开发者大会"></a>14.开发者大会</h2><ul><li><a href="https://fequan.com/"> Vue.js开发者大会 |  前端人必须关注的前端大会 </a></li><li><a href="https://jsconfchina.com/"> 中国JS开发者大会  |  公司每年必组织参加的技术大会 </a></li><li><a href="https://css.w3ctech.com/"> CSS开发者大会 |  提高CSS技术的开发者大会  打开视野 面向世界 </a></li><li><a href="https://www.alibabaf2e.com/"> D2前端开发者大会 |  阿里组织的大会 可以看直播  </a></li></ul><h2 id="15-WEB图标"><a href="#15-WEB图标" class="headerlink" title="15.WEB图标"></a>15.WEB图标</h2><ul><li><a href="http://www.fontawesome.com.cn/"> Font Awesome  |  网站开发最流行的图标集  </a></li><li><a href="https://feathericons.com/"> Feather |  简洁美观的开源图标  </a></li><li><a href="https://material.io/resources/icons/"> Material  Design Icons  |  轻快、精美的符号图标  </a></li><li><a href="https://tablericons.com/"> Tabler Icons | 681枚可定制的开源SVG图标  </a></li><li><a href="https://simpleicons.org/"> 常见品牌的SVG图标  </a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;自学前端程序-私藏工具和网站分享&quot;&gt;&lt;a href=&quot;#自学前端程序-私藏工具和网站分享&quot; class=&quot;headerlink&quot; title=&quot;自学前端程序 私藏工具和网站分享&quot;&gt;&lt;/a&gt;自学前端程序 私藏工具和网站分享&lt;/h1&gt;&lt;h2 id=&quot;01-JavaScript&quot;&gt;&lt;a href=&quot;#01-JavaScript&quot; class=&quot;headerlink&quot; title=&quot;01.JavaScript&quot;&gt;&lt;/a&gt;01.JavaScript&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://wangdoc.com/javascript/&quot;&gt;JavaScript 教程 | 通俗易懂的JavaScript教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://es6.ruanyifeng.com/&quot;&gt;ES6 入门教程 | 通俗易懂的ES6入门教程&lt;/a&gt;</summary>
    
    
    
    <category term="前端学习" scheme="https://www.carryone.top/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="前端学习" scheme="https://www.carryone.top/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript学习资料链接</title>
    <link href="https://www.carryone.top/2022/01/23/JavaScript%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E9%93%BE%E6%8E%A5/"/>
    <id>https://www.carryone.top/2022/01/23/JavaScript%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E9%93%BE%E6%8E%A5/</id>
    <published>2022-01-23T05:40:00.000Z</published>
    <updated>2022-01-23T05:41:45.036Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JavaScript知识"><a href="#JavaScript知识" class="headerlink" title="JavaScript知识"></a>JavaScript知识</h2><ul><li><a href="http://www.w3school.com.cn/js/">JavaScript 教程 - w3school</a></li><li><a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000">JavaScript教程 - 廖雪峰</a><a id="more"></a></li><li><a href="https://www.zhihu.com/question/19713563">如何循序渐进、有效地学习JavaScript？</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript">重新介绍 JavaScript（JS 教程）</a></li><li><a href="https://www.javascriptcn.com/">JavaScript中文网</a></li></ul><h2 id="JavaScript主流框架"><a href="#JavaScript主流框架" class="headerlink" title="JavaScript主流框架"></a>JavaScript主流框架</h2><h3 id="angular"><a href="#angular" class="headerlink" title="angular"></a>angular</h3><ul><li><a href="http://www.ituring.com.cn/minibook/303">AngularJS入门教程：http://www.ituring.com.cn/minibook/303</a></li><li><a href="http://docs.ngnice.com/guide">API翻译：http://docs.ngnice.com/guide</a></li><li><a href="https://github.com/johnpapa/angular-styleguide">AngularJs编程规范：https://github.com/johnpapa/angular-styleguide</a></li><li><a href="http://www.reqianduan.com/1722.html">Angular代码规范：http://www.reqianduan.com/1722.html</a></li><li><a href="https://github.com/xufei/blog/issues/23">优化Angular应用的性能</a></li><li><a href="http://www.csdn.net/article/2013-09-18/2816972-AngularJS-performance-tuning-for-long-list">对AngularJS进行性能调优的7个建议</a></li><li><a href="http://www.oschina.net/translate/top-10-mistakes-angularjs-developers-make">AngularJS 开发者最常犯的 10 个错误</a></li><li><a href="http://ourjs.com/detail/54a0b5cd71caa3b40a000001">AngularJS在大型单页面应用中的性能优化（一）</a></li><li><a href="http://www.codesec.net/view/200952.html">AngularJS1.3一些技巧</a></li><li><a href="http://my.oschina.net/blogshi/blog/293631">实践总结 - 不可错过的Angular应用技巧</a></li></ul><h3 id="react"><a href="#react" class="headerlink" title="react"></a>react</h3><ul><li><a href="http://www.react-china.org/">react.js 中文论坛</a></li><li><a href="https://facebook.github.io/react/index.html">react.js 官方网址</a></li><li><a href="https://facebook.github.io/react/docs/getting-started.html">react.js 官方文档</a></li><li><a href="https://hulufei.gitbooks.io/react-tutorial/content/index.html">React 入门教程</a></li><li><a href="https://github.com/ant-design/ant-design">基于react组件化开发</a></li><li><a href="https://github.com/dwqs/react-style-guide">React 编程规范(by Airbnb)</a></li></ul><h3 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h3><ul><li><a href="http://cn.vuejs.org/">Vue 官方</a></li><li><a href="http://forum.vuejs.org/">Vue 论坛</a></li><li><a href="http://www.cnblogs.com/aaronjs/p/3660102.html">Vue 入门指南</a></li><li><a href="http://segmentfault.com/a/1190000000411057">Vue 的一些资源索引</a></li></ul><h2 id="JavaScript学习资料"><a href="#JavaScript学习资料" class="headerlink" title="JavaScript学习资料"></a>JavaScript学习资料</h2><ul><li><a href="https://amazon.cn/gp/product/B007OQQVMY/ref=as_li_tl?ie=UTF8&tag=misigou-23&camp=536&creative=3200&linkCode=as2&creativeASIN=B007OQQVMY&linkId=e7dfc50605beec89cdc1596230531dbf">书籍-JavaScript高级程序设计(第3版)</a></li><li><a href="https://amazon.cn/gp/product/B007VISQ1Y/ref=as_li_tl?ie=UTF8&tag=misigou-23&camp=536&creative=3200&linkCode=as2&creativeASIN=B007VISQ1Y&linkId=bba2798c48e989d2d9f20756e8e6f895">书籍-O’Reilly精品图书系列:JavaScript权威指南(第6版)</a></li><li><a href="https://amazon.cn/gp/product/B004VJM5KE/ref=as_li_tl?ie=UTF8&tag=misigou-23&camp=536&creative=3200&linkCode=as2&creativeASIN=B004VJM5KE&linkId=f6da1bd98885e86df1a294783d8e8f0d">书籍-JavaScript DOM编程艺术(第2版)</a></li><li><a href="https://amazon.cn/gp/product/B0097CON2S/ref=as_li_tl?ie=UTF8&tag=misigou-23&camp=536&creative=3200&linkCode=as2&creativeASIN=B0097CON2S&linkId=13c1fa245418b8f421e3b3ea00c5f518">书籍-JavaScript语言精粹(修订版)</a></li><li><a href="https://amazon.cn/gp/product/B00XJ2AU3S/ref=as_li_tl?ie=UTF8&tag=misigou-23&camp=536&creative=3200&linkCode=as2&creativeASIN=B00XJ2AU3S&linkId=40999afbac8d264f03cc480212bb8d95">书籍-JavaScript设计模式与开发实践</a></li><li><a href="https://amazon.cn/gp/product/B07574N7Y2/ref=as_li_tl?ie=UTF8&tag=misigou-23&camp=536&creative=3200&linkCode=as2&creativeASIN=B07574N7Y2&linkId=c90fb8ee7eef18ef432cd6d9017e2bd2">书籍-JavaScript框架设计(第2版)</a></li><li><a href="https://amazon.cn/gp/product/B01264FOY4/ref=as_li_tl?ie=UTF8&tag=misigou-23&camp=536&creative=3200&linkCode=as2&creativeASIN=B01264FOY4&linkId=6e4c99db0316d3e399627e805b71a23d">书籍-JavaScript函数式编程</a></li></ul><h2 id="JavaScript其他整理"><a href="#JavaScript其他整理" class="headerlink" title="JavaScript其他整理"></a>JavaScript其他整理</h2><ul><li><a href="https://github.com/youyudehexie/node123">node.js中文资料导航</a></li><li><a href="https://github.com/zhubangbang/zhubangbang-javascript-notes">朱邦邦的JavaScript学习笔记</a></li><li><a href="https://github.com/hevin-lee/-----">前端资料大全资源教程-综合类</a></li><li><a href="https://github.com/lengxing/JavaScript-material-collection">长期搜集一些关于 JavaScript 的资料</a></li><li><a href="https://github.com/appleappleapple/AngularJsLearning">AngularJs学习资料、包括技术博客、教程、第三方插件、工具</a></li><li><a href="https://github.com/MrYangPan/jstraining/blob/master/docs/history.md">前端开发的历史和趋势</a></li><li><a href="https://github.com/Jasonwang911/js-designer">大前端学习资料汇总，激励自己一下</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;JavaScript知识&quot;&gt;&lt;a href=&quot;#JavaScript知识&quot; class=&quot;headerlink&quot; title=&quot;JavaScript知识&quot;&gt;&lt;/a&gt;JavaScript知识&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3school.com.cn/js/&quot;&gt;JavaScript 教程 - w3school&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000&quot;&gt;JavaScript教程 - 廖雪峰&lt;/a&gt;</summary>
    
    
    
    <category term="前端学习" scheme="https://www.carryone.top/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="JavaScript" scheme="https://www.carryone.top/tags/JavaScript/"/>
    
    <category term="前端学习" scheme="https://www.carryone.top/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>前端工程师必备书籍清单</title>
    <link href="https://www.carryone.top/2022/01/23/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%BF%85%E5%A4%87%E4%B9%A6%E7%B1%8D%E6%B8%85%E5%8D%95/"/>
    <id>https://www.carryone.top/2022/01/23/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%BF%85%E5%A4%87%E4%B9%A6%E7%B1%8D%E6%B8%85%E5%8D%95/</id>
    <published>2022-01-23T05:39:00.000Z</published>
    <updated>2022-01-23T05:40:17.405Z</updated>
    
    <content type="html"><![CDATA[<ul><li>大致分为以下7大系列：CSS系列、DOM系列、JavaScript基础系列、JavaScript应用系列、JavaScript进阶系列、<br>JQuery类库系列、MVVM框架系列、HybirdApp系列、ES6+系列、前端工程化系列。这些书籍在这里免费提供下载，有兴趣的一起学习。<a id="more"></a></li></ul><h2 id="DOM系列"><a href="#DOM系列" class="headerlink" title="DOM系列"></a>DOM系列</h2><ul><li>《DOM启蒙》</li><li>《JavaScript+DOM编程艺术（第2版）》 </li><li>《HTML5秘籍 (第2版)》</li><li>《响应式Web设计 HTML5和CSS3实战 (第2版)》 </li><li>《HTML5_Canvas详解》</li></ul><h2 id="CSS系列"><a href="#CSS系列" class="headerlink" title="CSS系列"></a>CSS系列</h2><ul><li>《CSS 权威指南（第3版）》 </li><li>《精通CSS：高级 Web 标准解决方案（第2版）》 </li><li>《CSS彻底设计研究》 </li><li>《前端CSS世界》 </li></ul><h2 id="JavaScript基础系列"><a href="#JavaScript基础系列" class="headerlink" title="JavaScript基础系列"></a>JavaScript基础系列</h2><ul><li>《学习JavaScript数据结构与算法（第2版）》 </li><li>《JavaScript忍者秘籍PDF》 </li><li>《JavaScript语言精粹》 </li><li>《编写可维护的JavaScript》 </li><li>《超实用的JavaScript代码段》 </li><li>《深入理解JavaScript》 </li><li>《你不知道的JavaScript》上中下卷</li><li>《JavaScript异步编程》</li></ul><h2 id="JavaScript应用系列"><a href="#JavaScript应用系列" class="headerlink" title="JavaScript应用系列"></a>JavaScript应用系列</h2><ul><li>《JavaScriptWeb应用开发》 </li><li>《基于MVC的JavaScript Web富应用开发》 </li><li>《单页Web应用：JavaScript从前端到后端》 </li><li>《移动WEB前端高级开发实践》 </li></ul><h2 id="JavaScript进阶系列"><a href="#JavaScript进阶系列" class="headerlink" title="JavaScript进阶系列"></a>JavaScript进阶系列</h2><ul><li>《JavaScript高级程序设计（第3版）》 </li><li>《JavaScript权威指南(第6版)》 </li><li>《JavaScript设计模式》 </li><li>《JavaScript框架设计》 </li><li>《JS函数式编程》 </li><li>《第三方JavaScript编程》 </li></ul><h2 id="JQuery类库系列"><a href="#JQuery类库系列" class="headerlink" title="JQuery类库系列"></a>JQuery类库系列</h2><ul><li>《锋利的jQuery（第2版）》 </li><li>《jQuery技术内幕》 </li><li>《扩展jQuery》 </li></ul><h2 id="MVVM框架系列"><a href="#MVVM框架系列" class="headerlink" title="MVVM框架系列"></a>MVVM框架系列</h2><ul><li>《Vue.js权威指南》 </li><li>《Vue.js实战》 </li><li>《深入浅出React和Redux》 </li><li>《React Native 精解与实战》 </li><li>《Angular权威教程》 </li></ul><h2 id="HybirdApp系列"><a href="#HybirdApp系列" class="headerlink" title="HybirdApp系列"></a>HybirdApp系列</h2><ul><li>《从点子到App - 用ionic构建混合移动应用》</li><li>《React Native移动开发实战》</li></ul><h2 id="ES6-系列"><a href="#ES6-系列" class="headerlink" title="ES6+系列"></a>ES6+系列</h2><ul><li>《JavaScript ES6函数式编程入门经典》</li><li>《es6标准入门第3版》</li></ul><h2 id="前端工程化系列"><a href="#前端工程化系列" class="headerlink" title="前端工程化系列"></a>前端工程化系列</h2><ul><li>《现代前端技术解析 (前端知识体系与架构思维解析)》</li><li>《前端架构：从入门到微前端》</li><li>《移动Web前端高效开发实战：HTML5+CSS3+JavaScript+Webpack+React Native+Vue.js+Node.js》</li></ul><h2 id="Node-js系列"><a href="#Node-js系列" class="headerlink" title="Node.js系列"></a>Node.js系列</h2><ul><li>《深入浅出Node.js》</li><li>《Node与Express开发》</li><li>《Node.js调试指南》</li><li>《Node.js设计模式》</li></ul><h2 id="附加系列"><a href="#附加系列" class="headerlink" title="附加系列"></a>附加系列</h2><ul><li>《WebKit技术内幕》</li><li>《HTTP权威指南》</li><li>《Nginx高性能web服务器详解》</li><li>《微服务设计》</li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;大致分为以下7大系列：CSS系列、DOM系列、JavaScript基础系列、JavaScript应用系列、JavaScript进阶系列、&lt;br&gt;JQuery类库系列、MVVM框架系列、HybirdApp系列、ES6+系列、前端工程化系列。这些书籍在这里免费提供下载，有兴趣的一起学习。</summary>
    
    
    
    <category term="前端学习" scheme="https://www.carryone.top/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="前端学习" scheme="https://www.carryone.top/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>CSS样式：导航栏</title>
    <link href="https://www.carryone.top/2022/01/21/CSS%E6%A0%B7%E5%BC%8F%EF%BC%9A%E5%AF%BC%E8%88%AA%E6%A0%8F/"/>
    <id>https://www.carryone.top/2022/01/21/CSS%E6%A0%B7%E5%BC%8F%EF%BC%9A%E5%AF%BC%E8%88%AA%E6%A0%8F/</id>
    <published>2022-01-21T07:09:00.000Z</published>
    <updated>2022-01-21T07:24:50.115Z</updated>
    
    <content type="html"><![CDATA[<p>易用的导航对于任何网站都很重要。<br>通过使用 CSS，您可以将无聊的 HTML 菜单转换为美观的导航栏。</p><a id="more"></a><p><strong>HTML:</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;head&gt;    &lt;title&gt;carryon e.top&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;    &lt;header&gt;        &lt;div class&#x3D;&quot;main-nav&quot;&gt;            &lt;ul&gt;                &lt;li&gt;&lt;a class&#x3D;&quot;active&quot; href&#x3D;&quot;#&quot;&gt;首页&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;第二页&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;第三页&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;第四页&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;第五页&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;            &lt;&#x2F;ul&gt;        &lt;&#x2F;div&gt;    &lt;&#x2F;header&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>CSS:</strong></p><pre class="line-numbers language-none"><code class="language-none">header .main-nav&#123;       height: 60px;       margin-top: 20px;       background-color: rgb(48, 47, 47);   &#125;   header .main-nav ul&#123;       width: 1024px;       height: 60px;       margin:0 auto;   &#125;   header .main-nav ul li&#123;       float: left;       list-style-type: none;       width: 128px;       text-align: center;       line-height: 60px;       border-right: 3px solid rgb(63, 60, 60);   &#125;   header .main-nav ul li a&#123;       text-decoration: none;       color: white;       display: block;        width: 132px;        height: 60px;   &#125;   header .main-nav ul li a:hover&#123;       background-color: black   &#125;   .active&#123;       background-color: black;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>最终效果:</strong></p><p><img src="/img/CSS/css-1%E5%AF%BC%E8%88%AA%E6%A0%8F.png" alt="overwrote existing file"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;易用的导航对于任何网站都很重要。&lt;br&gt;通过使用 CSS，您可以将无聊的 HTML 菜单转换为美观的导航栏。&lt;/p&gt;</summary>
    
    
    
    <category term="CSS" scheme="https://www.carryone.top/categories/CSS/"/>
    
    
    <category term="CSS" scheme="https://www.carryone.top/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Node.js是什么？</title>
    <link href="https://www.carryone.top/2022/01/18/Node-js%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
    <id>https://www.carryone.top/2022/01/18/Node-js%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/</id>
    <published>2022-01-18T12:54:00.000Z</published>
    <updated>2022-01-18T13:02:38.949Z</updated>
    
    <content type="html"><![CDATA[<p>Node.js 不是一门新的编程语言，也不是一个 JavaScript 框架，它是一套 JavaScript 运行环境，用来支持 JavaScript 代码的执行。用编程术语来讲，Node.js 是一个 JavaScript 运行时（Runtime）。</p><a id="more"></a><p>在 Node.js 之前，JavaScript 只能运行在浏览器中，作为网页脚本使用，为网页添加一些特效，或者和服务器进行通信。有了Node.js以后，JavaScript 就可以脱离浏览器，像其它编程语言一样直接在计算机上使用，想干什么就干什么，再也不受浏览器的限制了。</p><p><strong>运行时是什么？</strong></p><p>所谓运行时，就是程序在运行期间需要依赖的一系列组件或者工具；把这些工具和组件打包在一起提供给程序员，程序员就能运行自己编写的代码了。</p><p>对于 JavaScript 来说，它在运行期间需要依赖以下组件：</p><ol><li><p>解释器<br>JavaScript 是一种脚本语言，需要一边解释一边运行，用到哪些源代码就编译哪些源代码，整个过程由解释器完成。没有解释器的话，JavaScript 只是一堆纯文本文件，不能被计算机识别。</p></li><li><p>标准库<br>我们在 JavaScript 代码中会调用一些内置函数，这些函数不是我们自己编写的，而是标准库自带的。</p></li><li><p>本地模块<br>所谓本地模块，就是已经被提前编译好的模块，它们是二进制文件，和可执行文件在内部结构上没有什么区别，只是不能单独运行而已。这些本地模块其实就是动态链接库（在 Windows 下是 .dll 文件），如果你使用过C语言、C++ 等编译型语言，那你应该能够更好地理解它。</p></li></ol><p>JavaScript 的很多功能都需要本地模块的支持，比如：</p><pre><code>• Cookie 用于存储少量的用户数据，它是用户计算机上的一种小文件，使用 Cookie 必须有文件操作模块的支持。• Ajax 可以借助互联网从服务器请求数据，这是一种网络操作，必须有网络库的支持。• 一步一步跟踪代码的执行流程，从中发现逻辑错误，这个过程叫做调试，需要有调试器（Debugger）的支持。• JavaScript 可以操作 HTML，这需要 HTML 解析模块提前构建起 DOM 树。本地模块一般封装了通用功能，对性能要求较高，所以通常使用编译型语言来实现，比如C语言、C++、汇编语言等。</code></pre><p>JavaScript 解释器需要本地模块的支持，标准库在编写时也会调用本地模块的接口，而我们编写的 JavaScript 代码一般不会直接使用本地模块，所以 Web 前端程序员触及不到它们。</p><p>解释器、标准库、本地模块等各种组件/工具共同支撑了 JavaScript 代码的运行，它们统称为 JavaScript 运行时。</p><p>在 Node.js 之前，JavaScript 运行时被绑定在浏览器中，作为浏览器的各种模块出现。这意味着，要想运行 JavaScript 代码就必须启动浏览器，JavaScript 逃不出浏览器的手掌心，它的功能受到很大的限制，只能作为网页脚本使用。</p><p>Node.js的诞生<br>谷歌公司在 Chrome 浏览器中集成了一种名为“V8”的 JavaScript 引擎（也即 JavaScript 解释器），它能够非常快速地解析和执行 JavaScript 代码。</p><p>V8 引擎使用 C++ 语言编写，可以独立运行，也可以嵌入到任何其它 C++ 程序中。谷歌公司将 V8 引擎甚至整个 Chrome 浏览器都开源了，任何人都可以免费地将 V8 应用到自己的项目中。</p><p>V8 引擎的强大，以及当年 JavaScript 的火爆，使得一名叫 Ryan Dahl 的程序员动起了“歪心思”，他希望在浏览器之外再为 JavaScript 构建一个运行时，让 JavaScript 能够直接在计算机上运行，这样 JavaScript 就能像 Python、Ruby、PHP 等其它脚本语言一样大展宏图，不必再受限于浏览器，只能做一些小事情。</p><p>Ryan Dahl 和他的团队真的做到了，并且做得很好，他们将这套独立的 JavaScript 运行时命名为 Node.js；为了避免被误认为是 JavaScript 框架，现在也经常简称为 Node。</p><p>Node.js 的组成<br>Node.js 运行时主要由 V8 引擎、标准库和本地模块组成，尤其是本地模块的多少，从底层决定了 Node.js 功能的强弱。</p><ol><li>V8 引擎<br>V8 引擎就是 JavaScript 解释器，它负责解析和执行 JavaScript 代码。<br>V8 引擎借鉴了 Java 虚拟机和 C++ 编译器的众多技术，它将 JavaScript 代码直接编译成原生机器码，并且使用了缓存机制来提高性能，这使得 JavaScript 的运行速度可以媲美二进制程序。</li><li>本地模块<br>Node.js 集成了众多高性能的开源库，它们使用 C/C++ 语言实现，比如：</li></ol><p><img src="/img/JavaScript1/js-2-1.png" alt="overwrote existing file"></p><p>Node.js 直接在计算机上运行 JavaScript 代码，并且要赋予 JavaScript 强大的能力，所以它的本地模块和浏览器中的运行时有很多大区别，甚至说几乎没有什么关联。Node.js 几乎完全抛弃了浏览器，自己从头构建了一套全新的 JavaScript 运行时。<br>3) 标准库<br>本地模块使用 C/C++ 编写，而 Node.js 面向 JavaScript 开发人员，所以必须要封装本地模块的 C/C++ 接口，提供一套优雅的 JavaScript 接口给开发人员，并且要保持接口在不同平台（操作系统）上的一致性。</p><p>这套 JavaScript 接口，就是 Node.js 标准库。标准库是否优雅和强大，决定了 Node.js 的易用性，直接影响 Node.js 的市场表现。</p><p>总结<br>Node.js 是一个 JavaScript 运行时，它让 JavaScript 脱离了浏览器环境，可以直接在计算机上运行，极大地拓展了 JavaScript 用途。我们应该将 JavaScript 和 Python、Java、Ruby 等其它编程语言同等对待，不能再将它视为一种“小玩意”。</p><p><strong>最后我们来汇总一下 JavaScript 和 Node.js 的历史：</strong></p><pre><code>• Netscape 浏览器衍生出了 JavaScript 脚本，赋予网页编程能力；• Chrome 浏览器衍生了 V8 引擎，提高了 JavaScript 性能；• V8 引擎构建了 Node.js，拓展了 JavaScript 的编程能力；• Node.js 衍生了 Libuv 库，给网络开发增加了一款优秀的工具。</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;Node.js 不是一门新的编程语言，也不是一个 JavaScript 框架，它是一套 JavaScript 运行环境，用来支持 JavaScript 代码的执行。用编程术语来讲，Node.js 是一个 JavaScript 运行时（Runtime）。&lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://www.carryone.top/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://www.carryone.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>DAY04  笔记</title>
    <link href="https://www.carryone.top/2022/01/16/DAY04-%E7%AC%94%E8%AE%B0/"/>
    <id>https://www.carryone.top/2022/01/16/DAY04-%E7%AC%94%E8%AE%B0/</id>
    <published>2022-01-16T05:12:00.000Z</published>
    <updated>2022-01-16T05:24:14.640Z</updated>
    
    <content type="html"><![CDATA[<p>1、开发第一个Java程序：HelloWorld<br>    1.1、程序写完之后，一定要Ctrl + S 进行保存<br>        ⚠另外需要注意的是：Java源代码只要修改，必须重新编译。<br>        重新生成.class字节码文件。<br>    <a id="more"></a><br>    1.2、编译阶段<br>        怎么编译？使用什么命令？这个命令怎么用？<br>        需要使用的命令是：javac.exe（存放在C盘的Java目录里）<br>        这个命令需要先测试一下，打开DOS命令窗口，看看javac命令是否可用。</p><pre><code>    测试javac后发现windows找不到文件在哪？        配置path环境变量。        配置path环境变量的步骤：            桌面计算机上右键- -&gt;属性- -&gt;高级系统设置- -&gt;环境变量        让javac.exe能用，配置哪个路径到path中？            找到javac.exe的文件路径复制到path变量里。⚠注意：修改完环境变量后，DOS命令窗口必须关闭重新打开才会起作用。java命令怎么用？    语法格式：        javac java源文件的路径什么是java源文件？    java源文件的名字是以“.java”结尾，该文件中写了java源代码。    ○ java源文件的路径：直接把Java源文件拖入DOS命令窗口就出现java源文件的路径。    ○ 在java源文件上方的路径里输入cmd即可帮助cmd快速定位到java源文件路径。1.3、运行阶段    运行的前提是：class文件（字节码）生成了。没有字节码文件程序是无法运行的。        假设该文件的名字叫做：HelloWorld.class        那么HelloWorld就称为一个类名。    怎么运行？使用哪个命令？        使用JDK的bin目录下的：javac.exe命令来运行。    先在DOS命令窗口中测试javac.exe命令是否可以使用。        Java -version    &quot;java.exe“这个命令怎么用，语法格式是什么？？        格式：Java + 空格 +类名    运行java程序需要哪些步骤？        第一步：先使用cd命令切换到xxx.class文件所在的路径。            或者在文件所在路径输入cmd定位。        第二步：执行java 类名            切记：Java命令后面只要是跟路径，就一定不行，只能是跟类名。</code></pre><p>2、“java HelloWorld”的执行过程及原理</p><pre><code>C:\Users\Carry\Desktop\JAVA&gt;java java1 敲完回车后发生什么？    第一步：会先启动JVM（java虚拟机）    第二步：JVM启动之后，JVM会去启动&quot;类加载器classloader“        类加载器的作用：加载类的，本质上类加载器负责去找“类”对应的“字节码”文件。        假设是“java HelloWorld”，那么类加载器会去硬盘上搜索：HelloWorld.class文件。        假设是“java test”，那么类加载器会去硬盘上搜索：test.class文件。    类加载器如果在硬盘上找不到对应的字节码文件的话会报错，报错什么内容？            错误：找不到或无法加载主类        类加载器如果在硬盘上找到了对应的字节码文件，类加载器会将该字节码文件装载到JVM当中，JVM启动“解释器”将字节码解释为“10101011…”这种的二进制码，操作系统执行二进制码和硬件交互。问题1：默认情况下，类加载器去硬盘哪里找对应的字节码文件？    Java 类目执行后，类加载器会在当前路径下找对应的字节码文件加载。问题2：能不能给类加载器指定一个路径，让类加载器去指定的路径下加载字节码文件？    可以的，但我们要设置一个环境变量，叫做：class.path。问题3：class.path是一个环境变量，是给谁指路的？    是给“类加载器”指路的。    classpath环境变量不属于windows，classpath环境变量隶属于java。    在没有配置环境变量的classpath的时候，默认从但前路径下加载。    如果配置了classpath环境变量之后，只能去指定的路径下加载了。    ⚠非常重要的一个特点：配置了classpath=D:\xxxx目录之后，类加载器只会去xxxx目录找对应的字节码文件。        classpath环境变量不需要配置，到JavaWeb时才需要配置classpath环境变量。</code></pre><p>3、在高版本的JDK当中，有这样一个特性，可以一步到位：<br>    Java x\z\y.java<br>    java后面加源文件的路径。<br>    这个特性是为了简化开发而提出，但实际上底层的实现原理还是和以前一样的，以上命令在执行过程中，还是会先进行编译，然后再运行。<br>    并且以上的运行方式，编译生成的class文件在硬盘上不存在，看不见。</p><p>4、关于第一个Java程序代码的解释说明（注释）：<br>    注释在程序中不起作用，只是对程序进行解释说明。<br>    /* 1、什么是注释，有什么用？<br>        注释是对Java源代码的解释说明<br>        注释可以帮程序员更好地理解程序<br>    2、注释信息只保存在Java源文件当中，Java源文件编译生成的字节码class文件中是没有注释信息的<br>    3、程序员应有良好的写注释习惯。<br>    4、另外这种注释可以注释多行内容。 */</p><pre><code>// 这种是单行注释，只注释两个斜杠后面的内容。</code></pre><p>5、⚠注意：<br>    1、在JAVA中任何有效的代码必须写到“类体”当中，最外层必须是一个类的定义。<br>    2、public表示公开的，class表示定义一个类，Test是一个类名。类名后面必须是一对大括号，这一对大括号被称为“类体”<br>    3、括号必须是成对的。并且建议都要成对编写，这样才不会丢掉。{}、[]、()</p><p>public class Test  //声明/定义一个公开的类，起个名字叫Test<br>    {  //大括号内都是类体。<br>    //整个这一块的代码被称为：main方法（程序的入口，sun公司java语言规定的）<br>    public static void main(String[] args) {<br>    //JVM在执行程序的时候，会主动去找这样一个方法。没有这个规格的方法，程序就无法执行。<br>    //注意：方法必须放在“类体”中，不能放在“类体”外面。<br>    //注意：方法体由一行一行的java语句构成。<br>        System.out.println(“Test”);<br>    //每个语句都要以英文分号结束。<br>    //语句内容要加英文””双引号。数字可以不加双引号。<br>        System.out.println(“test2”);<br>    }<br>}<br>    大括号里有main方法可以编译运行。</p><p>1、一个java源文件可以定义多个class。<br>2、public的类不是必须的。<br>3、在源文件中只要有一个class的定义，那么必然就会生成一个对应的class文件。<br>4、 public的类可以没有，但是如果又public修饰的类名必须和源文件名保持一致。<br>5、public的类有且只能有一个。<br>6、测试想从哪个入口进去执行，就加载哪个类：java 类名。</p><p>常见错误：<br>1、没有定义则编译报错：找不到符号。<br>2、找不带文件<br>3、单词拼写问题<br>4、括号匹配问题<br>5、中英文问题</p><p>程序解析：<br>• 首先编写java源代码程序，扩展名.java<br>• 在命令行模式中，输入javac命令对源代码进行编译，生成字节码文件<br>    • javac 源文件名.java<br>• 编译完成后，如果没有报错信息，输入java命令对class字节码文件进行解释运行,执行时不需要添加.class扩展名<br>    • java HelloWorld</p><p>初学者编程应养成习惯：先将思路用注释方式写出来再进行编程。</p><p>练习题：</p><p><img src="/img/DAY04-1.png" alt="overwrote existing file"></p><p>作业1：</p><p><img src="/img/day04-2.png" alt="upload successful"></p><p>作业2：</p><p><img src="/img/day04-3.png" alt="upload successful"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;1、开发第一个Java程序：HelloWorld&lt;br&gt;    1.1、程序写完之后，一定要Ctrl + S 进行保存&lt;br&gt;        ⚠另外需要注意的是：Java源代码只要修改，必须重新编译。&lt;br&gt;        重新生成.class字节码文件。&lt;br&gt;</summary>
    
    
    
    <category term="动力节点JavaSE" scheme="https://www.carryone.top/categories/%E5%8A%A8%E5%8A%9B%E8%8A%82%E7%82%B9JavaSE/"/>
    
    
    <category term="JavaSE" scheme="https://www.carryone.top/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>DAY03 笔记</title>
    <link href="https://www.carryone.top/2022/01/16/DAY03-%E7%AC%94%E8%AE%B0/"/>
    <id>https://www.carryone.top/2022/01/16/DAY03-%E7%AC%94%E8%AE%B0/</id>
    <published>2022-01-16T04:39:00.000Z</published>
    <updated>2022-01-16T04:46:08.391Z</updated>
    
    <content type="html"><![CDATA[<p>1、Java语言的特性</p><a id="more"></a><pre><code>1.1、简单性    在Java语言当中真正操作内存的是：JVM（Java虚拟机）    所有的java程序都是运行在Java虚拟机当中的。    而Java虚拟机执行过程中再去操作内存。    对于C或者C++来说程序员都是可以直接通过指针操作内存的。    C或者C++更灵活，可以直接程序员操作内存，但是要求程序员技术精湛。    C语言或者C++更有驾驭感。    Java语言屏蔽了指针概念，程序员不能直接操作指针，或者说程序员    不能直接操作内存。这种方式有优点也有缺点：        优点：不容易导致内存泄漏。（简单了。）        缺点：效率问题，包括驾驭感比较差。    飞机航行：        如果是C语言表示程序员是飞机驾驶员。        如果是Java语言表示程序员是飞机上的乘客。    Java语言底层是C++，所以JVM是用C++语言写好的一个虚拟的电脑。    JVM在哪里？告诉大家，安装了JDK之后，JVM就代表安装好了。    内存是什么？        对于计算机来说：最主要的几个部件是什么？            CPU：                中央处理器，相当于人类的大脑，负责发送并执行指令。                是整个计算机的指挥官。                CPU是负责计算的，负责运算的。                10 + 20 = 30                CPU负责将30这个结果计算出来。                但是在计算过程中有三个数据需要临时找个空间存储一下：                    这三个数据分别是：10 20 30            内存：                程序运行过程当中的临时数据存储空间。                断电之后或者关机之后内存中的数据就消失了。            硬盘：                持久化设备，硬盘上的数据不会因断电而丢失。            主板：                相当于人类的躯干，是一个载体：                    CPU、内存条、硬盘等主要的部件都是放在主板上的，                    主板上有很多线，将以上的部件链接起来。            .....1.2、java是堪称完全面向对象的。    面向对象更容易让人理解，人类通常是以对象的方式认知世界的。    采用面向对象的方式可以让复杂问题简单化。1.3、健壮性    主要是因为Java中有一种机制：        自动垃圾回收机制（GC机制）。    java语言是健壮的，相对于C语言来说，C语言没有Java健壮。    Java不容易导致内存的泄漏。    C++或者C语言使用不当时很容易导致内存泄漏。    JVM负责调度GC机制。程序员不需要干涉。    以上讲解中又描述了这几个术语：        JVM（C++语言写的一个虚拟的计算机）、GC（垃圾回收机制）1.4、java完全/完美支持多线程并发。1.5、可移植性/跨平台    java语言只要编写一次，可以做到到处运行。    例如：java程序编写完之后，可以运行在windows操作系统上，    不需要做任何改动可以直接运行在Linux操作系统上，同样也    可以运行到MaC OS上面。    一次编写，到处运行。（平台改变了，程序不需要改。）    JVM这种机制实现了跨平台，那么这种机制优点和缺点分别是什么？        优点：一次编写到处运行，可以跨平台。        缺点：麻烦。对于运行java程序来说必须先有一个JVM。        就像你要想在网页上看视频，你必须先安装一个flash是一样的。    Java语言可以编写病毒吗？        可以，没问题。但是很难让用户中毒。        中毒的一般都是java程序员。所以很少有人编写java的病毒脚本。</code></pre><p>2、JDK、JRE、JVM三者之间的关系？<br>    JDK:Java开发工具箱<br>    JRE:java运行环境<br>    JVM:java虚拟机</p><pre><code>JDK包括JRE，JRE包括JVM。JVM是不能独立安装的。JRE和JDK都是可以独立安装的。有单独的JDK安装包。也有单独的JRE安装包。没有单独的JVM安装包。安装JDK的时候：JRE就自动安装了，同时JRE内部的JVM也就自动安装了。安装JRE的时候：JVM也就自动安装了。问题：    假设你在软件公司开发了一个新的软件，现在要去客户那边给客户把    项目部署一下，把项目跑起来，你需要安装JDK吗？        只需要安装JRE就行了。        JRE体积很小，安装非常便捷快速。问题：    为什么安装JDK的时候会自带一个JRE？        因为java程序员开发完程序之后，要测试这个程序，        让这个程序运行起来，需要JRE。所以JDK安装的时候        内部自带一个JRE。</code></pre><p>3、到目前为止，我们接触过的重点术语，总结一下：</p><pre><code>Java体系的技术被划分为三大块：    JavaSE：标准版    JavaEE：企业版    JavaME：微型版安装JDK之后：    JDK：java开发工具箱    JRE：Java运行环境    JVM：Java虚拟机</code></pre><p>4、对Java的加载与执行的理解（理论比较重要）<br>    java程序从编写到最终运行经历了哪些过程？？？？</p><pre><code>java程序非常重要的两个阶段：    编译阶段    运行阶段注意：java程序员直接编写的java代码（普通文本）是无法执行被JVM识别的。java程序员编写的java代码这种普通文本必须经过一个编译，将这个“普通文本代码”变成“字节码”，JVM能够识别“字节码”。java代码这种普通文本变成字节码的过程，被称为：编译。java代码这种普通文本被称为：java源代码。（你编写的代码是源代码）源代码不能直接执行，需要先进行编译，生成源代码对应的“字节码”JVM可以识别的是字节码。编译阶段和运行阶段可以在不同的操作系统上完成吗？    在windows上编译    编译之后生成了“字节码”    把“字节码”放到linux上运行    完全可以，因为Java是跨平台的。    可以做到一次编写到处运行。java源代码一旦编译之后，源代码可以删除吗？只留下字节码可以执行吗？    完全可以执行，因为源代码不参与程序的执行过程。    参与程序执行过程的是字节码。    但是最好不要删除源代码。因为有可能执行结果不是你需要的，    当执行结果不是你需要的时候，你可以重新打开源代码进行修改，    然后重新编译生成新的字节码，再重新执行。这样会有新的执行效果。放源代码的文件扩展名必须是：xxx.java并且需要注意的是：编译生成的字节码文件扩展名是：xxx.class没有为什么，死记硬背吧！！！！.java文件就是源文件，这个文件中编写源代码。.class文件就是字节码文件，这个文件是编译源代码而得到的。另外需要注意的是：    1个java源文件是可以编译生成多个class文件的。    最终运行的是class文件。问题：字节码文件是二进制文件吗？    字节码文件不是二进制文件。    如果是二进制的话，就不需要JVM了。    因为操作系统可以直接执行二进制。java程序从开发到最终运行经历了什么？    编译期：（可以在windows上）        第一步：在硬盘的某个位置（随意），新建一个xxx.java文件        第二步：使用记事本或者其它文本编辑器例如EditPlus打开xxx.java文件        第三步：在xxx.java文件中编写“符合java语法规则的”源代码。        第四步：保存（一定要将xxx.java文件保存一下）        第五步：使用编译器（javac【JDK安装后自带】）对xxx.java文件进行编译。        第六步：如果xxx.java文件中编写的源代码是符合语法规则的，编译会通过，        如果xxx.java文件中编写的源代码违背了语法规则，那么编译器会报错，编译器        报错之后class文件是不会生成的，只有编译通过了才会生成class字节码文件。        并且一个java源文件是可以生成多个class文件的。（编译实质上是检查语法）    运行期（JRE在起作用）：（可以在windows上，也可以在其他的OS上。）        第七步：如果是在Linux上运行，需要将windows上生成的class文件拷贝过去        不需要拷贝源代码，真正运行的是字节码。（但是源代码也不要删除，有用）        第八步：使用JDK自带的一个命令/工具：java（负责运行的命令/工具）执行字节码        第九步：往下的步骤就全部交给JVM了，就不需要程序员干涉了。        JVM会将字节码文件装载进去，然后JVM对字节码进行解释（解释器负责将字节码        解释为1010101010..等的二进制）        第十步：JVM会将生成的二进制码交给OS操作系统，操作系统会执行二进制码和        硬件进行交互。注意：在以上的过程中，需要使用两个非常重要的命令？    javac 命令，负责编译    java 命令，负责运行小插曲：    xxx.java源文件经过编译之后生成了A.class、B.class、C.class等文件，    那么我们称A是一个类、B是一个类、C是一个类。其中A、B、C是类的名字。    没有为什么，死记硬背，SUN公司的java语法就是这么规定的。    A/B/C是类的名称。A类、B类、C类。源文件中编写的代码叫做：源代码。以上是一个复杂的过程，那么缩减一下，程序员到底要干啥？    新建java文件    打开java文件    写java源代码    保存    javac命令编译    java命令运行    编写、编译、运行</code></pre><p>5、编写java中的第一个java程序：HelloWorld（你好世界：问世）<br>    这个程序不需要大家理解，大家照抄就行，因为目前我也不会讲解这个程序为什么这么写。<br>    主要是为了搭建java的开发环境，测试java的环境是否能用。</p><pre><code>第一步：安装文本编辑器（EditPlus）第二步：安装JDK（先下载JDK）    安装JDK13，直接下一步就行。    JDK13安装的时候内置了一个JRE，独立于JDK之外的JRE并没有生成。    对于java13来说，如果你希望生成一个独立于JDK之外的JRE的话需要执行特殊的命令。    这里先不讲，后期用到的时候再说。    注意的是：        JDK8安装的时候，不仅JDK内置了一个JRE，而且还会在JDK目录之外        独立的生成一个单独的JRE。（以前低版本的时候，JRE实际上是有2个。）        一个是JDK内置的，一个是独立于JDK之外的。    JDK的bin目录下有：        javac.exe 负责编译        java.exe 负责运行第三步：写代码    写一下第一个程序HelloWorld。    这个代码在此强调：        文件名照抄        文件内容代码严格照抄        照抄大小写        照抄任何一个环节        照抄标点符号        不要问为什么。        后面会解释。        括号：            []            ()            &#123;&#125;            都要成对写。第四步：编译第五步：运行</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;1、Java语言的特性&lt;/p&gt;</summary>
    
    
    
    <category term="动力节点JavaSE" scheme="https://www.carryone.top/categories/%E5%8A%A8%E5%8A%9B%E8%8A%82%E7%82%B9JavaSE/"/>
    
    
    <category term="JavaSE" scheme="https://www.carryone.top/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>DAY02 笔记</title>
    <link href="https://www.carryone.top/2022/01/16/DAY02-%E7%AC%94%E8%AE%B0/"/>
    <id>https://www.carryone.top/2022/01/16/DAY02-%E7%AC%94%E8%AE%B0/</id>
    <published>2022-01-16T04:24:00.000Z</published>
    <updated>2022-01-16T04:35:36.661Z</updated>
    
    <content type="html"><![CDATA[<p>1、Java编程语言是Sun Microsystems公司的James Gosling在1990年创建的，于1995年公布于世（一般说Java诞生于1995年）。Java是一门面向对象的编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++难以理解的多继承、指针等概念。因此Java语言具有功能强大和简单易用的两个特征。</p><a id="more"></a><p>2、JAVA语言概述及发展史<br>    JDK（Java开发工具箱，做JAVA开发必须安装的，这是最根本的一个环境。）<br>    JDK不是集成开发环境，他是Java最核心的库。<br>    前往甲骨文官网下载JDK，exe文件</p><pre><code>98年的时候：Java升级到JDK1.2，Java被分为三大块：    J2SE：标准版（基础，要学Java，必须先学习SE。基础语法+基础库）    J2EE：企业版（专门为企业开发软件，为企业提供解决方案。例如：OA办公系统和医疗服务等。）Java诞生十周年改了名字：    JavaSE    JavaEE    JavaME</code></pre><p>3、Java语言的特性：<br>    1、简单性：Java语言底层采用C++语言实现。<br>    在Java语言中真正操作内存的是：JVM（Java虚拟机）所有的java程序中都是运行在Java虚拟机当中的。<br>    对于C或者C++更灵活，可以直接程序员操作内存，但要求程序员技术精湛。<br>    Java语言屏蔽了指针概念，程序员不能直接操作指针，或者说程序员不能直接操作内存。这种方式有优点也有缺点。<br>        优点：不容易导致内存泄漏。<br>        缺点：效率问题，包括驾驶感比较差。</p><pre><code>例如飞机航行：    如果是C语言表示程序员是飞机的驾驶员。    如果是Java表示程序员是飞机上的乘客。因为Java语言的低层是C++，所以JVM是用C++语言写好的一个虚拟的电脑。计算机安装好JDK后，JVM也代表安装完毕。2、面向对象    Java是完全面向对象的。    面向对象更容易让人理解，人类通常是以对象的方式认知世界的。    采用面向对象的方式可以让复杂的问题简单化。3、健壮性    主要是因为Java中有一种机制：        自动垃圾回收机制（GC机制）。    Java不容易导致内存泄漏    JVM负责调度GC机制，程序员不需要干涉。4、可移植性/跨平台    Java语言只要编写一次，可以做到到处运行。    例如：Java程序编写完之后，可以运行在windows操作系统上， 不需要做任何改动可以直接运行在Linux操作系统上，同样也可以运行在Mac os上。    一次编写，到处运行。（平台改变了，程序不需要改变。）    跨平台性：通过Java语言编写的应用程序在不同的系统平台上都可以运行    1.1、JVM这种机制实现了跨平台，那么这种机制优点和缺点是什么？        优点：一次编写到处运行，可以跨平台。        缺点：麻烦。对于运行Java程序来说必须要有一个JVM。就像你想在网页上看视频，你必须先安装一个flash一样。    1.2、Java语言可以编写病毒吗？        可以，没问题。但是很难让用户中毒。        中毒的一般都是java程序员。所以很少有人编写java的病毒脚本。</code></pre><p>4、Java完全/完美支持多线程并发</p><p>5、JDK、JRE、JVM三者之间的关系？<br>    JDK：Java开发工具箱<br>    JRE：Java运行环境<br>    JVM：Java虚拟机</p><pre><code>JDK包括JRE，JRE包括JVMJVM不可以独立安装。JRE和JDK都是可以独立安装的。也有单独的JDK的安装包，没有单独的JVM安装包。安装JDK的时候：JRE就自动安装了，同时JRE内部的JVM也就自动安装了。安装JRE的时候：JVM也就自动安装了。问题1：    假设你在软件公司开发了一个新的软件，现在要去客户那边给客户把项目部署一下，把项目跑起来，你需要安装JDK吗？        答：只需要安装JRE就可以了，JRE体积很小，安装非常便捷快速。问题2：    为什么安装JDK的时候会带一个JRE？        答：因为Java程序员开发完程序之后，要测试这个程序。        让这个程序运行起来，需要JRE。所以安装JDK的时候内部会自带一个JRE。</code></pre><p>6、Java程序的加载与执行的理解<br>    java程序从编写到最终运行经历了两个阶段：<br>1、编译阶段<br>    2、运行阶段</p><pre><code>注意：java程序员直接编写的java代码（普通文本）是无法执行被JVM识别的。java程序员编写到的java代码这种普通文本必须经过一个编译，将这个“普通文本代码”变成“字节码”，JVM能够识别“字节码”。java代码这种普通文本变成字节码的过程，被称为：编译。java代码这种普通文本被称为：java源代码。（你编写的代码是源代码）源代码不能直接执行，需要先进行编译，生成源代码对应的“字节码”JVM可以识别的是字节码。</code></pre><p>问题1：<br>    编译阶段和运行阶段可以在不同的操作系统上完成吗？<br>        答：完全可以，因为java是可跨平台的，可以做到一次编写，到处运行。<br>        在windows上编译<br>        编译之后生成“字节码”<br>        把“字节码”放在linux上运行。</p><p>问题2：<br>    Java源代码一旦编译之后，源代码可以删除吗？只留下字节码可以执行吗？<br>        答：完全可以执行，因为源代码不参与程序的执行过程。<br>        参与程序执行过程是字节码。<br>        但是最好不要删除源代码，因为有可能执行结果不是你需要的。<br>        当执行结果不是你需要的时候，你可以重新打开源代码进行修改，然后重新编译生成新的字节码，在重新执行。这样会有新的执行效果。</p><p>7、需要注意的是：<br>    1、放源代码的文件扩展名必须是：xxx.java<br>    2、编译生成的字节码文件扩展名是：xxx.class</p><pre><code>.java文件就是源文件，这个文件中编写源代码。.class文件就是字节码文件，这个文件是编译源代码而得到的。另外注意的是：    1个java文件是可以编译生成多个class文件的。    最终运行的是class文件。</code></pre><p>问题1：<br>    字节码文件是二进制文件吗？<br>        答：字节码文件不是二进制文件。<br>        如果是二进制的话，就不需要JVM了。<br>        因为操作系统可以直接执行二进制。</p><pre><code>Java程序的加载与执行的理解    java程序从编写到最终运行经历了两个阶段：    1、编译阶段    2、运行阶段注意：java程序员直接编写的java代码（普通文本）是无法执行被JVM识别的。java程序员编写到的java代码这种普通文本必须经过一个编译，将这个“普通文本代码”变成“字节码”，JVM能够识别“字节码”。java代码这种普通文本变成字节码的过程，被称为：编译。java代码这种普通文本被称为：java源代码。（你编写的代码时源代码）源代码不能直接执行，需要先进行编译，生成源代码对应的“字节码”JVM可以识别的是字节码。</code></pre><p>JAVA程序加载与运行：<br>    Java程序员从开发到最终运行经历了什么？<br>        第一步：在硬盘的某个位置，新建一个xxx.java文件<br>        第二步：使用记事本或者其他文本编辑器打开xxx.java文件<br>        第三步：在xxx.java文件中编写“符合java语法规则的”源代码。<br>        第四步：保存（一定要将xxx.java文件保存一下）<br>        第五步：使用编译器（javac【JDK安装后自带】）对xxx.java文件进行编译。<br>        第六步：如果xxx.java文件中编写的源代码是符合语法规则的，编译会通过，如果xxx.java文件中编写的源代码违背了语法规则，那么编译器会报错，编译器报错之后class文件是不会生成的，只有编译通过了之后才会生成class字节码文件。并且一个java源文件是可以生成多个class文件的。（编译实质上是检查语法）</p><pre><code>运行期：（可以在windows上，也可以在其他的os上。）    第七步：如果实在Linux上运行，需要将windows上生成的class文件拷贝过去，不需要拷贝源代码，真正运行的是字节码。（但是源代码也不要删除，有用）    第八步：使用JDK自带的一个命名/工具：java（负责运行的命令/工具）执行字节码    第九步：往下的步骤就全部交给JVM了，就不需要程序员干涉了。        JVM会将字节码文件全部装载进去，然后JVM对字节码进行解释（解释器负责将字节码解释为1010101010..等的二进制）    第十步：JVM会将生成的二进制代码交给os操作系统，操作系统会执行二进制码和硬件进行交互。⚠注意：在以上过程中，需要使用两个重要的命令    1、javac 命令，负责编译    2、java 命令，负责运行⚠当编译不能显示中文时，输入（两种方式）：    1、javac -encoding UTF-8 ***.java    2、记事本打开java源文件，另存为选择ANSI编码⚠当编译时出现：错误: 编码 GBK 的不可映射字符 (0xBA)    输入javac  -encoding utf-8  文件名.java</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;1、Java编程语言是Sun Microsystems公司的James Gosling在1990年创建的，于1995年公布于世（一般说Java诞生于1995年）。Java是一门面向对象的编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++难以理解的多继承、指针等概念。因此Java语言具有功能强大和简单易用的两个特征。&lt;/p&gt;</summary>
    
    
    
    <category term="动力节点JavaSE" scheme="https://www.carryone.top/categories/%E5%8A%A8%E5%8A%9B%E8%8A%82%E7%82%B9JavaSE/"/>
    
    
    <category term="JavaSE" scheme="https://www.carryone.top/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>出租车计价</title>
    <link href="https://www.carryone.top/2022/01/16/%E5%87%BA%E7%A7%9F%E8%BD%A6%E8%AE%A1%E4%BB%B7-1/"/>
    <id>https://www.carryone.top/2022/01/16/%E5%87%BA%E7%A7%9F%E8%BD%A6%E8%AE%A1%E4%BB%B7-1/</id>
    <published>2022-01-15T16:14:00.000Z</published>
    <updated>2022-01-16T04:36:01.260Z</updated>
    
    <content type="html"><![CDATA[<p>根据某城市普通出租车收费标准编写程序进行车费计算。具体标准如下：</p><ul><li>起步里程为3公里，起步费10元；</li><li>超起步里程后10公里内，每公里2元；</li><li>超过10公里以上的部分加收50%的回空补贴费，即每公里3元；</li><li>营运过程中，因路阻及乘客要求临时停车的，按每5分钟2元计收（不足5分钟则不收费）。<a id="more"></a></li></ul><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h2><p>输入在一行中给出输入行驶里程（单位为公里，精确到小数点后1位）与等待时间（整数，单位为分钟），其间以空格分隔。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h2><p>在一行中输出乘客应支付的车费（单位为元），结果四舍五入，保留到元。</p><h2 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h2><blockquote><p>2.6    2</p></blockquote><h2 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h2><blockquote><p>10</p></blockquote><hr><h2 id="JavaScript代码："><a href="#JavaScript代码：" class="headerlink" title="JavaScript代码："></a>JavaScript代码：</h2><pre class="line-numbers language-handlebars" data-language="handlebars"><code class="language-handlebars">const readline =require('readline');const rl=readline.createInterface(&#123;    input:process.stdin,&#125;);let buf=[]rl.on('line',(line)=>&#123;    buf.push(line)&#125;)rl.on('close',()=>&#123;    const arr=buf[0].split(' ');    let money=10;    if(arr[0]>3&amp;&amp;arr[0]&lt;=10)&#123;        money+=(arr[0]-3) *2;    &#125;else if(arr[0]>10)&#123;        money+=7*2;        money+=(arr[0]-10) *3;    &#125;     money+=Math.floor(arr[1]/5)*2;   console.log(Math.round(money));&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;根据某城市普通出租车收费标准编写程序进行车费计算。具体标准如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;起步里程为3公里，起步费10元；&lt;/li&gt;
&lt;li&gt;超起步里程后10公里内，每公里2元；&lt;/li&gt;
&lt;li&gt;超过10公里以上的部分加收50%的回空补贴费，即每公里3元；&lt;/li&gt;
&lt;li&gt;营运过程中，因路阻及乘客要求临时停车的，按每5分钟2元计收（不足5分钟则不收费）。</summary>
    
    
    
    <category term="PTA JavaScript" scheme="https://www.carryone.top/categories/PTA-JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://www.carryone.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>DAY01:DOS命令</title>
    <link href="https://www.carryone.top/2020/08/15/DOS%E5%91%BD%E4%BB%A4/"/>
    <id>https://www.carryone.top/2020/08/15/DOS%E5%91%BD%E4%BB%A4/</id>
    <published>2020-08-15T15:35:00.000Z</published>
    <updated>2022-01-16T04:21:11.045Z</updated>
    
    <content type="html"><![CDATA[<p>1、常用DOS命令<br>    1.1、怎么打开DOS命令窗口？</p><a id="more"></a><blockquote><p><strong>win键+r（组合键）</strong>：可以打开”运行窗口”<br>在窗口文本框输入：<strong>cmd</strong><br>然后回车即可。</p></blockquote><p>1.2、什么是DOS命令呢？<br>在DOS命令窗口中才可以输入并执行DOS命令。<br>在最初的windows计算机中没有图形界面，只有DOS命令窗口。<br>也就是说通过执行DOS命令窗口可以完成文件的创建、保存、删除等一系列操作。</p><p>1.3、在DOS命令窗口中如何复制内容？</p><blockquote><p>选中内容- -&gt;按ctrl+c键复制- -&gt;在粘贴的位置点击鼠标右键<br>即可完成内容的复制粘贴</p></blockquote><p>1.4、DOS命令窗口中如何切换盘符？<br><strong>直接输入盘符即可。</strong><br>C：回车<br>D：回车<br>就🆗了。</p><p>当切换到D盘时，当前的根路径是：D:&gt;<br>当前路径就是当前所在的位置。</p><p>1.5、DOS命令窗口如何切换目录？<br>使用cd命令来完成目录的切换：cd即change directory（改变目录）<br>cd的语法格式为：</p><blockquote><p><strong>cd + 路径</strong></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200816001703606.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjYyOTkyOA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200816001758345.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjYyOTkyOA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;1、常用DOS命令&lt;br&gt;    1.1、怎么打开DOS命令窗口？&lt;/p&gt;</summary>
    
    
    
    <category term="动力节点JavaSE" scheme="https://www.carryone.top/categories/%E5%8A%A8%E5%8A%9B%E8%8A%82%E7%82%B9JavaSE/"/>
    
    
    <category term="JavaSE" scheme="https://www.carryone.top/tags/JavaSE/"/>
    
    <category term="Linux" scheme="https://www.carryone.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>在Hexo添加live2d看板娘</title>
    <link href="https://www.carryone.top/2020/08/10/Hexo%E6%B7%BB%E5%8A%A0live2d%E7%9C%8B%E6%9D%BF%E5%A8%98%E6%A8%A1%E5%9E%8B/"/>
    <id>https://www.carryone.top/2020/08/10/Hexo%E6%B7%BB%E5%8A%A0live2d%E7%9C%8B%E6%9D%BF%E5%A8%98%E6%A8%A1%E5%9E%8B/</id>
    <published>2020-08-10T06:35:00.000Z</published>
    <updated>2022-01-16T04:37:13.398Z</updated>
    
    <content type="html"><![CDATA[<p>haruto这个模型 我爱了</p><a id="more"></a><p><img src="https://img-blog.csdnimg.cn/2020081012063219.PNG" alt="在这里插入图片描述"></p><h2 id="1-首先安装npm包"><a href="#1-首先安装npm包" class="headerlink" title="1.首先安装npm包"></a>1.首先安装npm包</h2><ul><li>配置环境变量 </li><li>打开cmd.exe,输入:</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//查看版本号是否安装成功$ <span class="token function">npm</span> -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-下载hexo"><a href="#2-下载hexo" class="headerlink" title="2.下载hexo"></a>2.下载hexo</h2><ul><li>输入命令</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//下载hexo客户端$ <span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>同样环境变量</li></ul><h2 id="3-在本地新建文件myblog-作为博客资源文件夹"><a href="#3-在本地新建文件myblog-作为博客资源文件夹" class="headerlink" title="3.在本地新建文件myblog(作为博客资源文件夹)"></a>3.在本地新建文件myblog(作为博客资源文件夹)</h2><ul><li>输入命令</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//初始化刚新建的myblog文件夹$ hexo init myblog$ <span class="token builtin class-name">cd</span> blog$ hexo instal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>这时blog就会生成以下文件</li></ul><p><img src="https://img-blog.csdnimg.cn/20200810115944114.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjYyOTkyOA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="4-第一个博客出来了，我们试试运行"><a href="#4-第一个博客出来了，我们试试运行" class="headerlink" title="4.第一个博客出来了，我们试试运行"></a>4.第一个博客出来了，我们试试运行</h2><ul><li>输入命令</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//启动命令<span class="token punctuation">(</span>完整命令:hexo server<span class="token punctuation">)</span>$ hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="5-回到当前窗口myblog路径输入命令："><a href="#5-回到当前窗口myblog路径输入命令：" class="headerlink" title="5.回到当前窗口myblog路径输入命令："></a>5.回到当前窗口myblog路径输入命令：</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//下载live2d包$ <span class="token function">npm</span> <span class="token function">install</span> --save hexo-helper-live2d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>再下载模型</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//下载模型$ <span class="token function">npm</span> <span class="token function">install</span> live2d-widget-model-hibiki<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>#更多模型选择</strong></p><p>live2d-widget-model-chitose<br>live2d-widget-model-epsilon2_1<br>live2d-widget-model-gf<br>live2d-widget-model-haru/01 (use npm install –save live2d-widget-model-haru)<br>live2d-widget-model-haru/02 (use npm install –save live2d-widget-model-haru)<br>live2d-widget-model-haruto<br>live2d-widget-model-hibiki<br>live2d-widget-model-hijiki<br>live2d-widget-model-izumi<br>live2d-widget-model-koharu<br>live2d-widget-model-miku<br>live2d-widget-model-ni-j<br>live2d-widget-model-nico<br>live2d-widget-model-nietzsche<br>live2d-widget-model-nipsilon<br>live2d-widget-model-nito<br>live2d-widget-model-shizuku<br>live2d-widget-model-tororo<br>live2d-widget-model-tsumiki<br>live2d-widget-model-unitychan<br>live2d-widget-model-wanko<br>live2d-widget-model-z16</p><h2 id="6-下载完模型后在根目录的-node-modules-文件夹下找到刚才下载的live2d-widget-model-hibiki模型，将其复制到新建目录-live2d-models-下"><a href="#6-下载完模型后在根目录的-node-modules-文件夹下找到刚才下载的live2d-widget-model-hibiki模型，将其复制到新建目录-live2d-models-下" class="headerlink" title="6.下载完模型后在根目录的 node_modules 文件夹下找到刚才下载的live2d-widget-model-hibiki模型，将其复制到新建目录 live2d_models 下"></a>6.下载完模型后在根目录的 node_modules 文件夹下找到刚才下载的live2d-widget-model-hibiki模型，将其复制到新建目录 live2d_models 下</h2><p><img src="https://img-blog.csdnimg.cn/20200810120349315.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjYyOTkyOA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="7-在根目录-config-yml配置下添加以下参数，唯一改变是参数model-use-是下载模型名称"><a href="#7-在根目录-config-yml配置下添加以下参数，唯一改变是参数model-use-是下载模型名称" class="headerlink" title="7.在根目录_config.yml配置下添加以下参数，唯一改变是参数model.use 是下载模型名称"></a>7.在根目录_config.yml配置下添加以下参数，唯一改变是参数model.use 是下载模型名称</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#参数配置</span>live2d: enable: <span class="token boolean">true</span> scriptFrom: <span class="token builtin class-name">local</span> pluginRootPath: live2dw/ pluginJsPath: lib/ pluginModelPath: assets/ tagMode: <span class="token boolean">false</span> debug: <span class="token boolean">false</span> model:   use: live2d-widget-model-haruto   <span class="token comment">#下载模型参数</span> display:   position: right   width: <span class="token number">150</span>   height: <span class="token number">300</span> mobile:   show: <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="最后再次运行-hexo-s，看效果，右下角萌萌哒看板娘出来了"><a href="#最后再次运行-hexo-s，看效果，右下角萌萌哒看板娘出来了" class="headerlink" title="最后再次运行$hexo s，看效果，右下角萌萌哒看板娘出来了"></a>最后再次运行$hexo s，看效果，右下角萌萌哒看板娘出来了</h2><p><img src="https://img-blog.csdnimg.cn/20200810120617570.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjYyOTkyOA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;haruto这个模型 我爱了&lt;/p&gt;</summary>
    
    
    
    
    <category term="学习日常" scheme="https://www.carryone.top/tags/%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
</feed>
