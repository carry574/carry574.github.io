<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>林凯锐的个人博客</title>
  
  <subtitle>山不过来，我便过去。</subtitle>
  <link href="https://www.carryone.top/atom.xml" rel="self"/>
  
  <link href="https://www.carryone.top/"/>
  <updated>2022-01-23T06:05:02.401Z</updated>
  <id>https://www.carryone.top/</id>
  
  <author>
    <name>林凯锐</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript基础语法学习笔记03</title>
    <link href="https://www.carryone.top/2022/01/23/Untitled-1/"/>
    <id>https://www.carryone.top/2022/01/23/Untitled-1/</id>
    <published>2022-01-23T06:02:00.000Z</published>
    <updated>2022-01-23T06:05:02.401Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="声明和调用函数"><a href="#声明和调用函数" class="headerlink" title="声明和调用函数"></a>声明和调用函数</h3><a id="more"></a><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 通过函数关键字自定义声明函数（命名函数）</span><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span><span class="token parameter">形参<span class="token number">1</span><span class="token punctuation">,</span> 形参<span class="token number">2</span><span class="token punctuation">,</span> 形参<span class="token number">3</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 函数体代码</span><span class="token punctuation">&#125;</span><span class="token comment">// 通过函数表达式方法来声明函数（匿名函数，变量名不是函数名）</span><span class="token keyword">var</span> <span class="token function-variable function">变量名</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 调用函数</span><span class="token function">函数名</span><span class="token punctuation">(</span>实参<span class="token number">1</span><span class="token punctuation">,</span> 实参<span class="token number">2</span><span class="token punctuation">,</span> 实参<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="形参与实参的匹配问题"><a href="#形参与实参的匹配问题" class="headerlink" title="形参与实参的匹配问题"></a>形参与实参的匹配问题</h3><ol><li><p>形参与实参的个数相等，正常输出结果</p></li><li><p>形参个数少于实参，则实参按顺序传递给形参</p></li><li><p>形参个数多余实参，则多余的实参被定义为undefined（形参可以被看成是一个不需要声明的变量，默认值为undefined）</p><p>&lt;!–hexoPostRenderEscape:<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><br> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1 <span class="token operator">+</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">&#125;</span></p></li></ol><p><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span><br><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span><br><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN (数字型加上一个undefined所得为NaN)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>:hexoPostRenderEscape–&gt;</p><h3 id="return的注意事项"><a href="#return的注意事项" class="headerlink" title="return的注意事项"></a>return的注意事项</h3><ol><li>return只能返回一个值。如果return后接了多个值，则返回的结果为最后一个值。</li><li>return具有终止函数运行的作用。函数中return之后的代码都不会被执行。</li><li>函数都有返回值。有return时返回return后的值；不含有return则返回undefined。</li></ol><h3 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h3><p>JS中的arguments是当前函数的一个内置对象，其存储了传递的所有实参。</p><p>arguments的展示形式是一个伪数组，其具有length属性、能按索引方式储存数据，但不具有push、pop等数组方法。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//arguments的使用</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span class="token punctuation">&#125;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>作用域的使用能提高程序逻辑的局部性、增强程序可靠性并减少名字冲突。</p><p>JS中包含两种作用域类型（es6之前），作用域决定了变量的可访问性。</p><ul><li>局部作用域与局部变量</li></ul><p>​    函数内部声明的变量，会成为函数的局部变量，其作用域是局部的，只能从函数内部访问，从函数外部是不可访问的。</p><p>​    局部变量在代码块被执行时会被初始化，代码块运行结束后局部变量也会被销毁，更节省内存空间。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 此处代码不可使用 age 变量</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>    <span class="token comment">// 此处代码可以使用 age 变量</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>全局作用域与全局变量</li></ul><p>​    函数之外声明的变量，会成为全局变量，其作用域为全局的，网页中的所有脚本和函数都可以访问。</p><p>​    全局变量在声明后直到浏览器关闭时才会被销毁，期间一直占据着内存资源。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token comment">// 此处代码可以使用 age 变量</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 此处代码也可使用 age 变量</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h2><p>JS代码是由浏览器中的JS解析器来执行的，分为两步：预解析和代码执行。</p><p>预解析又分为</p><ul><li>变量预解析</li></ul><p>​    把所有的变量声明提升到当前作用域的最前面，不提升赋值操作</p><ul><li>函数预解析</li></ul><p>​    把所有函数声明提升到当前作用域的最前面，不调用函数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 例1 </span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//程序相当于执行了以下代码</span><span class="token keyword">var</span> num<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> num<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 结果为undefined</span>    num <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 例2</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> b <span class="token operator">=</span> c <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token comment">// 相当于var a = 9; b = 9; c = 9; b 和 c是直接赋值，没有声明变量，所以可以看作是全局变量。</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 等同于以下代码</span><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a<span class="token punctuation">;</span>    a <span class="token operator">=</span> b <span class="token operator">=</span> c <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9</span><span class="token punctuation">&#125;</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错，a为局部变量，未被声明</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>JS中的对象是一组无序的相关属性和方法的集合</p><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><ul><li><p>利用字面量创建对象 {}</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 创建了一个空对象</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'Kobe'</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">,</span>  sex<span class="token operator">:</span> <span class="token string">'male'</span><span class="token punctuation">,</span>  <span class="token function-variable function">practice</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'practicing'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 对象中的属性和方法采用键值对的形式 属性名（键）: 属性值（值）</span><span class="token comment">// 调用属性的两种方法：1、对象名.属性名；2、对象名['属性名']</span><span class="token comment">// 调用方法的方法： 对象名.方法名()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>利用 new Object 创建对象</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建了一个空对象</span>obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Kobe'</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">'male'</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function-variable function">practice</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'practicing'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>利用构造函数创建对象</p><p>&lt;!–hexoPostRenderEscape:<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 构造函数的语法</span><br><span class="token keyword">function</span> <span class="token function">构造函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><br>  <span class="token keyword">this</span><span class="token punctuation">.</span>属性 <span class="token operator">=</span> 值；<br>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">方法</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><br><span class="token punctuation">&#125;</span><br><span class="token keyword">new</span> <span class="token function">构造函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></p></li></ul><p><span class="token comment">// 举例</span><br><span class="token keyword">function</span> <span class="token function">Player</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 构造函数名首字母要大写</span><br>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><br>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><br>    <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span><br>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">practice</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><br>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">‘practicing’</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>    <span class="token punctuation">&#125;</span><br><span class="token punctuation">&#125;</span><br><span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token string">‘Kobe’</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token string">‘male’</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>:hexoPostRenderEscape–&gt;</p><p>  new关键字的执行过程</p><ol><li>new 构造函数在内存中创建了一个空的对象</li><li>this 会指向创建的空对象</li><li>执行构造函数中的代码，给空对象添加属性和方法</li><li>返回这个对象</li></ol><h3 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h3><p>for…in 语句用于对数组或者对象的属性进行循环操作</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'Kobe'</span><span class="token punctuation">,</span>    age<span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">,</span>    sex<span class="token operator">:</span> <span class="token string">'male'</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 得到各属性名</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 得到对象的各属性值（需要注意写法）</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><p>JS自带的一些对象，提供了一些基本且常用的功能给开发者使用。</p><h3 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h3><p>Math 对象可以用来执行数学任务。 Math 不是构造函数。 Math 的所有属性/方法都可以通过使用 Math 作为对象来调用，而无需创建它：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">;</span>            <span class="token comment">// 返回 PI</span><span class="token keyword">var</span> y <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 返回 16 的平方更</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 向下取整</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 向上取整</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 四舍五入</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回一个随机小数</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> min<span class="token punctuation">;</span> <span class="token comment">// 得到一个大于等于 min 且小于等于 max 的数 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h3><p>Date对象用于处理日期和时间，通过 new Date() 来创建。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建了一个Date对象，无参数时是获取当前的系统时间</span><span class="token keyword">var</span> d1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">'2021/11/23'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 带参数的实例化</span><span class="token comment">// 获取时间戳(总毫秒数)</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 方法1</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 方法2</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 方法3</span><span class="token comment">// 利用时间戳来创建倒计时效果</span><span class="token keyword">function</span> <span class="token function">countDown</span><span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> nowTime <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 当前时间的总毫秒数</span>    <span class="token keyword">var</span> inputTime <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输入时间的总毫秒数</span>    <span class="token keyword">var</span> times <span class="token operator">=</span> <span class="token punctuation">(</span>inputTime <span class="token operator">-</span> nowTime<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">;</span> <span class="token comment">// 剩余时间的总秒数</span>    <span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>times <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 天</span>    d <span class="token operator">=</span> d <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> d <span class="token operator">:</span> d<span class="token punctuation">;</span>    <span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>times <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">%</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 时</span>    h <span class="token operator">=</span> h <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> h <span class="token operator">:</span> h<span class="token punctuation">;</span>    <span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>times <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">%</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 分</span>    m <span class="token operator">=</span> m <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> m <span class="token operator">:</span> m<span class="token punctuation">;</span>    <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>times <span class="token operator">%</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//秒</span>    s <span class="token operator">=</span> s <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> s <span class="token operator">:</span> s<span class="token punctuation">;</span>    <span class="token keyword">return</span> d <span class="token operator">+</span> <span class="token string">'天'</span> <span class="token operator">+</span> h <span class="token operator">+</span> <span class="token string">'时'</span> <span class="token operator">+</span> m <span class="token operator">+</span> <span class="token string">'分'</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">'秒'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组对象"><a href="#数组对象" class="headerlink" title="数组对象"></a>数组对象</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 使用new Array()来创建数组</span><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建了一个空数组</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建了一个长度为2的空数组</span><span class="token keyword">var</span> arr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等价于var arr3 = [2, 3]; 创建方式与使用字面量创建相同</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="检测是否为数组"><a href="#检测是否为数组" class="headerlink" title="检测是否为数组"></a>检测是否为数组</h4><ul><li><p>instanceof 运算符</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Array.isArray() 方法</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="增删数组元素"><a href="#增删数组元素" class="headerlink" title="增删数组元素"></a>增删数组元素</h4><ul><li>push(参数…)，在数组末尾增加一个或多个元素，返回值为新数组的长度</li><li>pop()，删除数组最后的一个元素，并将该元素作为返回值</li><li>unshift(参数…)，在数组开头增加一个或多个元素，返回值为新数组的长度</li><li>shift()，删除数组的第一个元素，并将该元素作为返回值</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// [1, 2, 3, 4]</span>arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [0, 1, 2, 3, 4]</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// [0, 1, 2, 3]</span>arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [1, 2, 3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h4><ul><li><p>reverse()，颠倒数组中的元素顺序</p></li><li><p>sort()，对数组元素进行排序（冒泡排序）</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 13, 4, 7, 77]这样写时，元素按照转换为的字符串的各个字符的Unicode位点进行排序</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// function用来指定按某种顺序进行排列</span>  <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span> <span class="token comment">// 升序排列，b - a 则改为降序排列</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// [1, 4, 7, 13, 77]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="查找数组索引"><a href="#查找数组索引" class="headerlink" title="查找数组索引"></a>查找数组索引</h4><ul><li>indexOf()，查找给定元素在数组中的第一个索引并返回索引值，否则返回-1</li><li>lastIndexOf()，查找给定元素在数组中的最后一个索引并返回索引值，否则返回-1</li></ul><h4 id="数组转换成字符串"><a href="#数组转换成字符串" class="headerlink" title="数组转换成字符串"></a>数组转换成字符串</h4><ul><li><p>toString()</p></li><li><p>join(‘分隔符’)</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1,2,3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1,2,3 默认分隔符是 ,</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1-2-3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串对象"><a href="#字符串对象" class="headerlink" title="字符串对象"></a>字符串对象</h3><h4 id="根据字符返回位置"><a href="#根据字符返回位置" class="headerlink" title="根据字符返回位置"></a>根据字符返回位置</h4><ul><li>indexOf(‘要查找的字符’, 开始的位置)，从指定位置开始（未指定则从头开始）返回指定字符在字符串中的位置，不存在该字符则返回 -1</li><li>lastIndexOf()，与上述类似，只是从后往前查找</li></ul><h4 id="根据位置返回字符"><a href="#根据位置返回字符" class="headerlink" title="根据位置返回字符"></a>根据位置返回字符</h4><ul><li>charAt(index)，返回指定位置的字符</li><li>charCodeAt(index)，返回指定位置字符的ASCII码</li><li>str[index]，获取指定位置处的字符</li></ul><h4 id="截取拼接字符串"><a href="#截取拼接字符串" class="headerlink" title="截取拼接字符串"></a>截取拼接字符串</h4><ul><li>concat(str1, str2, str3…)，用于连接字符串，等同于 + </li><li>substr(start, length)，从start位置开始截取长度为length的字符串</li><li>slice(start, end)，从start开始截取到end位置的字符串，不包括end</li><li>substring(start, end)，与slice基本相同，但不接受负值</li></ul><h4 id="替换字符"><a href="#替换字符" class="headerlink" title="替换字符"></a>替换字符</h4><p>replace(‘被替换的字符’, ‘替换成的字符’)   只会替换遇到的第一个字符</p><h4 id="字符串转换为数组"><a href="#字符串转换为数组" class="headerlink" title="字符串转换为数组"></a>字符串转换为数组</h4><p>split(‘分隔符’)</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'1, 2, 3'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1,2,3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="简单数据类型和复杂数据类型"><a href="#简单数据类型和复杂数据类型" class="headerlink" title="简单数据类型和复杂数据类型"></a>简单数据类型和复杂数据类型</h2><h3 id="简单数据类型"><a href="#简单数据类型" class="headerlink" title="简单数据类型"></a>简单数据类型</h3><p>在存储变量时存储的是值本事，所以又可以叫做值类型或基本数据类型。</p><p>string, number, boolean, undefined, null(返回一个空对象)。</p><p>当简单数据类型变量作为参数传递给函数的形参时，实际上是把变量在栈空间里的值复制了一份给形参，于是在函数内对形参做任何修改都不会影响到外部的变量。</p><h3 id="复杂数据类型"><a href="#复杂数据类型" class="headerlink" title="复杂数据类型"></a>复杂数据类型</h3><p>在存储变量时存储的是地址（引用），又可以叫做引用类型。</p><p>包括通过 new 关键字创建的对象（自定义对象、内置对象），如Object、Array、Date等。</p><p>复杂数据类型变量传参时，实际上是把变量在栈空间里保存的堆地址复制给了形参，形参和实参保存的是同一个堆地址，所以操作的是同一个对象。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h2&gt;&lt;h3 id=&quot;声明和调用函数&quot;&gt;&lt;a href=&quot;#声明和调用函数&quot; class=&quot;headerlink&quot; title=&quot;声明和调用函数&quot;&gt;&lt;/a&gt;声明和调用函数&lt;/h3&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://www.carryone.top/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://www.carryone.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript基础语法学习笔记02</title>
    <link href="https://www.carryone.top/2022/01/23/Untitled1/"/>
    <id>https://www.carryone.top/2022/01/23/Untitled1/</id>
    <published>2022-01-23T05:54:00.000Z</published>
    <updated>2022-01-23T05:57:49.250Z</updated>
    
    <content type="html"><![CDATA[<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><a id="more"></a><ul><li><p>+</p></li><li><p>-</p></li><li><p>*</p></li><li><p>/</p></li><li><p>% 取余</p></li></ul><p>在进行算数运算时，浮点数的精确度不如整数，会有精度缺失问题，所以无法直接判断两个浮点数是否相等</p><h3 id="自增-减运算符"><a href="#自增-减运算符" class="headerlink" title="自增/减运算符"></a>自增/减运算符</h3><h4 id="前置自增"><a href="#前置自增" class="headerlink" title="前置自增"></a>前置自增</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">++</span>num<span class="token punctuation">;</span> <span class="token comment">//效果上等同于 num = num + 1;</span><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">++</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出值21，先自增，后返回值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="后置自增"><a href="#后置自增" class="headerlink" title="后置自增"></a>后置自增</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>num<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//效果上也等同于 ++num 和 num = num + 1;</span><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出值20，先返回原值，后自增</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>递减运算的规则类似，可参考递增运算</p><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><ul><li>&lt;</li><li>&gt;</li><li>&lt;=</li><li>&gt;=</li><li>==  判断值相等即可</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true，默认会转换数据类型，将字符串转换成数字型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>!=</li><li>===  要求值和类型完全一致</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">===</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>!==</li></ul><p>比较运算后会返回一个布尔值</p><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><ul><li>&amp;&amp; 与</li><li>|| 或</li><li>! 非</li></ul><h4 id="短路运算（逻辑中断）"><a href="#短路运算（逻辑中断）" class="headerlink" title="短路运算（逻辑中断）"></a>短路运算（逻辑中断）</h4><p>多个表达式或值进行逻辑运算时，当左边的表达式可以确定结果时，便不再运算右边的表达式</p><ul><li>表达式1 &amp;&amp; 表达式2</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//如果表达式1为真，返回表达式2</span><span class="token comment">//如果表达式1为假，返回表达式1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span> <span class="token operator">&amp;&amp;</span> <span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 456</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>表达式1 || 表达式2</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//如果表达式1为真，返回表达式1</span><span class="token comment">//如果表达式1为假，返回表达式2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span> <span class="token operator">||</span> <span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">||</span> <span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意，短路运算会影响程序的运行结果</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span> <span class="token operator">||</span> num<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0 程序没有进行num++操作便以中断</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><ul><li>=</li><li>+=</li><li>-=</li><li>*=</li><li>/=</li><li>%=</li></ul><h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><p>优先级由高到低排列</p><ol><li>()</li><li>一元运算符：++、–、! （! 的优先级很高）</li><li>算数运算符：先 * / %，后 + - </li><li>关系运算符：&gt;  &lt;  &gt;=  &lt;=</li><li>相等运算符：==  !=  ===  !==</li><li>逻辑运算符：先&amp;&amp; 后||</li><li>赋值运算符：=</li><li>,</li></ol><h2 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h2><p>在使用switch时需要注意以下几点</p><ol><li>switch() 中的表达式常使用变量</li><li>表达式的值和case的值只有在全等（===）时才匹配，即值与数据类型都一致</li><li>每个case中需要加上break，如果没有break则在执行完当前case后会继续执行下一个case</li></ol><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><ul><li>for</li><li>while</li><li>do while</li></ul><h3 id="continue关键字"><a href="#continue关键字" class="headerlink" title="continue关键字"></a>continue关键字</h3><p>用于立即跳出本次循环，继续下一次循环（本次循环中continue之后的代码就不会再被执行）</p><h3 id="break关键字"><a href="#break关键字" class="headerlink" title="break关键字"></a>break关键字</h3><p>用于立即跳出整个循环体</p><p>需要注意的是，当存在多重循环时，break只能跳出最内层的循环体</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h3><ol><li><p>使用new关键字来创建</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个空的数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用数组字面量来创建</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 空数组</span><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 初始化数组，可存放各种类型的数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="获取数组元素"><a href="#获取数组元素" class="headerlink" title="获取数组元素"></a>获取数组元素</h3><p>通过索引（数组下标）来获取元素，下表从0开始</p><h3 id="数组长度"><a href="#数组长度" class="headerlink" title="数组长度"></a>数组长度</h3><p>可以通过数组的length属性来获取数组的长度</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>length属性是可读写的</p><h3 id="数组中新增元素"><a href="#数组中新增元素" class="headerlink" title="数组中新增元素"></a>数组中新增元素</h3><ul><li><p>通过修改length实现</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 修改数组的length属性，在数组后新增了两个元素</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>通过索引追加数组元素</p><p>&lt;!–hexoPostRenderEscape:<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><br>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'black'</span><span class="token punctuation">;</span> <span class="token comment">// arr数组后新增了一个元素'black'</span></p></li></ul><p><span class="token comment">//需要注意的是，不可直接给数组名赋值</span><br>arr <span class="token operator">=</span> <span class="token string">‘数组’</span><span class="token punctuation">;</span><br>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 操作台的输出结果不是arr的内容，而是’数组’</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>:hexoPostRenderEscape–&gt;</p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>基本思想：比较相邻的两个元素的大小，如果这两个元素顺序错误则交换两个元素的位置，重复这样的操作直到所有元素位置正确即完成排序。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token comment">//将元素按从小到大顺序排列</span>    <span class="token keyword">var</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// 外层循环每执行一次便有一个元素完成排序，内层循环就可以少执行一次</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 相邻元素两两对比</span>                <span class="token keyword">var</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 元素交换</span>                arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;运算符&quot;&gt;&lt;a href=&quot;#运算符&quot; class=&quot;headerlink&quot; title=&quot;运算符&quot;&gt;&lt;/a&gt;运算符&lt;/h2&gt;&lt;h3 id=&quot;算数运算符&quot;&gt;&lt;a href=&quot;#算数运算符&quot; class=&quot;headerlink&quot; title=&quot;算数运算符&quot;&gt;&lt;/a&gt;算数运算符&lt;/h3&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://www.carryone.top/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://www.carryone.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>前端知识图谱</title>
    <link href="https://www.carryone.top/2022/01/23/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/"/>
    <id>https://www.carryone.top/2022/01/23/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/</id>
    <published>2022-01-23T05:52:00.000Z</published>
    <updated>2022-01-23T05:53:25.508Z</updated>
    
    <content type="html"><![CDATA[<h2 id="网络知识"><a href="#网络知识" class="headerlink" title="网络知识"></a>网络知识</h2><h3 id="1-网络工作原理"><a href="#1-网络工作原理" class="headerlink" title="1. 网络工作原理"></a>1. 网络工作原理</h3><h3 id="计算机网络原理：https-www-bilibili-com-video-BV1xJ41137Q3"><a href="#计算机网络原理：https-www-bilibili-com-video-BV1xJ41137Q3" class="headerlink" title="计算机网络原理：https://www.bilibili.com/video/BV1xJ41137Q3"></a>计算机网络原理：<a href="https://www.bilibili.com/video/BV1xJ41137Q3">https://www.bilibili.com/video/BV1xJ41137Q3</a></h3><a id="more"></a><h3 id="2-什么是HTTP"><a href="#2-什么是HTTP" class="headerlink" title="2. 什么是HTTP"></a>2. 什么是HTTP</h3><h3 id="HTTP协议详解：https-www-bilibili-com-video-BV1js411g7Fw"><a href="#HTTP协议详解：https-www-bilibili-com-video-BV1js411g7Fw" class="headerlink" title="HTTP协议详解：https://www.bilibili.com/video/BV1js411g7Fw"></a>HTTP协议详解：<a href="https://www.bilibili.com/video/BV1js411g7Fw">https://www.bilibili.com/video/BV1js411g7Fw</a></h3><h3 id="3-浏览器及工作方式"><a href="#3-浏览器及工作方式" class="headerlink" title="3. 浏览器及工作方式"></a>3. 浏览器及工作方式</h3><h3 id="浏览器是如何运作的？：https-www-bilibili-com-video-BV1x54y1B7RE"><a href="#浏览器是如何运作的？：https-www-bilibili-com-video-BV1x54y1B7RE" class="headerlink" title="浏览器是如何运作的？：https://www.bilibili.com/video/BV1x54y1B7RE"></a>浏览器是如何运作的？：<a href="https://www.bilibili.com/video/BV1x54y1B7RE">https://www.bilibili.com/video/BV1x54y1B7RE</a></h3><h3 id="4-DNS-及其工作原理"><a href="#4-DNS-及其工作原理" class="headerlink" title="4. DNS 及其工作原理"></a>4. DNS 及其工作原理</h3><h3 id="DNS基本工作原理：https-www-bilibili-com-video-BV1GW411j7Ts"><a href="#DNS基本工作原理：https-www-bilibili-com-video-BV1GW411j7Ts" class="headerlink" title="DNS基本工作原理：https://www.bilibili.com/video/BV1GW411j7Ts"></a>DNS基本工作原理：<a href="https://www.bilibili.com/video/BV1GW411j7Ts">https://www.bilibili.com/video/BV1GW411j7Ts</a></h3><h3 id="直观DNS科普：https-www-bilibili-com-video-BV1F54y1R7BC"><a href="#直观DNS科普：https-www-bilibili-com-video-BV1F54y1R7BC" class="headerlink" title="直观DNS科普：https://www.bilibili.com/video/BV1F54y1R7BC"></a>直观DNS科普：<a href="https://www.bilibili.com/video/BV1F54y1R7BC">https://www.bilibili.com/video/BV1F54y1R7BC</a></h3><h3 id="5-域名相关知识"><a href="#5-域名相关知识" class="headerlink" title="5. 域名相关知识"></a>5. 域名相关知识</h3><h3 id="域名解析完整讲解：https-www-bilibili-com-video-BV1zA411x7Pj"><a href="#域名解析完整讲解：https-www-bilibili-com-video-BV1zA411x7Pj" class="headerlink" title="域名解析完整讲解：https://www.bilibili.com/video/BV1zA411x7Pj"></a>域名解析完整讲解：<a href="https://www.bilibili.com/video/BV1zA411x7Pj">https://www.bilibili.com/video/BV1zA411x7Pj</a></h3><h3 id="6-云服务相关知识"><a href="#6-云服务相关知识" class="headerlink" title="6. 云服务相关知识"></a>6. 云服务相关知识</h3><h3 id="揭秘阿里云服务器：https-www-bilibili-com-video-BV1Rt411u7k4"><a href="#揭秘阿里云服务器：https-www-bilibili-com-video-BV1Rt411u7k4" class="headerlink" title="揭秘阿里云服务器：https://www.bilibili.com/video/BV1Rt411u7k4"></a>揭秘阿里云服务器：<a href="https://www.bilibili.com/video/BV1Rt411u7k4">https://www.bilibili.com/video/BV1Rt411u7k4</a></h3><h2 id="超文本标记语言"><a href="#超文本标记语言" class="headerlink" title="超文本标记语言"></a>超文本标记语言</h2><p>（HTML）</p><h3 id="1-HTML基础知识学习"><a href="#1-HTML基础知识学习" class="headerlink" title="1. HTML基础知识学习"></a>1. HTML基础知识学习</h3><h3 id="HTML全套基础教程：https-www-bilibili-com-video-BV11t411K74Q"><a href="#HTML全套基础教程：https-www-bilibili-com-video-BV11t411K74Q" class="headerlink" title="HTML全套基础教程：https://www.bilibili.com/video/BV11t411K74Q"></a>HTML全套基础教程：<a href="https://www.bilibili.com/video/BV11t411K74Q">https://www.bilibili.com/video/BV11t411K74Q</a></h3><h3 id="2-HTML-编写规则-和语义化写法"><a href="#2-HTML-编写规则-和语义化写法" class="headerlink" title="2. HTML 编写规则 和语义化写法"></a>2. HTML 编写规则 和语义化写法</h3><h3 id="HTML-速成：https-www-bilibili-com-video-BV1vs411M7aT"><a href="#HTML-速成：https-www-bilibili-com-video-BV1vs411M7aT" class="headerlink" title="HTML 速成：https://www.bilibili.com/video/BV1vs411M7aT"></a>HTML 速成：<a href="https://www.bilibili.com/video/BV1vs411M7aT">https://www.bilibili.com/video/BV1vs411M7aT</a></h3><h3 id="3-表单和验证"><a href="#3-表单和验证" class="headerlink" title="3. 表单和验证"></a>3. 表单和验证</h3><h3 id="html5表单验证：https-www-bilibili-com-video-BV16K4y1Z7Gb"><a href="#html5表单验证：https-www-bilibili-com-video-BV16K4y1Z7Gb" class="headerlink" title="html5表单验证：https://www.bilibili.com/video/BV16K4y1Z7Gb"></a>html5表单验证：<a href="https://www.bilibili.com/video/BV16K4y1Z7Gb">https://www.bilibili.com/video/BV16K4y1Z7Gb</a></h3><h3 id="4-公约和最佳实践方法"><a href="#4-公约和最佳实践方法" class="headerlink" title="4. 公约和最佳实践方法"></a>4. 公约和最佳实践方法</h3><h3 id="前端代码规范秘籍：https-www-bilibili-com-video-BV19P4y147Jz"><a href="#前端代码规范秘籍：https-www-bilibili-com-video-BV19P4y147Jz" class="headerlink" title="前端代码规范秘籍：https://www.bilibili.com/video/BV19P4y147Jz"></a>前端代码规范秘籍：<a href="https://www.bilibili.com/video/BV19P4y147Jz">https://www.bilibili.com/video/BV19P4y147Jz</a></h3><h3 id="5-SEO-基础知识"><a href="#5-SEO-基础知识" class="headerlink" title="5. SEO 基础知识"></a>5. SEO 基础知识</h3><h3 id="SEO优化学习教程：https-www-bilibili-com-video-BV1fE411J7ya"><a href="#SEO优化学习教程：https-www-bilibili-com-video-BV1fE411J7ya" class="headerlink" title="SEO优化学习教程：https://www.bilibili.com/video/BV1fE411J7ya"></a>SEO优化学习教程：<a href="https://www.bilibili.com/video/BV1fE411J7ya">https://www.bilibili.com/video/BV1fE411J7ya</a></h3><h2 id="层叠样式表"><a href="#层叠样式表" class="headerlink" title="层叠样式表"></a>层叠样式表</h2><p>（CSS)</p><h3 id="1-CSS-基础知识学习"><a href="#1-CSS-基础知识学习" class="headerlink" title="1. CSS 基础知识学习"></a>1. CSS 基础知识学习</h3><h3 id="CSS3基础教程：https-www-bilibili-com-video-BV1Bx411u7cS"><a href="#CSS3基础教程：https-www-bilibili-com-video-BV1Bx411u7cS" class="headerlink" title="CSS3基础教程：https://www.bilibili.com/video/BV1Bx411u7cS"></a>CSS3基础教程：<a href="https://www.bilibili.com/video/BV1Bx411u7cS">https://www.bilibili.com/video/BV1Bx411u7cS</a></h3><h3 id="CSS3全套教程：https-www-bilibili-com-video-BV1et411q74F"><a href="#CSS3全套教程：https-www-bilibili-com-video-BV1et411q74F" class="headerlink" title="CSS3全套教程：https://www.bilibili.com/video/BV1et411q74F"></a>CSS3全套教程：<a href="https://www.bilibili.com/video/BV1et411q74F">https://www.bilibili.com/video/BV1et411q74F</a></h3><h3 id="2-页面切图和布局实现"><a href="#2-页面切图和布局实现" class="headerlink" title="2. 页面切图和布局实现"></a>2. 页面切图和布局实现</h3><ul><li>浮动布局</li><li>浮动布局：<a href="https://www.bilibili.com/video/BV1Zs411j7Z3">https://www.bilibili.com/video/BV1Zs411j7Z3</a></li><li>定位布局</li><li>CSS定位布局：<a href="https://www.bilibili.com/video/BV1ni4y1g7tc">https://www.bilibili.com/video/BV1ni4y1g7tc</a></li><li>Display</li><li>display&amp;visibility：<a href="https://www.bilibili.com/video/BV1HJ411M7CM">https://www.bilibili.com/video/BV1HJ411M7CM</a></li><li>盒子模型</li><li>CSS盒子模型与定位：<a href="https://www.bilibili.com/video/BV1P7411G7BW">https://www.bilibili.com/video/BV1P7411G7BW</a></li><li>Grid 布局</li><li>如何用grid：<a href="https://www.bilibili.com/video/BV14C4y1W7oA">https://www.bilibili.com/video/BV14C4y1W7oA</a></li><li>Flex 布局</li><li>Flex伸缩布局：<a href="https://www.bilibili.com/video/BV1BJ41197XE">https://www.bilibili.com/video/BV1BJ41197XE</a><h3 id="3-页面响应式布局设计"><a href="#3-页面响应式布局设计" class="headerlink" title="3. 页面响应式布局设计"></a>3. 页面响应式布局设计</h3><h3 id="六个案例学会响应式布局：https-www-bilibili-com-video-BV1ov411k7sm"><a href="#六个案例学会响应式布局：https-www-bilibili-com-video-BV1ov411k7sm" class="headerlink" title="六个案例学会响应式布局：https://www.bilibili.com/video/BV1ov411k7sm"></a>六个案例学会响应式布局：<a href="https://www.bilibili.com/video/BV1ov411k7sm">https://www.bilibili.com/video/BV1ov411k7sm</a></h3><h2 id="浏览器脚本语言"><a href="#浏览器脚本语言" class="headerlink" title="浏览器脚本语言"></a>浏览器脚本语言</h2>(JavaScript)<h3 id="1-JavaScript基础语法和知识"><a href="#1-JavaScript基础语法和知识" class="headerlink" title="1. JavaScript基础语法和知识"></a>1. JavaScript基础语法和知识</h3><h3 id="JavaScript基础语法：https-www-bilibili-com-video-BV1Sy4y1C7ha"><a href="#JavaScript基础语法：https-www-bilibili-com-video-BV1Sy4y1C7ha" class="headerlink" title="JavaScript基础语法：https://www.bilibili.com/video/BV1Sy4y1C7ha"></a>JavaScript基础语法：<a href="https://www.bilibili.com/video/BV1Sy4y1C7ha">https://www.bilibili.com/video/BV1Sy4y1C7ha</a></h3><h3 id="2-使用JavaScript-操作-DOM元素"><a href="#2-使用JavaScript-操作-DOM元素" class="headerlink" title="2. 使用JavaScript 操作 DOM元素"></a>2. 使用JavaScript 操作 DOM元素</h3><h3 id="JS必会的DOM-BOM操作：https-www-bilibili-com-video-BV1k4411w7sV"><a href="#JS必会的DOM-BOM操作：https-www-bilibili-com-video-BV1k4411w7sV" class="headerlink" title="JS必会的DOM BOM操作：https://www.bilibili.com/video/BV1k4411w7sV"></a>JS必会的DOM BOM操作：<a href="https://www.bilibili.com/video/BV1k4411w7sV">https://www.bilibili.com/video/BV1k4411w7sV</a></h3><h3 id="3-Ajax-异步请求相关知识学习"><a href="#3-Ajax-异步请求相关知识学习" class="headerlink" title="3. Ajax 异步请求相关知识学习"></a>3. Ajax 异步请求相关知识学习</h3><h3 id="Ajax入门到精通：https-www-bilibili-com-video-BV1WC4y1b78y"><a href="#Ajax入门到精通：https-www-bilibili-com-video-BV1WC4y1b78y" class="headerlink" title="Ajax入门到精通：https://www.bilibili.com/video/BV1WC4y1b78y"></a>Ajax入门到精通：<a href="https://www.bilibili.com/video/BV1WC4y1b78y">https://www.bilibili.com/video/BV1WC4y1b78y</a></h3><h3 id="4-ES6-以上版本-的JavaScript"><a href="#4-ES6-以上版本-的JavaScript" class="headerlink" title="4. ES6 以上版本 的JavaScript"></a>4. ES6 以上版本 的JavaScript</h3><h3 id="ES6-ES11新特性：https-www-bilibili-com-video-BV1uK411H7on"><a href="#ES6-ES11新特性：https-www-bilibili-com-video-BV1uK411H7on" class="headerlink" title="ES6-ES11新特性：https://www.bilibili.com/video/BV1uK411H7on"></a>ES6-ES11新特性：<a href="https://www.bilibili.com/video/BV1uK411H7on">https://www.bilibili.com/video/BV1uK411H7on</a></h3><h2 id="版本控制管理系统"><a href="#版本控制管理系统" class="headerlink" title="版本控制管理系统"></a>版本控制管理系统</h2>Version Control System<h3 id="1-Git的基本用法"><a href="#1-Git的基本用法" class="headerlink" title="1.  Git的基本用法"></a>1.  Git的基本用法</h3><h3 id="Git最新教程：https-www-bilibili-com-video-BV1FE411P7B3"><a href="#Git最新教程：https-www-bilibili-com-video-BV1FE411P7B3" class="headerlink" title="Git最新教程：https://www.bilibili.com/video/BV1FE411P7B3"></a>Git最新教程：<a href="https://www.bilibili.com/video/BV1FE411P7B3">https://www.bilibili.com/video/BV1FE411P7B3</a></h3><h3 id="2-相关平台-软件的使用"><a href="#2-相关平台-软件的使用" class="headerlink" title="2.  相关平台/软件的使用"></a>2.  相关平台/软件的使用</h3></li><li>GitHub</li><li>十分钟学会Github：<a href="https://www.bilibili.com/video/BV1yo4y1d7UK">https://www.bilibili.com/video/BV1yo4y1d7UK</a></li><li>GitLab</li><li>gitlab使用说明：<a href="https://www.bilibili.com/video/BV11E411x7Uv">https://www.bilibili.com/video/BV11E411x7Uv</a></li><li>Gitee</li><li>这个看中文网址就可以了，目前B站还没有很好的视频介绍<h2 id="网络安全相关知识"><a href="#网络安全相关知识" class="headerlink" title="网络安全相关知识"></a>网络安全相关知识</h2>Web Security Knowledge<h3 id="1-HTTPS-原理和使用"><a href="#1-HTTPS-原理和使用" class="headerlink" title="1. HTTPS 原理和使用"></a>1. HTTPS 原理和使用</h3><h3 id="你连HTTPS原理都不懂：https-www-bilibili-com-video-BV1Up4y1i7PG"><a href="#你连HTTPS原理都不懂：https-www-bilibili-com-video-BV1Up4y1i7PG" class="headerlink" title="你连HTTPS原理都不懂：https://www.bilibili.com/video/BV1Up4y1i7PG"></a>你连HTTPS原理都不懂：<a href="https://www.bilibili.com/video/BV1Up4y1i7PG">https://www.bilibili.com/video/BV1Up4y1i7PG</a></h3><h3 id="2-CORS-跨域请求和安全知识"><a href="#2-CORS-跨域请求和安全知识" class="headerlink" title="2. CORS 跨域请求和安全知识"></a>2. CORS 跨域请求和安全知识</h3><h3 id="什么是CORS：https-www-bilibili-com-video-BV1Kt411E76z"><a href="#什么是CORS：https-www-bilibili-com-video-BV1Kt411E76z" class="headerlink" title="什么是CORS：https://www.bilibili.com/video/BV1Kt411E76z"></a>什么是CORS：<a href="https://www.bilibili.com/video/BV1Kt411E76z">https://www.bilibili.com/video/BV1Kt411E76z</a></h3><h3 id="3-内容安全策略"><a href="#3-内容安全策略" class="headerlink" title="3. 内容安全策略"></a>3. 内容安全策略</h3><h3 id="网络渗透：https-www-bilibili-com-video-BV1kh411W7Vv"><a href="#网络渗透：https-www-bilibili-com-video-BV1kh411W7Vv" class="headerlink" title="网络渗透：https://www.bilibili.com/video/BV1kh411W7Vv"></a>网络渗透：<a href="https://www.bilibili.com/video/BV1kh411W7Vv">https://www.bilibili.com/video/BV1kh411W7Vv</a></h3><h3 id="4-OWASP-安全风险知识"><a href="#4-OWASP-安全风险知识" class="headerlink" title="4. OWASP 安全风险知识"></a>4. OWASP 安全风险知识</h3><h3 id="OWASP-TOP10：https-www-bilibili-com-video-BV1ey4y1V7Jj"><a href="#OWASP-TOP10：https-www-bilibili-com-video-BV1ey4y1V7Jj" class="headerlink" title="OWASP  TOP10：https://www.bilibili.com/video/BV1ey4y1V7Jj"></a>OWASP  TOP10：<a href="https://www.bilibili.com/video/BV1ey4y1V7Jj">https://www.bilibili.com/video/BV1ey4y1V7Jj</a></h3><h2 id="包管理工具"><a href="#包管理工具" class="headerlink" title="包管理工具"></a>包管理工具</h2>Package Managers<h3 id="1-npm"><a href="#1-npm" class="headerlink" title="1. npm"></a>1. npm</h3><h3 id="包管理工具：https-www-bilibili-com-video-BV1Dv411W7XP"><a href="#包管理工具：https-www-bilibili-com-video-BV1Dv411W7XP" class="headerlink" title="包管理工具：https://www.bilibili.com/video/BV1Dv411W7XP"></a>包管理工具：<a href="https://www.bilibili.com/video/BV1Dv411W7XP">https://www.bilibili.com/video/BV1Dv411W7XP</a></h3><h3 id="2-yarn"><a href="#2-yarn" class="headerlink" title="2. yarn"></a>2. yarn</h3><h3 id="Yarn入门：https-www-imooc-com-learn-766-B站没有，推荐这个免费"><a href="#Yarn入门：https-www-imooc-com-learn-766-B站没有，推荐这个免费" class="headerlink" title="Yarn入门：https://www.imooc.com/learn/766  (B站没有，推荐这个免费)"></a>Yarn入门：<a href="https://www.imooc.com/learn/766">https://www.imooc.com/learn/766</a>  (B站没有，推荐这个免费)</h3><h2 id="CSS-预处理-语言"><a href="#CSS-预处理-语言" class="headerlink" title="CSS 预处理 语言"></a>CSS 预处理 语言</h2>CSS Preprocessors<h3 id="1-Sass"><a href="#1-Sass" class="headerlink" title="1. Sass"></a>1. Sass</h3><h3 id="SCSS从入门到实战：https-www-bilibili-com-video-BV1Zg4y1v75U"><a href="#SCSS从入门到实战：https-www-bilibili-com-video-BV1Zg4y1v75U" class="headerlink" title="SCSS从入门到实战：https://www.bilibili.com/video/BV1Zg4y1v75U"></a>SCSS从入门到实战：<a href="https://www.bilibili.com/video/BV1Zg4y1v75U">https://www.bilibili.com/video/BV1Zg4y1v75U</a></h3><h3 id="2-PostCSS"><a href="#2-PostCSS" class="headerlink" title="2. PostCSS"></a>2. PostCSS</h3><h3 id="B站没太好的视频，建议买书《深入PostCSS-Web设计》"><a href="#B站没太好的视频，建议买书《深入PostCSS-Web设计》" class="headerlink" title="B站没太好的视频，建议买书《深入PostCSS Web设计》"></a>B站没太好的视频，建议买书《深入PostCSS Web设计》</h3><h3 id="3-Less"><a href="#3-Less" class="headerlink" title="3. Less"></a>3. Less</h3><h3 id="前端less教程：https-www-bilibili-com-video-BV1YW411T7vd"><a href="#前端less教程：https-www-bilibili-com-video-BV1YW411T7vd" class="headerlink" title="前端less教程：https://www.bilibili.com/video/BV1YW411T7vd"></a>前端less教程：<a href="https://www.bilibili.com/video/BV1YW411T7vd">https://www.bilibili.com/video/BV1YW411T7vd</a></h3><h2 id="构建工具"><a href="#构建工具" class="headerlink" title="构建工具"></a>构建工具</h2>Build Tools<h3 id="1-任务执行命令"><a href="#1-任务执行命令" class="headerlink" title="1. 任务执行命令"></a>1. 任务执行命令</h3>[Task Runners]</li><li>npm scripts</li><li>npm包管理应用：<a href="https://www.bilibili.com/video/BV1Dv411W7XP">https://www.bilibili.com/video/BV1Dv411W7XP</a></li><li>Gulp</li><li>Gulp入门：<a href="https://www.bilibili.com/video/BV1yA411s72G">https://www.bilibili.com/video/BV1yA411s72G</a><h3 id="2-打包工具"><a href="#2-打包工具" class="headerlink" title="2. 打包工具"></a>2. 打包工具</h3></li><li>Webpack</li><li>Webpack从入门到精通：<a href="https://www.bilibili.com/video/BV1e7411j7T5">https://www.bilibili.com/video/BV1e7411j7T5</a></li><li>Parcel</li><li>Parcel初体验：<a href="https://www.bilibili.com/video/BV1Pa4y147Kf">https://www.bilibili.com/video/BV1Pa4y147Kf</a><h3 id="3-代码格式化工具"><a href="#3-代码格式化工具" class="headerlink" title="3. 代码格式化工具"></a>3. 代码格式化工具</h3></li><li>Prettier</li><li>Prettier和ESLint使用：<a href="https://www.bilibili.com/video/BV183411r7YK">https://www.bilibili.com/video/BV183411r7YK</a></li><li>ESLint</li><li>ESLint基础入门：<a href="https://space.bilibili.com/390120104/search/video?keyword=ESLint">https://space.bilibili.com/390120104/search/video?keyword=ESLint</a><h2 id="三大前端框架"><a href="#三大前端框架" class="headerlink" title="三大前端框架"></a>三大前端框架</h2>Web Framework<h3 id="React-js"><a href="#React-js" class="headerlink" title="React.js"></a>React.js</h3><h3 id="React基础视频：https-www-bilibili-com-video-BV1g4411i7po"><a href="#React基础视频：https-www-bilibili-com-video-BV1g4411i7po" class="headerlink" title="React基础视频：https://www.bilibili.com/video/BV1g4411i7po"></a>React基础视频：<a href="https://www.bilibili.com/video/BV1g4411i7po">https://www.bilibili.com/video/BV1g4411i7po</a></h3><h3 id="React全家桶：https-www-bilibili-com-video-BV1wy4y1D7JT"><a href="#React全家桶：https-www-bilibili-com-video-BV1wy4y1D7JT" class="headerlink" title="React全家桶：https://www.bilibili.com/video/BV1wy4y1D7JT"></a>React全家桶：<a href="https://www.bilibili.com/video/BV1wy4y1D7JT">https://www.bilibili.com/video/BV1wy4y1D7JT</a></h3><h3 id="React实战博客：https-www-bilibili-com-video-BV1CJ411377B"><a href="#React实战博客：https-www-bilibili-com-video-BV1CJ411377B" class="headerlink" title="React实战博客：https://www.bilibili.com/video/BV1CJ411377B"></a>React实战博客：<a href="https://www.bilibili.com/video/BV1CJ411377B">https://www.bilibili.com/video/BV1CJ411377B</a></h3><h3 id="React商城实战：https-www-bilibili-com-video-BV1i5411c7xp"><a href="#React商城实战：https-www-bilibili-com-video-BV1i5411c7xp" class="headerlink" title="React商城实战：https://www.bilibili.com/video/BV1i5411c7xp"></a>React商城实战：<a href="https://www.bilibili.com/video/BV1i5411c7xp">https://www.bilibili.com/video/BV1i5411c7xp</a></h3><h3 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h3><h3 id="Vue2全家桶：https-www-jspang-com-detailed-id-57"><a href="#Vue2全家桶：https-www-jspang-com-detailed-id-57" class="headerlink" title="Vue2全家桶：https://www.jspang.com/detailed?id=57"></a>Vue2全家桶：<a href="https://www.jspang.com/detailed?id=57">https://www.jspang.com/detailed?id=57</a></h3><h3 id="Vue3全家桶：https-www-jspang-com-detailed-id-67"><a href="#Vue3全家桶：https-www-jspang-com-detailed-id-67" class="headerlink" title="Vue3全家桶：https://www.jspang.com/detailed?id=67"></a>Vue3全家桶：<a href="https://www.jspang.com/detailed?id=67">https://www.jspang.com/detailed?id=67</a></h3><h3 id="vuejs从入门到精通：https-www-bilibili-com-video-BV1Zy4y1K7SH"><a href="#vuejs从入门到精通：https-www-bilibili-com-video-BV1Zy4y1K7SH" class="headerlink" title="vuejs从入门到精通：https://www.bilibili.com/video/BV1Zy4y1K7SH"></a>vuejs从入门到精通：<a href="https://www.bilibili.com/video/BV1Zy4y1K7SH">https://www.bilibili.com/video/BV1Zy4y1K7SH</a></h3><h3 id="Angular"><a href="#Angular" class="headerlink" title="Angular"></a>Angular</h3><h3 id="Angular基础：https-www-bilibili-com-video-BV1Wx411R7qt"><a href="#Angular基础：https-www-bilibili-com-video-BV1Wx411R7qt" class="headerlink" title="Angular基础：https://www.bilibili.com/video/BV1Wx411R7qt"></a>Angular基础：<a href="https://www.bilibili.com/video/BV1Wx411R7qt">https://www.bilibili.com/video/BV1Wx411R7qt</a></h3><h2 id="Web-组件化编程"><a href="#Web-组件化编程" class="headerlink" title="Web 组件化编程"></a>Web 组件化编程</h2>Web Components<h3 id="HTML-Templates"><a href="#HTML-Templates" class="headerlink" title="HTML Templates"></a>HTML Templates</h3><h3 id="Custom-Elements"><a href="#Custom-Elements" class="headerlink" title="Custom Elements"></a>Custom Elements</h3><h3 id="Shadow-DOM"><a href="#Shadow-DOM" class="headerlink" title="Shadow DOM"></a>Shadow DOM</h3><h3 id="概要-此部分内容没有找到合适视频"><a href="#概要-此部分内容没有找到合适视频" class="headerlink" title="概要: 此部分内容没有找到合适视频"></a>概要: 此部分内容没有找到合适视频</h3><h2 id="CSS-相关框架"><a href="#CSS-相关框架" class="headerlink" title="CSS 相关框架"></a>CSS 相关框架</h2>CSS Frameworks<h3 id="BootStrap"><a href="#BootStrap" class="headerlink" title="BootStrap"></a>BootStrap</h3><h3 id="一周学会BootStrap：https-www-bilibili-com-video-BV1Lx411v73k"><a href="#一周学会BootStrap：https-www-bilibili-com-video-BV1Lx411v73k" class="headerlink" title="一周学会BootStrap：https://www.bilibili.com/video/BV1Lx411v73k"></a>一周学会BootStrap：<a href="https://www.bilibili.com/video/BV1Lx411v73k">https://www.bilibili.com/video/BV1Lx411v73k</a></h3><h3 id="Material-UI"><a href="#Material-UI" class="headerlink" title="Material UI"></a>Material UI</h3><h3 id="Material-UI入门教程：https-www-bilibili-com-video-BV12J411s75b"><a href="#Material-UI入门教程：https-www-bilibili-com-video-BV12J411s75b" class="headerlink" title="Material  UI入门教程：https://www.bilibili.com/video/BV12J411s75b"></a>Material  UI入门教程：<a href="https://www.bilibili.com/video/BV12J411s75b">https://www.bilibili.com/video/BV12J411s75b</a></h3><h3 id="Materialize-CSS"><a href="#Materialize-CSS" class="headerlink" title="Materialize CSS"></a>Materialize CSS</h3><h3 id="Materialize-CSS-Crash-Course：https-www-bilibili-com-video-BV1gx411h7Y5"><a href="#Materialize-CSS-Crash-Course：https-www-bilibili-com-video-BV1gx411h7Y5" class="headerlink" title="Materialize CSS Crash Course：https://www.bilibili.com/video/BV1gx411h7Y5"></a>Materialize CSS Crash Course：<a href="https://www.bilibili.com/video/BV1gx411h7Y5">https://www.bilibili.com/video/BV1gx411h7Y5</a></h3><h3 id="ReactStrap"><a href="#ReactStrap" class="headerlink" title="ReactStrap"></a>ReactStrap</h3><h2 id="JavaScript-语法糖"><a href="#JavaScript-语法糖" class="headerlink" title="JavaScript 语法糖"></a>JavaScript 语法糖</h2>Type Checkers<h3 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h3><h3 id="TypeScript从入门到精通：https-www-bilibili-com-video-BV1qV41167VD"><a href="#TypeScript从入门到精通：https-www-bilibili-com-video-BV1qV41167VD" class="headerlink" title="TypeScript从入门到精通：https://www.bilibili.com/video/BV1qV41167VD"></a>TypeScript从入门到精通：<a href="https://www.bilibili.com/video/BV1qV41167VD">https://www.bilibili.com/video/BV1qV41167VD</a></h3><h3 id="Flow"><a href="#Flow" class="headerlink" title="Flow"></a>Flow</h3><h2 id="服务端渲染"><a href="#服务端渲染" class="headerlink" title="服务端渲染"></a>服务端渲染</h2>Server Side  Rendering （SSR）<h3 id="React-js-1"><a href="#React-js-1" class="headerlink" title="React.js"></a>React.js</h3></li><li>Next.js</li><li>Next.js入门教程：<a href="https://www.bilibili.com/video/BV13441117KK">https://www.bilibili.com/video/BV13441117KK</a></li><li>GatsbyJS</li><li>GatsbyJS 实战：<a href="https://www.bilibili.com/video/BV1i4411T7AR">https://www.bilibili.com/video/BV1i4411T7AR</a> （英文）<h3 id="Vue-js-1"><a href="#Vue-js-1" class="headerlink" title="Vue.js"></a>Vue.js</h3></li><li>Nuxt.js</li><li>Nuxt.js入门：<a href="https://www.bilibili.com/video/BV1Xt41117Kg">https://www.bilibili.com/video/BV1Xt41117Kg</a><h3 id="Angular-1"><a href="#Angular-1" class="headerlink" title="Angular"></a>Angular</h3></li><li>Universal<h2 id="图形化编程"><a href="#图形化编程" class="headerlink" title="图形化编程"></a>图形化编程</h2>GraphQL<h3 id="Cocos-Creator"><a href="#Cocos-Creator" class="headerlink" title="Cocos Creator"></a>Cocos Creator</h3><h3 id="Cocos-图形游戏开发：https-www-bilibili-com-video-BV1sA411Y7x4"><a href="#Cocos-图形游戏开发：https-www-bilibili-com-video-BV1sA411Y7x4" class="headerlink" title="Cocos 图形游戏开发：https://www.bilibili.com/video/BV1sA411Y7x4"></a>Cocos 图形游戏开发：<a href="https://www.bilibili.com/video/BV1sA411Y7x4">https://www.bilibili.com/video/BV1sA411Y7x4</a></h3><h3 id="Three-js"><a href="#Three-js" class="headerlink" title="Three.js"></a>Three.js</h3><h3 id="Three-js基础教程-英文：https-www-bilibili-com-video-BV1ks411W78i"><a href="#Three-js基础教程-英文：https-www-bilibili-com-video-BV1ks411W78i" class="headerlink" title="Three.js基础教程-英文：https://www.bilibili.com/video/BV1ks411W78i"></a>Three.js基础教程-英文：<a href="https://www.bilibili.com/video/BV1ks411W78i">https://www.bilibili.com/video/BV1ks411W78i</a></h3><h3 id="Three-js教程：https-www-bilibili-com-video-BV1va4y1p7QB"><a href="#Three-js教程：https-www-bilibili-com-video-BV1va4y1p7QB" class="headerlink" title="Three.js教程：https://www.bilibili.com/video/BV1va4y1p7QB"></a>Three.js教程：<a href="https://www.bilibili.com/video/BV1va4y1p7QB">https://www.bilibili.com/video/BV1va4y1p7QB</a></h3><h2 id="静态站点生成器"><a href="#静态站点生成器" class="headerlink" title="静态站点生成器"></a>静态站点生成器</h2>Static Site Generators<h3 id="Next-js"><a href="#Next-js" class="headerlink" title="Next.js"></a>Next.js</h3><h3 id="Next-js入门教程：https-www-bilibili-com-video-BV13441117KK"><a href="#Next-js入门教程：https-www-bilibili-com-video-BV13441117KK" class="headerlink" title="Next.js入门教程：https://www.bilibili.com/video/BV13441117KK"></a>Next.js入门教程：<a href="https://www.bilibili.com/video/BV13441117KK">https://www.bilibili.com/video/BV13441117KK</a></h3><h3 id="GatsbyJS"><a href="#GatsbyJS" class="headerlink" title="GatsbyJS"></a>GatsbyJS</h3><h3 id="GatsbyJS-实战：https-www-bilibili-com-video-BV1i4411T7AR-（英文）"><a href="#GatsbyJS-实战：https-www-bilibili-com-video-BV1i4411T7AR-（英文）" class="headerlink" title="GatsbyJS 实战：https://www.bilibili.com/video/BV1i4411T7AR （英文）"></a>GatsbyJS 实战：<a href="https://www.bilibili.com/video/BV1i4411T7AR">https://www.bilibili.com/video/BV1i4411T7AR</a> （英文）</h3><h3 id="Nuxt-js"><a href="#Nuxt-js" class="headerlink" title="Nuxt.js"></a>Nuxt.js</h3><h3 id="Nuxt-js入门：https-www-bilibili-com-video-BV1Xt41117Kg"><a href="#Nuxt-js入门：https-www-bilibili-com-video-BV1Xt41117Kg" class="headerlink" title="Nuxt.js入门：https://www.bilibili.com/video/BV1Xt41117Kg"></a>Nuxt.js入门：<a href="https://www.bilibili.com/video/BV1Xt41117Kg">https://www.bilibili.com/video/BV1Xt41117Kg</a></h3><h3 id="Vuepress"><a href="#Vuepress" class="headerlink" title="Vuepress"></a>Vuepress</h3><h3 id="Vuepress入门到精通：https-www-bilibili-com-video-BV1vb411m7NY"><a href="#Vuepress入门到精通：https-www-bilibili-com-video-BV1vb411m7NY" class="headerlink" title="Vuepress入门到精通：https://www.bilibili.com/video/BV1vb411m7NY"></a>Vuepress入门到精通：<a href="https://www.bilibili.com/video/BV1vb411m7NY">https://www.bilibili.com/video/BV1vb411m7NY</a></h3><h3 id="Hugo"><a href="#Hugo" class="headerlink" title="Hugo"></a>Hugo</h3><h3 id="10分钟搭建个人网站：https-www-bilibili-com-video-BV1x64y117PX"><a href="#10分钟搭建个人网站：https-www-bilibili-com-video-BV1x64y117PX" class="headerlink" title="10分钟搭建个人网站：https://www.bilibili.com/video/BV1x64y117PX"></a>10分钟搭建个人网站：<a href="https://www.bilibili.com/video/BV1x64y117PX">https://www.bilibili.com/video/BV1x64y117PX</a></h3><h2 id="移动App开发"><a href="#移动App开发" class="headerlink" title="移动App开发"></a>移动App开发</h2>Mobile Applications<h3 id="React-Native"><a href="#React-Native" class="headerlink" title="React  Native"></a>React  Native</h3><h3 id="ReactNatvie基础：https-www-bilibili-com-video-BV1Eg4y16735"><a href="#ReactNatvie基础：https-www-bilibili-com-video-BV1Eg4y16735" class="headerlink" title="ReactNatvie基础：https://www.bilibili.com/video/BV1Eg4y16735"></a>ReactNatvie基础：<a href="https://www.bilibili.com/video/BV1Eg4y16735">https://www.bilibili.com/video/BV1Eg4y16735</a></h3><h3 id="ReactNatvie实战：https-www-bilibili-com-video-BV15K411s75p"><a href="#ReactNatvie实战：https-www-bilibili-com-video-BV15K411s75p" class="headerlink" title="ReactNatvie实战：https://www.bilibili.com/video/BV15K411s75p"></a>ReactNatvie实战：<a href="https://www.bilibili.com/video/BV15K411s75p">https://www.bilibili.com/video/BV15K411s75p</a></h3><h3 id="UniApp"><a href="#UniApp" class="headerlink" title="UniApp"></a>UniApp</h3><h3 id="Uni-App从入门到实战：https-www-bilibili-com-video-BV1BJ411W7pX"><a href="#Uni-App从入门到实战：https-www-bilibili-com-video-BV1BJ411W7pX" class="headerlink" title="Uni-App从入门到实战：https://www.bilibili.com/video/BV1BJ411W7pX"></a>Uni-App从入门到实战：<a href="https://www.bilibili.com/video/BV1BJ411W7pX">https://www.bilibili.com/video/BV1BJ411W7pX</a></h3><h3 id="Uni-App美团外卖：https-www-bilibili-com-video-BV1Zt4y117RR"><a href="#Uni-App美团外卖：https-www-bilibili-com-video-BV1Zt4y117RR" class="headerlink" title="Uni-App美团外卖：https://www.bilibili.com/video/BV1Zt4y117RR"></a>Uni-App美团外卖：<a href="https://www.bilibili.com/video/BV1Zt4y117RR">https://www.bilibili.com/video/BV1Zt4y117RR</a></h3><h3 id="Flutter"><a href="#Flutter" class="headerlink" title="Flutter"></a>Flutter</h3><h3 id="Flutter基础：https-www-bilibili-com-video-BV15t411U7yf"><a href="#Flutter基础：https-www-bilibili-com-video-BV15t411U7yf" class="headerlink" title="Flutter基础：https://www.bilibili.com/video/BV15t411U7yf"></a>Flutter基础：<a href="https://www.bilibili.com/video/BV15t411U7yf">https://www.bilibili.com/video/BV15t411U7yf</a></h3><h3 id="Flutter实战：https-www-bilibili-com-video-BV1kt411B7mu"><a href="#Flutter实战：https-www-bilibili-com-video-BV1kt411B7mu" class="headerlink" title="Flutter实战：https://www.bilibili.com/video/BV1kt411B7mu"></a>Flutter实战：<a href="https://www.bilibili.com/video/BV1kt411B7mu">https://www.bilibili.com/video/BV1kt411B7mu</a></h3><h3 id="Ionic"><a href="#Ionic" class="headerlink" title="Ionic"></a>Ionic</h3><h3 id="Ionic入门：https-www-bilibili-com-video-BV1Ub41117q5"><a href="#Ionic入门：https-www-bilibili-com-video-BV1Ub41117q5" class="headerlink" title="Ionic入门：https://www.bilibili.com/video/BV1Ub41117q5"></a>Ionic入门：<a href="https://www.bilibili.com/video/BV1Ub41117q5">https://www.bilibili.com/video/BV1Ub41117q5</a></h3><h2 id="桌面应用开发"><a href="#桌面应用开发" class="headerlink" title="桌面应用开发"></a>桌面应用开发</h2>Desktop Applications<h3 id="Electron"><a href="#Electron" class="headerlink" title="Electron"></a>Electron</h3><h3 id="Electron入门：https-www-bilibili-com-video-BV1QB4y1F722"><a href="#Electron入门：https-www-bilibili-com-video-BV1QB4y1F722" class="headerlink" title="Electron入门：https://www.bilibili.com/video/BV1QB4y1F722"></a>Electron入门：<a href="https://www.bilibili.com/video/BV1QB4y1F722">https://www.bilibili.com/video/BV1QB4y1F722</a></h3><h3 id="Electron基础：https-www-bilibili-com-video-BV177411s7Lt"><a href="#Electron基础：https-www-bilibili-com-video-BV177411s7Lt" class="headerlink" title="Electron基础：https://www.bilibili.com/video/BV177411s7Lt"></a>Electron基础：<a href="https://www.bilibili.com/video/BV177411s7Lt">https://www.bilibili.com/video/BV177411s7Lt</a></h3><h2 id="学到此处，基础部分学习已经全部完成。"><a href="#学到此处，基础部分学习已经全部完成。" class="headerlink" title="学到此处，基础部分学习已经全部完成。"></a>学到此处，基础部分学习已经全部完成。</h2></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;网络知识&quot;&gt;&lt;a href=&quot;#网络知识&quot; class=&quot;headerlink&quot; title=&quot;网络知识&quot;&gt;&lt;/a&gt;网络知识&lt;/h2&gt;&lt;h3 id=&quot;1-网络工作原理&quot;&gt;&lt;a href=&quot;#1-网络工作原理&quot; class=&quot;headerlink&quot; title=&quot;1. 网络工作原理&quot;&gt;&lt;/a&gt;1. 网络工作原理&lt;/h3&gt;&lt;h3 id=&quot;计算机网络原理：https-www-bilibili-com-video-BV1xJ41137Q3&quot;&gt;&lt;a href=&quot;#计算机网络原理：https-www-bilibili-com-video-BV1xJ41137Q3&quot; class=&quot;headerlink&quot; title=&quot;计算机网络原理：https://www.bilibili.com/video/BV1xJ41137Q3&quot;&gt;&lt;/a&gt;计算机网络原理：&lt;a href=&quot;https://www.bilibili.com/video/BV1xJ41137Q3&quot;&gt;https://www.bilibili.com/video/BV1xJ41137Q3&lt;/a&gt;&lt;/h3&gt;</summary>
    
    
    
    <category term="前端学习" scheme="https://www.carryone.top/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="前端学习" scheme="https://www.carryone.top/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>技术胖收藏夹分享</title>
    <link href="https://www.carryone.top/2022/01/23/%E6%8A%80%E6%9C%AF%E8%83%96%E6%94%B6%E8%97%8F%E5%A4%B9%E5%88%86%E4%BA%AB/"/>
    <id>https://www.carryone.top/2022/01/23/%E6%8A%80%E6%9C%AF%E8%83%96%E6%94%B6%E8%97%8F%E5%A4%B9%E5%88%86%E4%BA%AB/</id>
    <published>2022-01-23T05:44:00.000Z</published>
    <updated>2022-01-23T05:45:28.087Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自学前端程序-私藏工具和网站分享"><a href="#自学前端程序-私藏工具和网站分享" class="headerlink" title="自学前端程序 私藏工具和网站分享"></a>自学前端程序 私藏工具和网站分享</h1><h2 id="01-JavaScript"><a href="#01-JavaScript" class="headerlink" title="01.JavaScript"></a>01.JavaScript</h2><ul><li><a href="https://wangdoc.com/javascript/">JavaScript 教程 | 通俗易懂的JavaScript教程</a></li><li><a href="https://es6.ruanyifeng.com/">ES6 入门教程 | 通俗易懂的ES6入门教程</a><a id="more"></a></li><li><a href="https://javascript30.com/">JavaScript 30  |  使用原生JavaScript在30天内完成30个项目</a></li><li><a href="https://zh.javascript.info/">现代 JavaScript 教程 |  最近很流行的JavaScript教程</a></li><li><a href="https://blog.poetries.top/node-learning-notes/">Node.js学习指南 | 系统的Node.js学习教程和笔记系统整理</a></li><li><a href="https://github.com/ryanmcdermott/clean-code-javascript">JS 代码规范 | 优秀的 JS代码规范</a></li><li><a href="https://github.com/xcatliu/typescript-tutorial">TypeScript 教程 | 通俗易懂的TypeScript教程</a></li><li><a href="https://jspang.com/detailed?id=63">TypeScript 教程 |  最好的TypeScript 视频+图文教程</a></li></ul><h2 id="02-CSS样式"><a href="#02-CSS样式" class="headerlink" title="02.CSS样式"></a>02.CSS样式</h2><ul><li><a href="https://lhammer.cn/You-need-to-know-css/#/zh-cn/">CSS Tricks 效果大全 | CSS的各种效果实现 有很多动画效果</a></li><li><a href="https://github.com/chokcoco/CSS-Inspiration">CSS Inspiration |  CSS灵感的诞生地  我每天都的网站</a></li><li><a href="https://github.com/QiShaoXuan/css_tricks"> CSS 常用样式 |  有很多常用的CSS样式</a></li><li><a href="https://animista.net/"> Animista | CSS动画库  主打按需定制CSS动画效果</a></li><li><a href="https://animista.net/"> Animista | CSS动画库  主打按需定制CSS动画效果</a></li><li><a href="https://cssminifier.com/"> CSS Minifier | 在线CSS代码简化/压缩工具</a></li><li><a href="https://sass.bootcss.com/documentation"> Sass: Sass 文档 | Sass 中文网  成熟、稳定、强大的CSS扩展语言</a></li><li><a href="https://less.bootcss.com/"> Less 快速入门 | Less.js 中文文档 将CSS赋予了动态语言特性的样式语言</a></li><li><a href="https://stylus-lang.com/"> stylus | CSS扩展  富有变现里、动态、健壮的CSS</a></li></ul><h2 id="03-算法数据"><a href="#03-算法数据" class="headerlink" title="03.算法数据"></a>03.算法数据</h2><ul><li><a href="http://github.com/trekhleb/javascript-algorithms"> JavaScript 算法与数据结构 | 多种基于JavaScript的算法与数据结构</a></li><li><a href="https://github.com/azl397985856/leetcode"> leetcode 解题之路 |  私藏LeetCode解题攻略 </a></li><li><a href="https://github.com/MisterBooo/LeetCodeAnimation"> 五分钟学算法 |  每天拿出五分钟  学学算法  比如上个厕所就学了 </a></li><li><a href="https://github.com/biaochenxuying/blog/issues/43">数据结构与算法项目推荐 | Github上170K+Star的前端学习数据结构和算法题目 </a></li><li><a href="https://github.com/biaochenxuying/blog/issues/42">JavaScript  十大经典排序算法 | JavaScript排序必会题目  作者功力很深 值得学习 </a></li><li><a href="https://github.com/algorithm-visualizer/algorithm-visualizer">算法可视化工具 |  用可视化工具和交互方式 让你从代码中可视化算法 </a></li><li><a href="https://visualgo.net/en">算法可视化来源 </a></li><li><a href="https://github.com/skidding/illustrated-algorithms">算法的工作方式 | 变量和操作的可视化表示 增强了控制流和实际源代码 </a></li></ul><h2 id="04-前端面试"><a href="#04-前端面试" class="headerlink" title="04.前端面试"></a>04.前端面试</h2><ul><li><a href="https://blog.poetries.top/FE-Interview-Questions/">前端面试常考问题整理 |  按模块和知识点分类</a></li><li><a href="https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions">前端开发面试题</a></li><li><a href="https://github.com/h5bp/Front-end-Developer-Interview-Questions/">WEB前端面试宝典</a></li><li><a href="https://github.com/shfshanyue/blog/blob/master/post/juejin-interview.md">掘金前端面试题合集</a></li><li><a href="https://yuchengkai.cn/">前端面试图谱</a></li><li><a href="https://github.com/biaochenxuying/blog/issues/47">前端面试开源项目汇总 | Github上100K+ Star 的前端面试开源项目汇总</a></li></ul><h2 id="05-技术社区"><a href="#05-技术社区" class="headerlink" title="05.技术社区"></a>05.技术社区</h2><ul><li><a href="https://github.com/">GitHub  |  高质量内容创作和分享平台</a></li><li><a href="https://stackoverflow.com/">Stackoverflow |一个回答技术问题的网站</a></li><li><a href="https://juejin.cn/">掘金 | 国内的很多优质前端文章都掘金</a></li><li><a href="https://www.cnblogs.com/">博客园  | 一个很纯粹的技术博客平台</a></li><li><a href="https://www.zhihu.com/">知乎 |  很多程序人喜欢泡在知乎</a></li><li><a href="https://www.csdn.net/">CSDN  | 老牌社区  程序员必上的一个社区</a></li><li><a href="https://www.v2ex.com/">v2ex  | 程序员分享和探索的社区</a></li><li><a href="https://segmentfault.com/">segmentfault  | 低调技术博客社区</a></li><li><a href="https://cnodejs.org/">Node.js 中文社区 |  node专业中文社区</a></li><li><a href="https://www.smashingmagazine.com/">博客杂志站点 | 一个 web 技术类的博客杂志站点</a></li><li><a href="https://www.jstips.co/">JS 技术的网站 | 每天推出一个JS技巧的网站</a></li><li><a href="https://www.jstips.co/">W3Cplus | 推广国内行业的技术博客</a></li><li><a href="https://docschina.org/">印记中文 | 最权威的技术中文文档社区</a></li></ul><h2 id="06-前端博客"><a href="#06-前端博客" class="headerlink" title="06.前端博客"></a>06.前端博客</h2><ul><li><a href="https://jspang.com/">技术胖博客 |  专注前端 每年100集免费前端视频</a></li><li><a href="http://www.alloyteam.com/">腾讯Alloy Team  | 腾讯前端博客 每天必看</a></li><li><a href="https://isux.tencent.com/">腾讯用户体验博客 | 专注于前端用户体验</a></li><li><a href="https://fed.taobao.org/">淘系前端博客 |  淘宝前端博客 代表中国最强前端实力</a></li><li><a href="https://aotu.io/">京东凹凸实验室  |  京东前端技术博客</a></li><li><a href="https://zhuanlan.zhihu.com/ElemeFE">饿了么前端博客  |  知乎上的最强前端博客</a></li><li><a href="http://fex.baidu.com/">百度前端博客  |  百度前端团队旗下博客</a></li><li><a href="https://75.team/">360奇舞团  |  360公司前端团队</a></li><li><a href="https://tech.meituan.com/">美团技术博客  |  美团技术团队博客</a></li></ul><h2 id="07-构建工具"><a href="#07-构建工具" class="headerlink" title="07.构建工具"></a>07.构建工具</h2><ul><li><a href="https://www.npmjs.com/">NPM |  包管理 和 项目构建工具</a></li><li><a href="https://webpack.js.org/">webpack  | 前端最流行的项目构建工具</a></li><li><a href="https://yarnpkg.com/">Yarn  |  后起之秀 优秀的包管理和构建工具</a></li><li><a href="https://www.gulpjs.com.cn/">Gulp  |  老牌构建工具</a></li><li><a href="https://babeljs.io/">Babel  | ES6构建转换工具</a></li><li><a href="https://cn.eslint.org/">ESLint  | 可组装的JavaScript和JSX检查工具</a></li><li><a href="https://www.postcss.com.cn/">PostCSS | 用JavaScript转换CSS代码的工具</a></li></ul><h2 id="08-部署工具"><a href="#08-部署工具" class="headerlink" title="08.部署工具"></a>08.部署工具</h2><ul><li><a href="https://pages.github.com/">Github Page  | Github提供的免费静态网站托管服务</a></li><li><a href="https://www.netlify.com/">Netlify  |  30秒内部署你的网站</a></li><li><a href="https://vercel.com/">Vercel  |  快速部署你的网站 国外很流行</a></li><li><a href="https://surge.sh/">Surge  |  一个命令部署你的网站</a></li><li><a href="https://www.heroku.com/">Heroku  |  运动构建 、 运行你的网站和应用</a></li></ul><h2 id="09-静态站点搭建"><a href="#09-静态站点搭建" class="headerlink" title="09.静态站点搭建"></a>09.静态站点搭建</h2><ul><li><a href="https://hexo.io/zh-cn/">Hexo  |  最流行的静态博客程序 Markdown编写 生成静态站点</a></li><li><a href="https://www.vuepress.cn/">VuePress  |  Vue驱动的静态网站生成器</a></li><li><a href="https://www.gitbook.com/">GitBook  | 现代化的文档平台，支持团队协作</a></li></ul><h2 id="10-前端代码规范"><a href="#10-前端代码规范" class="headerlink" title="10.前端代码规范"></a>10.前端代码规范</h2><ul><li><a href="https://tgideas.qq.com/doc/index.html">Tgideas | 腾讯前端代码规范 值得参考</a></li><li><a href="https://guide.aotu.io/index.html">京东  |  京东前端代码规范文档 分类详细</a></li><li><a href="https://codeguide.bootcss.com/">Bootstrap编码规范  |  适合个人和小团队使用的代码规范 不复杂</a></li><li><a href="https://es6.ruanyifeng.com/#docs/style">ES6 编程风格  | 阮一峰编写的ES6代码规范  值得每个人阅读并参考</a></li><li><a href="https://github.com/airbnb/javascript">Airbnb  前端代码规范  |  国外企业的前端代码规范</a></li><li><a href="https://eslint.org/">ESLint  |  代码规范检查和格式化工具</a></li><li><a href="https://prettier.io/">Prettier  | VSCode 最热门的代码格式化工具  让你写出漂亮的代码</a></li></ul><h2 id="11-调试抓包"><a href="#11-调试抓包" class="headerlink" title="11.调试抓包"></a>11.调试抓包</h2><ul><li><a href="https://wproxy.org/whistle/">Whistle  |  代理抓包工具  我一直在用的工具 很好很强大</a></li><li><a href="https://www.telerik.com/fiddler">Fiddler  |  使用人数最多的抓包工具</a></li></ul><h2 id="12-在线工具"><a href="#12-在线工具" class="headerlink" title="12.在线工具"></a>12.在线工具</h2><ul><li><a href="https://codepen.io/">CodePen  |  前端在线测试和演示工具  国外站点</a></li><li><a href="https://caniuse.com/">Can  I  use |  Web前端兼容性列表</a></li><li><a href="https://tinypng.com/">TinyPNG  |  PNG/JPG 图片在线压缩工具</a></li><li><a href="https://www.umeng.com/">CNZZ |  老牌站点统计工具  5年前国内站长必上网站</a></li><li><a href="https://web.dev/measure/">web.dev  |  评测网站性能  基于Lighthouse</a></li><li><a href="https://www.shapedivider.app/">Shape Divider  | 定制各种形状SVG的工具</a></li><li><a href="https://gtmetrix.com/">GTmetrix  |  网页性能在线分析工具</a></li><li><a href="https://carbon.now.sh/">Carbon  |  代码转图片工具  </a></li><li><a href="https://www.wappalyzer.com/">Wappalyzer  |  检测某个网站的技术栈  </a></li><li><a href="https://unbug.github.io/codelf">CODEIF | 变量方法起名工具  人工智能加持  </a></li><li><a href="https://tool.lu/"> tool.lu  |  程序员在线工具大全   </a></li></ul><h2 id="13-开发工具"><a href="#13-开发工具" class="headerlink" title="13.开发工具"></a>13.开发工具</h2><ul><li><a href="https://code.visualstudio.com/"> VSCode  |  前端最流行的编辑器   </a></li><li><a href="https://www.sublimetext.com/"> Sublime Text  |  轻量级代码编辑工具 曾经我的最爱   </a></li><li><a href="https://www.jetbrains.com/webstorm/"> WebStom |  忠爱粉最多的编辑器 </a></li><li><a href="https://atom.io/"> Atom  |   用的人很多  我却不喜欢的编辑器 </a></li><li><a href="https://www.typora.io/"> Typora |  程序人Mrakdown笔记  一直在用的笔记工具 </a></li></ul><h2 id="14-开发者大会"><a href="#14-开发者大会" class="headerlink" title="14.开发者大会"></a>14.开发者大会</h2><ul><li><a href="https://fequan.com/"> Vue.js开发者大会 |  前端人必须关注的前端大会 </a></li><li><a href="https://jsconfchina.com/"> 中国JS开发者大会  |  公司每年必组织参加的技术大会 </a></li><li><a href="https://css.w3ctech.com/"> CSS开发者大会 |  提高CSS技术的开发者大会  打开视野 面向世界 </a></li><li><a href="https://www.alibabaf2e.com/"> D2前端开发者大会 |  阿里组织的大会 可以看直播  </a></li></ul><h2 id="15-WEB图标"><a href="#15-WEB图标" class="headerlink" title="15.WEB图标"></a>15.WEB图标</h2><ul><li><a href="http://www.fontawesome.com.cn/"> Font Awesome  |  网站开发最流行的图标集  </a></li><li><a href="https://feathericons.com/"> Feather |  简洁美观的开源图标  </a></li><li><a href="https://material.io/resources/icons/"> Material  Design Icons  |  轻快、精美的符号图标  </a></li><li><a href="https://tablericons.com/"> Tabler Icons | 681枚可定制的开源SVG图标  </a></li><li><a href="https://simpleicons.org/"> 常见品牌的SVG图标  </a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;自学前端程序-私藏工具和网站分享&quot;&gt;&lt;a href=&quot;#自学前端程序-私藏工具和网站分享&quot; class=&quot;headerlink&quot; title=&quot;自学前端程序 私藏工具和网站分享&quot;&gt;&lt;/a&gt;自学前端程序 私藏工具和网站分享&lt;/h1&gt;&lt;h2 id=&quot;01-JavaScript&quot;&gt;&lt;a href=&quot;#01-JavaScript&quot; class=&quot;headerlink&quot; title=&quot;01.JavaScript&quot;&gt;&lt;/a&gt;01.JavaScript&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://wangdoc.com/javascript/&quot;&gt;JavaScript 教程 | 通俗易懂的JavaScript教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://es6.ruanyifeng.com/&quot;&gt;ES6 入门教程 | 通俗易懂的ES6入门教程&lt;/a&gt;</summary>
    
    
    
    <category term="前端学习" scheme="https://www.carryone.top/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="前端学习" scheme="https://www.carryone.top/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript学习资料链接</title>
    <link href="https://www.carryone.top/2022/01/23/JavaScript%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E9%93%BE%E6%8E%A5/"/>
    <id>https://www.carryone.top/2022/01/23/JavaScript%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E9%93%BE%E6%8E%A5/</id>
    <published>2022-01-23T05:40:00.000Z</published>
    <updated>2022-01-23T05:41:45.036Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JavaScript知识"><a href="#JavaScript知识" class="headerlink" title="JavaScript知识"></a>JavaScript知识</h2><ul><li><a href="http://www.w3school.com.cn/js/">JavaScript 教程 - w3school</a></li><li><a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000">JavaScript教程 - 廖雪峰</a><a id="more"></a></li><li><a href="https://www.zhihu.com/question/19713563">如何循序渐进、有效地学习JavaScript？</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript">重新介绍 JavaScript（JS 教程）</a></li><li><a href="https://www.javascriptcn.com/">JavaScript中文网</a></li></ul><h2 id="JavaScript主流框架"><a href="#JavaScript主流框架" class="headerlink" title="JavaScript主流框架"></a>JavaScript主流框架</h2><h3 id="angular"><a href="#angular" class="headerlink" title="angular"></a>angular</h3><ul><li><a href="http://www.ituring.com.cn/minibook/303">AngularJS入门教程：http://www.ituring.com.cn/minibook/303</a></li><li><a href="http://docs.ngnice.com/guide">API翻译：http://docs.ngnice.com/guide</a></li><li><a href="https://github.com/johnpapa/angular-styleguide">AngularJs编程规范：https://github.com/johnpapa/angular-styleguide</a></li><li><a href="http://www.reqianduan.com/1722.html">Angular代码规范：http://www.reqianduan.com/1722.html</a></li><li><a href="https://github.com/xufei/blog/issues/23">优化Angular应用的性能</a></li><li><a href="http://www.csdn.net/article/2013-09-18/2816972-AngularJS-performance-tuning-for-long-list">对AngularJS进行性能调优的7个建议</a></li><li><a href="http://www.oschina.net/translate/top-10-mistakes-angularjs-developers-make">AngularJS 开发者最常犯的 10 个错误</a></li><li><a href="http://ourjs.com/detail/54a0b5cd71caa3b40a000001">AngularJS在大型单页面应用中的性能优化（一）</a></li><li><a href="http://www.codesec.net/view/200952.html">AngularJS1.3一些技巧</a></li><li><a href="http://my.oschina.net/blogshi/blog/293631">实践总结 - 不可错过的Angular应用技巧</a></li></ul><h3 id="react"><a href="#react" class="headerlink" title="react"></a>react</h3><ul><li><a href="http://www.react-china.org/">react.js 中文论坛</a></li><li><a href="https://facebook.github.io/react/index.html">react.js 官方网址</a></li><li><a href="https://facebook.github.io/react/docs/getting-started.html">react.js 官方文档</a></li><li><a href="https://hulufei.gitbooks.io/react-tutorial/content/index.html">React 入门教程</a></li><li><a href="https://github.com/ant-design/ant-design">基于react组件化开发</a></li><li><a href="https://github.com/dwqs/react-style-guide">React 编程规范(by Airbnb)</a></li></ul><h3 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h3><ul><li><a href="http://cn.vuejs.org/">Vue 官方</a></li><li><a href="http://forum.vuejs.org/">Vue 论坛</a></li><li><a href="http://www.cnblogs.com/aaronjs/p/3660102.html">Vue 入门指南</a></li><li><a href="http://segmentfault.com/a/1190000000411057">Vue 的一些资源索引</a></li></ul><h2 id="JavaScript学习资料"><a href="#JavaScript学习资料" class="headerlink" title="JavaScript学习资料"></a>JavaScript学习资料</h2><ul><li><a href="https://amazon.cn/gp/product/B007OQQVMY/ref=as_li_tl?ie=UTF8&tag=misigou-23&camp=536&creative=3200&linkCode=as2&creativeASIN=B007OQQVMY&linkId=e7dfc50605beec89cdc1596230531dbf">书籍-JavaScript高级程序设计(第3版)</a></li><li><a href="https://amazon.cn/gp/product/B007VISQ1Y/ref=as_li_tl?ie=UTF8&tag=misigou-23&camp=536&creative=3200&linkCode=as2&creativeASIN=B007VISQ1Y&linkId=bba2798c48e989d2d9f20756e8e6f895">书籍-O’Reilly精品图书系列:JavaScript权威指南(第6版)</a></li><li><a href="https://amazon.cn/gp/product/B004VJM5KE/ref=as_li_tl?ie=UTF8&tag=misigou-23&camp=536&creative=3200&linkCode=as2&creativeASIN=B004VJM5KE&linkId=f6da1bd98885e86df1a294783d8e8f0d">书籍-JavaScript DOM编程艺术(第2版)</a></li><li><a href="https://amazon.cn/gp/product/B0097CON2S/ref=as_li_tl?ie=UTF8&tag=misigou-23&camp=536&creative=3200&linkCode=as2&creativeASIN=B0097CON2S&linkId=13c1fa245418b8f421e3b3ea00c5f518">书籍-JavaScript语言精粹(修订版)</a></li><li><a href="https://amazon.cn/gp/product/B00XJ2AU3S/ref=as_li_tl?ie=UTF8&tag=misigou-23&camp=536&creative=3200&linkCode=as2&creativeASIN=B00XJ2AU3S&linkId=40999afbac8d264f03cc480212bb8d95">书籍-JavaScript设计模式与开发实践</a></li><li><a href="https://amazon.cn/gp/product/B07574N7Y2/ref=as_li_tl?ie=UTF8&tag=misigou-23&camp=536&creative=3200&linkCode=as2&creativeASIN=B07574N7Y2&linkId=c90fb8ee7eef18ef432cd6d9017e2bd2">书籍-JavaScript框架设计(第2版)</a></li><li><a href="https://amazon.cn/gp/product/B01264FOY4/ref=as_li_tl?ie=UTF8&tag=misigou-23&camp=536&creative=3200&linkCode=as2&creativeASIN=B01264FOY4&linkId=6e4c99db0316d3e399627e805b71a23d">书籍-JavaScript函数式编程</a></li></ul><h2 id="JavaScript其他整理"><a href="#JavaScript其他整理" class="headerlink" title="JavaScript其他整理"></a>JavaScript其他整理</h2><ul><li><a href="https://github.com/youyudehexie/node123">node.js中文资料导航</a></li><li><a href="https://github.com/zhubangbang/zhubangbang-javascript-notes">朱邦邦的JavaScript学习笔记</a></li><li><a href="https://github.com/hevin-lee/-----">前端资料大全资源教程-综合类</a></li><li><a href="https://github.com/lengxing/JavaScript-material-collection">长期搜集一些关于 JavaScript 的资料</a></li><li><a href="https://github.com/appleappleapple/AngularJsLearning">AngularJs学习资料、包括技术博客、教程、第三方插件、工具</a></li><li><a href="https://github.com/MrYangPan/jstraining/blob/master/docs/history.md">前端开发的历史和趋势</a></li><li><a href="https://github.com/Jasonwang911/js-designer">大前端学习资料汇总，激励自己一下</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;JavaScript知识&quot;&gt;&lt;a href=&quot;#JavaScript知识&quot; class=&quot;headerlink&quot; title=&quot;JavaScript知识&quot;&gt;&lt;/a&gt;JavaScript知识&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3school.com.cn/js/&quot;&gt;JavaScript 教程 - w3school&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000&quot;&gt;JavaScript教程 - 廖雪峰&lt;/a&gt;</summary>
    
    
    
    <category term="前端学习" scheme="https://www.carryone.top/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="JavaScript" scheme="https://www.carryone.top/tags/JavaScript/"/>
    
    <category term="前端学习" scheme="https://www.carryone.top/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>前端工程师必备书籍清单</title>
    <link href="https://www.carryone.top/2022/01/23/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%BF%85%E5%A4%87%E4%B9%A6%E7%B1%8D%E6%B8%85%E5%8D%95/"/>
    <id>https://www.carryone.top/2022/01/23/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%BF%85%E5%A4%87%E4%B9%A6%E7%B1%8D%E6%B8%85%E5%8D%95/</id>
    <published>2022-01-23T05:39:00.000Z</published>
    <updated>2022-01-23T05:40:17.405Z</updated>
    
    <content type="html"><![CDATA[<ul><li>大致分为以下7大系列：CSS系列、DOM系列、JavaScript基础系列、JavaScript应用系列、JavaScript进阶系列、<br>JQuery类库系列、MVVM框架系列、HybirdApp系列、ES6+系列、前端工程化系列。这些书籍在这里免费提供下载，有兴趣的一起学习。<a id="more"></a></li></ul><h2 id="DOM系列"><a href="#DOM系列" class="headerlink" title="DOM系列"></a>DOM系列</h2><ul><li>《DOM启蒙》</li><li>《JavaScript+DOM编程艺术（第2版）》 </li><li>《HTML5秘籍 (第2版)》</li><li>《响应式Web设计 HTML5和CSS3实战 (第2版)》 </li><li>《HTML5_Canvas详解》</li></ul><h2 id="CSS系列"><a href="#CSS系列" class="headerlink" title="CSS系列"></a>CSS系列</h2><ul><li>《CSS 权威指南（第3版）》 </li><li>《精通CSS：高级 Web 标准解决方案（第2版）》 </li><li>《CSS彻底设计研究》 </li><li>《前端CSS世界》 </li></ul><h2 id="JavaScript基础系列"><a href="#JavaScript基础系列" class="headerlink" title="JavaScript基础系列"></a>JavaScript基础系列</h2><ul><li>《学习JavaScript数据结构与算法（第2版）》 </li><li>《JavaScript忍者秘籍PDF》 </li><li>《JavaScript语言精粹》 </li><li>《编写可维护的JavaScript》 </li><li>《超实用的JavaScript代码段》 </li><li>《深入理解JavaScript》 </li><li>《你不知道的JavaScript》上中下卷</li><li>《JavaScript异步编程》</li></ul><h2 id="JavaScript应用系列"><a href="#JavaScript应用系列" class="headerlink" title="JavaScript应用系列"></a>JavaScript应用系列</h2><ul><li>《JavaScriptWeb应用开发》 </li><li>《基于MVC的JavaScript Web富应用开发》 </li><li>《单页Web应用：JavaScript从前端到后端》 </li><li>《移动WEB前端高级开发实践》 </li></ul><h2 id="JavaScript进阶系列"><a href="#JavaScript进阶系列" class="headerlink" title="JavaScript进阶系列"></a>JavaScript进阶系列</h2><ul><li>《JavaScript高级程序设计（第3版）》 </li><li>《JavaScript权威指南(第6版)》 </li><li>《JavaScript设计模式》 </li><li>《JavaScript框架设计》 </li><li>《JS函数式编程》 </li><li>《第三方JavaScript编程》 </li></ul><h2 id="JQuery类库系列"><a href="#JQuery类库系列" class="headerlink" title="JQuery类库系列"></a>JQuery类库系列</h2><ul><li>《锋利的jQuery（第2版）》 </li><li>《jQuery技术内幕》 </li><li>《扩展jQuery》 </li></ul><h2 id="MVVM框架系列"><a href="#MVVM框架系列" class="headerlink" title="MVVM框架系列"></a>MVVM框架系列</h2><ul><li>《Vue.js权威指南》 </li><li>《Vue.js实战》 </li><li>《深入浅出React和Redux》 </li><li>《React Native 精解与实战》 </li><li>《Angular权威教程》 </li></ul><h2 id="HybirdApp系列"><a href="#HybirdApp系列" class="headerlink" title="HybirdApp系列"></a>HybirdApp系列</h2><ul><li>《从点子到App - 用ionic构建混合移动应用》</li><li>《React Native移动开发实战》</li></ul><h2 id="ES6-系列"><a href="#ES6-系列" class="headerlink" title="ES6+系列"></a>ES6+系列</h2><ul><li>《JavaScript ES6函数式编程入门经典》</li><li>《es6标准入门第3版》</li></ul><h2 id="前端工程化系列"><a href="#前端工程化系列" class="headerlink" title="前端工程化系列"></a>前端工程化系列</h2><ul><li>《现代前端技术解析 (前端知识体系与架构思维解析)》</li><li>《前端架构：从入门到微前端》</li><li>《移动Web前端高效开发实战：HTML5+CSS3+JavaScript+Webpack+React Native+Vue.js+Node.js》</li></ul><h2 id="Node-js系列"><a href="#Node-js系列" class="headerlink" title="Node.js系列"></a>Node.js系列</h2><ul><li>《深入浅出Node.js》</li><li>《Node与Express开发》</li><li>《Node.js调试指南》</li><li>《Node.js设计模式》</li></ul><h2 id="附加系列"><a href="#附加系列" class="headerlink" title="附加系列"></a>附加系列</h2><ul><li>《WebKit技术内幕》</li><li>《HTTP权威指南》</li><li>《Nginx高性能web服务器详解》</li><li>《微服务设计》</li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;大致分为以下7大系列：CSS系列、DOM系列、JavaScript基础系列、JavaScript应用系列、JavaScript进阶系列、&lt;br&gt;JQuery类库系列、MVVM框架系列、HybirdApp系列、ES6+系列、前端工程化系列。这些书籍在这里免费提供下载，有兴趣的一起学习。</summary>
    
    
    
    <category term="前端学习" scheme="https://www.carryone.top/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="前端学习" scheme="https://www.carryone.top/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript基础语法学习笔记01</title>
    <link href="https://www.carryone.top/2022/01/23/Untitled/"/>
    <id>https://www.carryone.top/2022/01/23/Untitled/</id>
    <published>2022-01-23T05:13:00.000Z</published>
    <updated>2022-01-23T06:14:35.787Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JS的书写位置"><a href="#JS的书写位置" class="headerlink" title="JS的书写位置"></a>JS的书写位置</h3><p>与CSS类似，可以写在多个位置</p><ol><li>行内式，也就是直接写在元素的内部（不建议使用）</li><li>内嵌式，写在<head>元素中（学习时常用）</li><li>外部式，即将代码写在外部的.js文件中（JS代码量大时使用）<a id="more"></a></li></ol><h3 id="JS的注释"><a href="#JS的注释" class="headerlink" title="JS的注释"></a>JS的注释</h3><p>和c、c++相同</p><ol><li>// 单行注释，快捷键ctrl + /</li><li>/**/ 多行注释，快捷键shift + alt + a</li></ol><h3 id="JS常用输入输出语句"><a href="#JS常用输入输出语句" class="headerlink" title="JS常用输入输出语句"></a>JS常用输入输出语句</h3><ul><li>prompt(info)，浏览器弹出的输入框</li><li>alert(msg)，浏览器弹出的警示框，可输出信息</li><li>console.log(msg)，用于控制台打印信息</li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="变量的本质"><a href="#变量的本质" class="headerlink" title="变量的本质"></a>变量的本质</h3><p>变量是程序在内存中申请的一块用于存放数据的空间 </p><h3 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h3><ol><li><p>声明变量</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>给变量赋值</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">name <span class="token operator">=</span> <span class="token string">'Kobe'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>声明变量时初始化</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'Kobe'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>同时声明多个变量</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">'Kobe'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="变量命名规范"><a href="#变量命名规范" class="headerlink" title="变量命名规范"></a>变量命名规范</h3><ul><li>变量名必须有意义</li><li>由字母、数字、下划线和$组成</li><li>不能以数字开头</li><li>不能是关键字或保留字</li><li>遵循驼峰命名法</li></ul><h2 id="JS数据类型"><a href="#JS数据类型" class="headerlink" title="JS数据类型"></a>JS数据类型</h2><p>JS是动态语言，不需要提前声明变量的类型，这意味着同一个变量可以用作不同的类型</p><p>JS的数据类型分为两类</p><ul><li>简单数据类型（Number、String、Boolean、Undefined、Null）</li><li>复杂数据类型（Object）</li></ul><h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><p>数字型，包含整型和浮点型，默认值为0</p><h4 id="特殊值"><a href="#特殊值" class="headerlink" title="特殊值"></a>特殊值</h4><ul><li>Infinity，无穷大</li><li>-Infinity，无穷小</li><li>NaN，Not a Number，表示一个非数值</li></ul><h4 id="相关方法"><a href="#相关方法" class="headerlink" title="相关方法"></a>相关方法</h4><ul><li>isNaN()，用来判断非数字，返回值为Boolean类型</li></ul><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>字符串，默认为一个空的字符串</p><p>单引号和双引号在语法上都成立，不过由于HTML标签中的属性使用的是双引号，所以推荐对JS使用单引号</p><h4 id="转义符"><a href="#转义符" class="headerlink" title="转义符"></a>转义符</h4><ul><li>\n，换行</li><li>\\，表示单个\</li><li>\‘，’ 单引号</li><li>\“，” 双引号</li><li>\t，tab缩进</li><li>\b，blank空格</li></ul><h4 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h4><p>通过字符串的length属性来获取字符串的长度</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">'Hello, world!'</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//显示13</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h4><p>通过 + 进行拼接</p><p>字符串 + 任意类型数据 = 新字符串，拼接前会把其他类型转换成字符串类型，然后进行拼接</p><p>字符串常与变量进行拼接</p><h3 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h3><p>布尔类型，true(1) &amp; false(0)，默认值为false</p><p>布尔类型和数字型相加时，实际参与的true的值为1，false的值为0</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flag <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果为2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Undefined"><a href="#Undefined" class="headerlink" title="Undefined"></a>Undefined</h3><p>当声明了一个变量但是没有对其赋值时，变量值为Undefined</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> str<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果为undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>undefined类型与数字型相加时，结果为NaN</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> variable <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>variable <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//NaN</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>variable <span class="token operator">+</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//NaN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h3><p>空类型与数字型相加时，结果等于数字型的值</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> variable <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>variable <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>variable <span class="token operator">+</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="获取变量数据类型"><a href="#获取变量数据类型" class="headerlink" title="获取变量数据类型"></a>获取变量数据类型</h3><p>利用typeof来获取数据所属类型</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果为number</span><span class="token keyword">var</span> tim <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>tim<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果为object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><h4 id="转换成字符串类型"><a href="#转换成字符串类型" class="headerlink" title="转换成字符串类型"></a>转换成字符串类型</h4><p>toString()</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>String()强制转换</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>隐式转换，通过加号拼接得到字符串</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token string">'string'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="转换成数字型"><a href="#转换成数字型" class="headerlink" title="转换成数字型"></a>转换成数字型</h4><p>parseInt(string)函数，将字符串转换成整数类型</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'3.14'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//取整，结果为3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'120px'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//去除px，结果为120</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'rem120px'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//NaN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>parseFloat(string)函数，将字符串转换成浮点数类型</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//与parseInt()类似，只不过转换浮点数时不会取整</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">'3.14'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//结果为3.14</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">'120px'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//去除px，结果为120</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">'rem120px'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//NaN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Number()强制转换</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//数字类型的123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>隐式转换，利用算术运算 - * /实现</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'12'</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//11</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'123'</span> <span class="token operator">-</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//122</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'123'</span> <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="转换成布尔型"><a href="#转换成布尔型" class="headerlink" title="转换成布尔型"></a>转换成布尔型</h4><p>Boolean()函数，将其他类型转换成布尔类型</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//代表空、否定的值会被转换成false，其余的值转换成true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;JS的书写位置&quot;&gt;&lt;a href=&quot;#JS的书写位置&quot; class=&quot;headerlink&quot; title=&quot;JS的书写位置&quot;&gt;&lt;/a&gt;JS的书写位置&lt;/h3&gt;&lt;p&gt;与CSS类似，可以写在多个位置&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;行内式，也就是直接写在元素的内部（不建议使用）&lt;/li&gt;
&lt;li&gt;内嵌式，写在&lt;head&gt;元素中（学习时常用）&lt;/li&gt;
&lt;li&gt;外部式，即将代码写在外部的.js文件中（JS代码量大时使用）</summary>
    
    
    
    <category term="JavaScript" scheme="https://www.carryone.top/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://www.carryone.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>CSS样式：导航栏</title>
    <link href="https://www.carryone.top/2022/01/21/CSS%E6%A0%B7%E5%BC%8F%EF%BC%9A%E5%AF%BC%E8%88%AA%E6%A0%8F/"/>
    <id>https://www.carryone.top/2022/01/21/CSS%E6%A0%B7%E5%BC%8F%EF%BC%9A%E5%AF%BC%E8%88%AA%E6%A0%8F/</id>
    <published>2022-01-21T07:09:00.000Z</published>
    <updated>2022-01-21T07:24:50.115Z</updated>
    
    <content type="html"><![CDATA[<p>易用的导航对于任何网站都很重要。<br>通过使用 CSS，您可以将无聊的 HTML 菜单转换为美观的导航栏。</p><a id="more"></a><p><strong>HTML:</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;head&gt;    &lt;title&gt;carryon e.top&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;    &lt;header&gt;        &lt;div class&#x3D;&quot;main-nav&quot;&gt;            &lt;ul&gt;                &lt;li&gt;&lt;a class&#x3D;&quot;active&quot; href&#x3D;&quot;#&quot;&gt;首页&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;第二页&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;第三页&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;第四页&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;第五页&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;            &lt;&#x2F;ul&gt;        &lt;&#x2F;div&gt;    &lt;&#x2F;header&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>CSS:</strong></p><pre class="line-numbers language-none"><code class="language-none">header .main-nav&#123;       height: 60px;       margin-top: 20px;       background-color: rgb(48, 47, 47);   &#125;   header .main-nav ul&#123;       width: 1024px;       height: 60px;       margin:0 auto;   &#125;   header .main-nav ul li&#123;       float: left;       list-style-type: none;       width: 128px;       text-align: center;       line-height: 60px;       border-right: 3px solid rgb(63, 60, 60);   &#125;   header .main-nav ul li a&#123;       text-decoration: none;       color: white;       display: block;        width: 132px;        height: 60px;   &#125;   header .main-nav ul li a:hover&#123;       background-color: black   &#125;   .active&#123;       background-color: black;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>最终效果:</strong></p><p><img src="/img/CSS/css-1%E5%AF%BC%E8%88%AA%E6%A0%8F.png" alt="overwrote existing file"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;易用的导航对于任何网站都很重要。&lt;br&gt;通过使用 CSS，您可以将无聊的 HTML 菜单转换为美观的导航栏。&lt;/p&gt;</summary>
    
    
    
    <category term="CSS" scheme="https://www.carryone.top/categories/CSS/"/>
    
    
    <category term="CSS" scheme="https://www.carryone.top/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Node.js是什么？</title>
    <link href="https://www.carryone.top/2022/01/18/Node-js%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
    <id>https://www.carryone.top/2022/01/18/Node-js%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/</id>
    <published>2022-01-18T12:54:00.000Z</published>
    <updated>2022-01-18T13:02:38.949Z</updated>
    
    <content type="html"><![CDATA[<p>Node.js 不是一门新的编程语言，也不是一个 JavaScript 框架，它是一套 JavaScript 运行环境，用来支持 JavaScript 代码的执行。用编程术语来讲，Node.js 是一个 JavaScript 运行时（Runtime）。</p><a id="more"></a><p>在 Node.js 之前，JavaScript 只能运行在浏览器中，作为网页脚本使用，为网页添加一些特效，或者和服务器进行通信。有了Node.js以后，JavaScript 就可以脱离浏览器，像其它编程语言一样直接在计算机上使用，想干什么就干什么，再也不受浏览器的限制了。</p><p><strong>运行时是什么？</strong></p><p>所谓运行时，就是程序在运行期间需要依赖的一系列组件或者工具；把这些工具和组件打包在一起提供给程序员，程序员就能运行自己编写的代码了。</p><p>对于 JavaScript 来说，它在运行期间需要依赖以下组件：</p><ol><li><p>解释器<br>JavaScript 是一种脚本语言，需要一边解释一边运行，用到哪些源代码就编译哪些源代码，整个过程由解释器完成。没有解释器的话，JavaScript 只是一堆纯文本文件，不能被计算机识别。</p></li><li><p>标准库<br>我们在 JavaScript 代码中会调用一些内置函数，这些函数不是我们自己编写的，而是标准库自带的。</p></li><li><p>本地模块<br>所谓本地模块，就是已经被提前编译好的模块，它们是二进制文件，和可执行文件在内部结构上没有什么区别，只是不能单独运行而已。这些本地模块其实就是动态链接库（在 Windows 下是 .dll 文件），如果你使用过C语言、C++ 等编译型语言，那你应该能够更好地理解它。</p></li></ol><p>JavaScript 的很多功能都需要本地模块的支持，比如：</p><pre><code>• Cookie 用于存储少量的用户数据，它是用户计算机上的一种小文件，使用 Cookie 必须有文件操作模块的支持。• Ajax 可以借助互联网从服务器请求数据，这是一种网络操作，必须有网络库的支持。• 一步一步跟踪代码的执行流程，从中发现逻辑错误，这个过程叫做调试，需要有调试器（Debugger）的支持。• JavaScript 可以操作 HTML，这需要 HTML 解析模块提前构建起 DOM 树。本地模块一般封装了通用功能，对性能要求较高，所以通常使用编译型语言来实现，比如C语言、C++、汇编语言等。</code></pre><p>JavaScript 解释器需要本地模块的支持，标准库在编写时也会调用本地模块的接口，而我们编写的 JavaScript 代码一般不会直接使用本地模块，所以 Web 前端程序员触及不到它们。</p><p>解释器、标准库、本地模块等各种组件/工具共同支撑了 JavaScript 代码的运行，它们统称为 JavaScript 运行时。</p><p>在 Node.js 之前，JavaScript 运行时被绑定在浏览器中，作为浏览器的各种模块出现。这意味着，要想运行 JavaScript 代码就必须启动浏览器，JavaScript 逃不出浏览器的手掌心，它的功能受到很大的限制，只能作为网页脚本使用。</p><p>Node.js的诞生<br>谷歌公司在 Chrome 浏览器中集成了一种名为“V8”的 JavaScript 引擎（也即 JavaScript 解释器），它能够非常快速地解析和执行 JavaScript 代码。</p><p>V8 引擎使用 C++ 语言编写，可以独立运行，也可以嵌入到任何其它 C++ 程序中。谷歌公司将 V8 引擎甚至整个 Chrome 浏览器都开源了，任何人都可以免费地将 V8 应用到自己的项目中。</p><p>V8 引擎的强大，以及当年 JavaScript 的火爆，使得一名叫 Ryan Dahl 的程序员动起了“歪心思”，他希望在浏览器之外再为 JavaScript 构建一个运行时，让 JavaScript 能够直接在计算机上运行，这样 JavaScript 就能像 Python、Ruby、PHP 等其它脚本语言一样大展宏图，不必再受限于浏览器，只能做一些小事情。</p><p>Ryan Dahl 和他的团队真的做到了，并且做得很好，他们将这套独立的 JavaScript 运行时命名为 Node.js；为了避免被误认为是 JavaScript 框架，现在也经常简称为 Node。</p><p>Node.js 的组成<br>Node.js 运行时主要由 V8 引擎、标准库和本地模块组成，尤其是本地模块的多少，从底层决定了 Node.js 功能的强弱。</p><ol><li>V8 引擎<br>V8 引擎就是 JavaScript 解释器，它负责解析和执行 JavaScript 代码。<br>V8 引擎借鉴了 Java 虚拟机和 C++ 编译器的众多技术，它将 JavaScript 代码直接编译成原生机器码，并且使用了缓存机制来提高性能，这使得 JavaScript 的运行速度可以媲美二进制程序。</li><li>本地模块<br>Node.js 集成了众多高性能的开源库，它们使用 C/C++ 语言实现，比如：</li></ol><p><img src="/img/JavaScript1/js-2-1.png" alt="overwrote existing file"></p><p>Node.js 直接在计算机上运行 JavaScript 代码，并且要赋予 JavaScript 强大的能力，所以它的本地模块和浏览器中的运行时有很多大区别，甚至说几乎没有什么关联。Node.js 几乎完全抛弃了浏览器，自己从头构建了一套全新的 JavaScript 运行时。<br>3) 标准库<br>本地模块使用 C/C++ 编写，而 Node.js 面向 JavaScript 开发人员，所以必须要封装本地模块的 C/C++ 接口，提供一套优雅的 JavaScript 接口给开发人员，并且要保持接口在不同平台（操作系统）上的一致性。</p><p>这套 JavaScript 接口，就是 Node.js 标准库。标准库是否优雅和强大，决定了 Node.js 的易用性，直接影响 Node.js 的市场表现。</p><p>总结<br>Node.js 是一个 JavaScript 运行时，它让 JavaScript 脱离了浏览器环境，可以直接在计算机上运行，极大地拓展了 JavaScript 用途。我们应该将 JavaScript 和 Python、Java、Ruby 等其它编程语言同等对待，不能再将它视为一种“小玩意”。</p><p><strong>最后我们来汇总一下 JavaScript 和 Node.js 的历史：</strong></p><pre><code>• Netscape 浏览器衍生出了 JavaScript 脚本，赋予网页编程能力；• Chrome 浏览器衍生了 V8 引擎，提高了 JavaScript 性能；• V8 引擎构建了 Node.js，拓展了 JavaScript 的编程能力；• Node.js 衍生了 Libuv 库，给网络开发增加了一款优秀的工具。</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;Node.js 不是一门新的编程语言，也不是一个 JavaScript 框架，它是一套 JavaScript 运行环境，用来支持 JavaScript 代码的执行。用编程术语来讲，Node.js 是一个 JavaScript 运行时（Runtime）。&lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://www.carryone.top/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://www.carryone.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>DAY04  笔记</title>
    <link href="https://www.carryone.top/2022/01/16/DAY04-%E7%AC%94%E8%AE%B0/"/>
    <id>https://www.carryone.top/2022/01/16/DAY04-%E7%AC%94%E8%AE%B0/</id>
    <published>2022-01-16T05:12:00.000Z</published>
    <updated>2022-01-16T05:24:14.640Z</updated>
    
    <content type="html"><![CDATA[<p>1、开发第一个Java程序：HelloWorld<br>    1.1、程序写完之后，一定要Ctrl + S 进行保存<br>        ⚠另外需要注意的是：Java源代码只要修改，必须重新编译。<br>        重新生成.class字节码文件。<br>    <a id="more"></a><br>    1.2、编译阶段<br>        怎么编译？使用什么命令？这个命令怎么用？<br>        需要使用的命令是：javac.exe（存放在C盘的Java目录里）<br>        这个命令需要先测试一下，打开DOS命令窗口，看看javac命令是否可用。</p><pre><code>    测试javac后发现windows找不到文件在哪？        配置path环境变量。        配置path环境变量的步骤：            桌面计算机上右键- -&gt;属性- -&gt;高级系统设置- -&gt;环境变量        让javac.exe能用，配置哪个路径到path中？            找到javac.exe的文件路径复制到path变量里。⚠注意：修改完环境变量后，DOS命令窗口必须关闭重新打开才会起作用。java命令怎么用？    语法格式：        javac java源文件的路径什么是java源文件？    java源文件的名字是以“.java”结尾，该文件中写了java源代码。    ○ java源文件的路径：直接把Java源文件拖入DOS命令窗口就出现java源文件的路径。    ○ 在java源文件上方的路径里输入cmd即可帮助cmd快速定位到java源文件路径。1.3、运行阶段    运行的前提是：class文件（字节码）生成了。没有字节码文件程序是无法运行的。        假设该文件的名字叫做：HelloWorld.class        那么HelloWorld就称为一个类名。    怎么运行？使用哪个命令？        使用JDK的bin目录下的：javac.exe命令来运行。    先在DOS命令窗口中测试javac.exe命令是否可以使用。        Java -version    &quot;java.exe“这个命令怎么用，语法格式是什么？？        格式：Java + 空格 +类名    运行java程序需要哪些步骤？        第一步：先使用cd命令切换到xxx.class文件所在的路径。            或者在文件所在路径输入cmd定位。        第二步：执行java 类名            切记：Java命令后面只要是跟路径，就一定不行，只能是跟类名。</code></pre><p>2、“java HelloWorld”的执行过程及原理</p><pre><code>C:\Users\Carry\Desktop\JAVA&gt;java java1 敲完回车后发生什么？    第一步：会先启动JVM（java虚拟机）    第二步：JVM启动之后，JVM会去启动&quot;类加载器classloader“        类加载器的作用：加载类的，本质上类加载器负责去找“类”对应的“字节码”文件。        假设是“java HelloWorld”，那么类加载器会去硬盘上搜索：HelloWorld.class文件。        假设是“java test”，那么类加载器会去硬盘上搜索：test.class文件。    类加载器如果在硬盘上找不到对应的字节码文件的话会报错，报错什么内容？            错误：找不到或无法加载主类        类加载器如果在硬盘上找到了对应的字节码文件，类加载器会将该字节码文件装载到JVM当中，JVM启动“解释器”将字节码解释为“10101011…”这种的二进制码，操作系统执行二进制码和硬件交互。问题1：默认情况下，类加载器去硬盘哪里找对应的字节码文件？    Java 类目执行后，类加载器会在当前路径下找对应的字节码文件加载。问题2：能不能给类加载器指定一个路径，让类加载器去指定的路径下加载字节码文件？    可以的，但我们要设置一个环境变量，叫做：class.path。问题3：class.path是一个环境变量，是给谁指路的？    是给“类加载器”指路的。    classpath环境变量不属于windows，classpath环境变量隶属于java。    在没有配置环境变量的classpath的时候，默认从但前路径下加载。    如果配置了classpath环境变量之后，只能去指定的路径下加载了。    ⚠非常重要的一个特点：配置了classpath=D:\xxxx目录之后，类加载器只会去xxxx目录找对应的字节码文件。        classpath环境变量不需要配置，到JavaWeb时才需要配置classpath环境变量。</code></pre><p>3、在高版本的JDK当中，有这样一个特性，可以一步到位：<br>    Java x\z\y.java<br>    java后面加源文件的路径。<br>    这个特性是为了简化开发而提出，但实际上底层的实现原理还是和以前一样的，以上命令在执行过程中，还是会先进行编译，然后再运行。<br>    并且以上的运行方式，编译生成的class文件在硬盘上不存在，看不见。</p><p>4、关于第一个Java程序代码的解释说明（注释）：<br>    注释在程序中不起作用，只是对程序进行解释说明。<br>    /* 1、什么是注释，有什么用？<br>        注释是对Java源代码的解释说明<br>        注释可以帮程序员更好地理解程序<br>    2、注释信息只保存在Java源文件当中，Java源文件编译生成的字节码class文件中是没有注释信息的<br>    3、程序员应有良好的写注释习惯。<br>    4、另外这种注释可以注释多行内容。 */</p><pre><code>// 这种是单行注释，只注释两个斜杠后面的内容。</code></pre><p>5、⚠注意：<br>    1、在JAVA中任何有效的代码必须写到“类体”当中，最外层必须是一个类的定义。<br>    2、public表示公开的，class表示定义一个类，Test是一个类名。类名后面必须是一对大括号，这一对大括号被称为“类体”<br>    3、括号必须是成对的。并且建议都要成对编写，这样才不会丢掉。{}、[]、()</p><p>public class Test  //声明/定义一个公开的类，起个名字叫Test<br>    {  //大括号内都是类体。<br>    //整个这一块的代码被称为：main方法（程序的入口，sun公司java语言规定的）<br>    public static void main(String[] args) {<br>    //JVM在执行程序的时候，会主动去找这样一个方法。没有这个规格的方法，程序就无法执行。<br>    //注意：方法必须放在“类体”中，不能放在“类体”外面。<br>    //注意：方法体由一行一行的java语句构成。<br>        System.out.println(“Test”);<br>    //每个语句都要以英文分号结束。<br>    //语句内容要加英文””双引号。数字可以不加双引号。<br>        System.out.println(“test2”);<br>    }<br>}<br>    大括号里有main方法可以编译运行。</p><p>1、一个java源文件可以定义多个class。<br>2、public的类不是必须的。<br>3、在源文件中只要有一个class的定义，那么必然就会生成一个对应的class文件。<br>4、 public的类可以没有，但是如果又public修饰的类名必须和源文件名保持一致。<br>5、public的类有且只能有一个。<br>6、测试想从哪个入口进去执行，就加载哪个类：java 类名。</p><p>常见错误：<br>1、没有定义则编译报错：找不到符号。<br>2、找不带文件<br>3、单词拼写问题<br>4、括号匹配问题<br>5、中英文问题</p><p>程序解析：<br>• 首先编写java源代码程序，扩展名.java<br>• 在命令行模式中，输入javac命令对源代码进行编译，生成字节码文件<br>    • javac 源文件名.java<br>• 编译完成后，如果没有报错信息，输入java命令对class字节码文件进行解释运行,执行时不需要添加.class扩展名<br>    • java HelloWorld</p><p>初学者编程应养成习惯：先将思路用注释方式写出来再进行编程。</p><p>练习题：</p><p><img src="/img/DAY04-1.png" alt="overwrote existing file"></p><p>作业1：</p><p><img src="/img/day04-2.png" alt="upload successful"></p><p>作业2：</p><p><img src="/img/day04-3.png" alt="upload successful"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;1、开发第一个Java程序：HelloWorld&lt;br&gt;    1.1、程序写完之后，一定要Ctrl + S 进行保存&lt;br&gt;        ⚠另外需要注意的是：Java源代码只要修改，必须重新编译。&lt;br&gt;        重新生成.class字节码文件。&lt;br&gt;</summary>
    
    
    
    <category term="动力节点JavaSE" scheme="https://www.carryone.top/categories/%E5%8A%A8%E5%8A%9B%E8%8A%82%E7%82%B9JavaSE/"/>
    
    
    <category term="JavaSE" scheme="https://www.carryone.top/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>DAY03 笔记</title>
    <link href="https://www.carryone.top/2022/01/16/DAY03-%E7%AC%94%E8%AE%B0/"/>
    <id>https://www.carryone.top/2022/01/16/DAY03-%E7%AC%94%E8%AE%B0/</id>
    <published>2022-01-16T04:39:00.000Z</published>
    <updated>2022-01-16T04:46:08.391Z</updated>
    
    <content type="html"><![CDATA[<p>1、Java语言的特性</p><a id="more"></a><pre><code>1.1、简单性    在Java语言当中真正操作内存的是：JVM（Java虚拟机）    所有的java程序都是运行在Java虚拟机当中的。    而Java虚拟机执行过程中再去操作内存。    对于C或者C++来说程序员都是可以直接通过指针操作内存的。    C或者C++更灵活，可以直接程序员操作内存，但是要求程序员技术精湛。    C语言或者C++更有驾驭感。    Java语言屏蔽了指针概念，程序员不能直接操作指针，或者说程序员    不能直接操作内存。这种方式有优点也有缺点：        优点：不容易导致内存泄漏。（简单了。）        缺点：效率问题，包括驾驭感比较差。    飞机航行：        如果是C语言表示程序员是飞机驾驶员。        如果是Java语言表示程序员是飞机上的乘客。    Java语言底层是C++，所以JVM是用C++语言写好的一个虚拟的电脑。    JVM在哪里？告诉大家，安装了JDK之后，JVM就代表安装好了。    内存是什么？        对于计算机来说：最主要的几个部件是什么？            CPU：                中央处理器，相当于人类的大脑，负责发送并执行指令。                是整个计算机的指挥官。                CPU是负责计算的，负责运算的。                10 + 20 = 30                CPU负责将30这个结果计算出来。                但是在计算过程中有三个数据需要临时找个空间存储一下：                    这三个数据分别是：10 20 30            内存：                程序运行过程当中的临时数据存储空间。                断电之后或者关机之后内存中的数据就消失了。            硬盘：                持久化设备，硬盘上的数据不会因断电而丢失。            主板：                相当于人类的躯干，是一个载体：                    CPU、内存条、硬盘等主要的部件都是放在主板上的，                    主板上有很多线，将以上的部件链接起来。            .....1.2、java是堪称完全面向对象的。    面向对象更容易让人理解，人类通常是以对象的方式认知世界的。    采用面向对象的方式可以让复杂问题简单化。1.3、健壮性    主要是因为Java中有一种机制：        自动垃圾回收机制（GC机制）。    java语言是健壮的，相对于C语言来说，C语言没有Java健壮。    Java不容易导致内存的泄漏。    C++或者C语言使用不当时很容易导致内存泄漏。    JVM负责调度GC机制。程序员不需要干涉。    以上讲解中又描述了这几个术语：        JVM（C++语言写的一个虚拟的计算机）、GC（垃圾回收机制）1.4、java完全/完美支持多线程并发。1.5、可移植性/跨平台    java语言只要编写一次，可以做到到处运行。    例如：java程序编写完之后，可以运行在windows操作系统上，    不需要做任何改动可以直接运行在Linux操作系统上，同样也    可以运行到MaC OS上面。    一次编写，到处运行。（平台改变了，程序不需要改。）    JVM这种机制实现了跨平台，那么这种机制优点和缺点分别是什么？        优点：一次编写到处运行，可以跨平台。        缺点：麻烦。对于运行java程序来说必须先有一个JVM。        就像你要想在网页上看视频，你必须先安装一个flash是一样的。    Java语言可以编写病毒吗？        可以，没问题。但是很难让用户中毒。        中毒的一般都是java程序员。所以很少有人编写java的病毒脚本。</code></pre><p>2、JDK、JRE、JVM三者之间的关系？<br>    JDK:Java开发工具箱<br>    JRE:java运行环境<br>    JVM:java虚拟机</p><pre><code>JDK包括JRE，JRE包括JVM。JVM是不能独立安装的。JRE和JDK都是可以独立安装的。有单独的JDK安装包。也有单独的JRE安装包。没有单独的JVM安装包。安装JDK的时候：JRE就自动安装了，同时JRE内部的JVM也就自动安装了。安装JRE的时候：JVM也就自动安装了。问题：    假设你在软件公司开发了一个新的软件，现在要去客户那边给客户把    项目部署一下，把项目跑起来，你需要安装JDK吗？        只需要安装JRE就行了。        JRE体积很小，安装非常便捷快速。问题：    为什么安装JDK的时候会自带一个JRE？        因为java程序员开发完程序之后，要测试这个程序，        让这个程序运行起来，需要JRE。所以JDK安装的时候        内部自带一个JRE。</code></pre><p>3、到目前为止，我们接触过的重点术语，总结一下：</p><pre><code>Java体系的技术被划分为三大块：    JavaSE：标准版    JavaEE：企业版    JavaME：微型版安装JDK之后：    JDK：java开发工具箱    JRE：Java运行环境    JVM：Java虚拟机</code></pre><p>4、对Java的加载与执行的理解（理论比较重要）<br>    java程序从编写到最终运行经历了哪些过程？？？？</p><pre><code>java程序非常重要的两个阶段：    编译阶段    运行阶段注意：java程序员直接编写的java代码（普通文本）是无法执行被JVM识别的。java程序员编写的java代码这种普通文本必须经过一个编译，将这个“普通文本代码”变成“字节码”，JVM能够识别“字节码”。java代码这种普通文本变成字节码的过程，被称为：编译。java代码这种普通文本被称为：java源代码。（你编写的代码是源代码）源代码不能直接执行，需要先进行编译，生成源代码对应的“字节码”JVM可以识别的是字节码。编译阶段和运行阶段可以在不同的操作系统上完成吗？    在windows上编译    编译之后生成了“字节码”    把“字节码”放到linux上运行    完全可以，因为Java是跨平台的。    可以做到一次编写到处运行。java源代码一旦编译之后，源代码可以删除吗？只留下字节码可以执行吗？    完全可以执行，因为源代码不参与程序的执行过程。    参与程序执行过程的是字节码。    但是最好不要删除源代码。因为有可能执行结果不是你需要的，    当执行结果不是你需要的时候，你可以重新打开源代码进行修改，    然后重新编译生成新的字节码，再重新执行。这样会有新的执行效果。放源代码的文件扩展名必须是：xxx.java并且需要注意的是：编译生成的字节码文件扩展名是：xxx.class没有为什么，死记硬背吧！！！！.java文件就是源文件，这个文件中编写源代码。.class文件就是字节码文件，这个文件是编译源代码而得到的。另外需要注意的是：    1个java源文件是可以编译生成多个class文件的。    最终运行的是class文件。问题：字节码文件是二进制文件吗？    字节码文件不是二进制文件。    如果是二进制的话，就不需要JVM了。    因为操作系统可以直接执行二进制。java程序从开发到最终运行经历了什么？    编译期：（可以在windows上）        第一步：在硬盘的某个位置（随意），新建一个xxx.java文件        第二步：使用记事本或者其它文本编辑器例如EditPlus打开xxx.java文件        第三步：在xxx.java文件中编写“符合java语法规则的”源代码。        第四步：保存（一定要将xxx.java文件保存一下）        第五步：使用编译器（javac【JDK安装后自带】）对xxx.java文件进行编译。        第六步：如果xxx.java文件中编写的源代码是符合语法规则的，编译会通过，        如果xxx.java文件中编写的源代码违背了语法规则，那么编译器会报错，编译器        报错之后class文件是不会生成的，只有编译通过了才会生成class字节码文件。        并且一个java源文件是可以生成多个class文件的。（编译实质上是检查语法）    运行期（JRE在起作用）：（可以在windows上，也可以在其他的OS上。）        第七步：如果是在Linux上运行，需要将windows上生成的class文件拷贝过去        不需要拷贝源代码，真正运行的是字节码。（但是源代码也不要删除，有用）        第八步：使用JDK自带的一个命令/工具：java（负责运行的命令/工具）执行字节码        第九步：往下的步骤就全部交给JVM了，就不需要程序员干涉了。        JVM会将字节码文件装载进去，然后JVM对字节码进行解释（解释器负责将字节码        解释为1010101010..等的二进制）        第十步：JVM会将生成的二进制码交给OS操作系统，操作系统会执行二进制码和        硬件进行交互。注意：在以上的过程中，需要使用两个非常重要的命令？    javac 命令，负责编译    java 命令，负责运行小插曲：    xxx.java源文件经过编译之后生成了A.class、B.class、C.class等文件，    那么我们称A是一个类、B是一个类、C是一个类。其中A、B、C是类的名字。    没有为什么，死记硬背，SUN公司的java语法就是这么规定的。    A/B/C是类的名称。A类、B类、C类。源文件中编写的代码叫做：源代码。以上是一个复杂的过程，那么缩减一下，程序员到底要干啥？    新建java文件    打开java文件    写java源代码    保存    javac命令编译    java命令运行    编写、编译、运行</code></pre><p>5、编写java中的第一个java程序：HelloWorld（你好世界：问世）<br>    这个程序不需要大家理解，大家照抄就行，因为目前我也不会讲解这个程序为什么这么写。<br>    主要是为了搭建java的开发环境，测试java的环境是否能用。</p><pre><code>第一步：安装文本编辑器（EditPlus）第二步：安装JDK（先下载JDK）    安装JDK13，直接下一步就行。    JDK13安装的时候内置了一个JRE，独立于JDK之外的JRE并没有生成。    对于java13来说，如果你希望生成一个独立于JDK之外的JRE的话需要执行特殊的命令。    这里先不讲，后期用到的时候再说。    注意的是：        JDK8安装的时候，不仅JDK内置了一个JRE，而且还会在JDK目录之外        独立的生成一个单独的JRE。（以前低版本的时候，JRE实际上是有2个。）        一个是JDK内置的，一个是独立于JDK之外的。    JDK的bin目录下有：        javac.exe 负责编译        java.exe 负责运行第三步：写代码    写一下第一个程序HelloWorld。    这个代码在此强调：        文件名照抄        文件内容代码严格照抄        照抄大小写        照抄任何一个环节        照抄标点符号        不要问为什么。        后面会解释。        括号：            []            ()            &#123;&#125;            都要成对写。第四步：编译第五步：运行</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;1、Java语言的特性&lt;/p&gt;</summary>
    
    
    
    <category term="动力节点JavaSE" scheme="https://www.carryone.top/categories/%E5%8A%A8%E5%8A%9B%E8%8A%82%E7%82%B9JavaSE/"/>
    
    
    <category term="JavaSE" scheme="https://www.carryone.top/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>DAY02 笔记</title>
    <link href="https://www.carryone.top/2022/01/16/DAY02-%E7%AC%94%E8%AE%B0/"/>
    <id>https://www.carryone.top/2022/01/16/DAY02-%E7%AC%94%E8%AE%B0/</id>
    <published>2022-01-16T04:24:00.000Z</published>
    <updated>2022-01-16T04:35:36.661Z</updated>
    
    <content type="html"><![CDATA[<p>1、Java编程语言是Sun Microsystems公司的James Gosling在1990年创建的，于1995年公布于世（一般说Java诞生于1995年）。Java是一门面向对象的编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++难以理解的多继承、指针等概念。因此Java语言具有功能强大和简单易用的两个特征。</p><a id="more"></a><p>2、JAVA语言概述及发展史<br>    JDK（Java开发工具箱，做JAVA开发必须安装的，这是最根本的一个环境。）<br>    JDK不是集成开发环境，他是Java最核心的库。<br>    前往甲骨文官网下载JDK，exe文件</p><pre><code>98年的时候：Java升级到JDK1.2，Java被分为三大块：    J2SE：标准版（基础，要学Java，必须先学习SE。基础语法+基础库）    J2EE：企业版（专门为企业开发软件，为企业提供解决方案。例如：OA办公系统和医疗服务等。）Java诞生十周年改了名字：    JavaSE    JavaEE    JavaME</code></pre><p>3、Java语言的特性：<br>    1、简单性：Java语言底层采用C++语言实现。<br>    在Java语言中真正操作内存的是：JVM（Java虚拟机）所有的java程序中都是运行在Java虚拟机当中的。<br>    对于C或者C++更灵活，可以直接程序员操作内存，但要求程序员技术精湛。<br>    Java语言屏蔽了指针概念，程序员不能直接操作指针，或者说程序员不能直接操作内存。这种方式有优点也有缺点。<br>        优点：不容易导致内存泄漏。<br>        缺点：效率问题，包括驾驶感比较差。</p><pre><code>例如飞机航行：    如果是C语言表示程序员是飞机的驾驶员。    如果是Java表示程序员是飞机上的乘客。因为Java语言的低层是C++，所以JVM是用C++语言写好的一个虚拟的电脑。计算机安装好JDK后，JVM也代表安装完毕。2、面向对象    Java是完全面向对象的。    面向对象更容易让人理解，人类通常是以对象的方式认知世界的。    采用面向对象的方式可以让复杂的问题简单化。3、健壮性    主要是因为Java中有一种机制：        自动垃圾回收机制（GC机制）。    Java不容易导致内存泄漏    JVM负责调度GC机制，程序员不需要干涉。4、可移植性/跨平台    Java语言只要编写一次，可以做到到处运行。    例如：Java程序编写完之后，可以运行在windows操作系统上， 不需要做任何改动可以直接运行在Linux操作系统上，同样也可以运行在Mac os上。    一次编写，到处运行。（平台改变了，程序不需要改变。）    跨平台性：通过Java语言编写的应用程序在不同的系统平台上都可以运行    1.1、JVM这种机制实现了跨平台，那么这种机制优点和缺点是什么？        优点：一次编写到处运行，可以跨平台。        缺点：麻烦。对于运行Java程序来说必须要有一个JVM。就像你想在网页上看视频，你必须先安装一个flash一样。    1.2、Java语言可以编写病毒吗？        可以，没问题。但是很难让用户中毒。        中毒的一般都是java程序员。所以很少有人编写java的病毒脚本。</code></pre><p>4、Java完全/完美支持多线程并发</p><p>5、JDK、JRE、JVM三者之间的关系？<br>    JDK：Java开发工具箱<br>    JRE：Java运行环境<br>    JVM：Java虚拟机</p><pre><code>JDK包括JRE，JRE包括JVMJVM不可以独立安装。JRE和JDK都是可以独立安装的。也有单独的JDK的安装包，没有单独的JVM安装包。安装JDK的时候：JRE就自动安装了，同时JRE内部的JVM也就自动安装了。安装JRE的时候：JVM也就自动安装了。问题1：    假设你在软件公司开发了一个新的软件，现在要去客户那边给客户把项目部署一下，把项目跑起来，你需要安装JDK吗？        答：只需要安装JRE就可以了，JRE体积很小，安装非常便捷快速。问题2：    为什么安装JDK的时候会带一个JRE？        答：因为Java程序员开发完程序之后，要测试这个程序。        让这个程序运行起来，需要JRE。所以安装JDK的时候内部会自带一个JRE。</code></pre><p>6、Java程序的加载与执行的理解<br>    java程序从编写到最终运行经历了两个阶段：<br>1、编译阶段<br>    2、运行阶段</p><pre><code>注意：java程序员直接编写的java代码（普通文本）是无法执行被JVM识别的。java程序员编写到的java代码这种普通文本必须经过一个编译，将这个“普通文本代码”变成“字节码”，JVM能够识别“字节码”。java代码这种普通文本变成字节码的过程，被称为：编译。java代码这种普通文本被称为：java源代码。（你编写的代码是源代码）源代码不能直接执行，需要先进行编译，生成源代码对应的“字节码”JVM可以识别的是字节码。</code></pre><p>问题1：<br>    编译阶段和运行阶段可以在不同的操作系统上完成吗？<br>        答：完全可以，因为java是可跨平台的，可以做到一次编写，到处运行。<br>        在windows上编译<br>        编译之后生成“字节码”<br>        把“字节码”放在linux上运行。</p><p>问题2：<br>    Java源代码一旦编译之后，源代码可以删除吗？只留下字节码可以执行吗？<br>        答：完全可以执行，因为源代码不参与程序的执行过程。<br>        参与程序执行过程是字节码。<br>        但是最好不要删除源代码，因为有可能执行结果不是你需要的。<br>        当执行结果不是你需要的时候，你可以重新打开源代码进行修改，然后重新编译生成新的字节码，在重新执行。这样会有新的执行效果。</p><p>7、需要注意的是：<br>    1、放源代码的文件扩展名必须是：xxx.java<br>    2、编译生成的字节码文件扩展名是：xxx.class</p><pre><code>.java文件就是源文件，这个文件中编写源代码。.class文件就是字节码文件，这个文件是编译源代码而得到的。另外注意的是：    1个java文件是可以编译生成多个class文件的。    最终运行的是class文件。</code></pre><p>问题1：<br>    字节码文件是二进制文件吗？<br>        答：字节码文件不是二进制文件。<br>        如果是二进制的话，就不需要JVM了。<br>        因为操作系统可以直接执行二进制。</p><pre><code>Java程序的加载与执行的理解    java程序从编写到最终运行经历了两个阶段：    1、编译阶段    2、运行阶段注意：java程序员直接编写的java代码（普通文本）是无法执行被JVM识别的。java程序员编写到的java代码这种普通文本必须经过一个编译，将这个“普通文本代码”变成“字节码”，JVM能够识别“字节码”。java代码这种普通文本变成字节码的过程，被称为：编译。java代码这种普通文本被称为：java源代码。（你编写的代码时源代码）源代码不能直接执行，需要先进行编译，生成源代码对应的“字节码”JVM可以识别的是字节码。</code></pre><p>JAVA程序加载与运行：<br>    Java程序员从开发到最终运行经历了什么？<br>        第一步：在硬盘的某个位置，新建一个xxx.java文件<br>        第二步：使用记事本或者其他文本编辑器打开xxx.java文件<br>        第三步：在xxx.java文件中编写“符合java语法规则的”源代码。<br>        第四步：保存（一定要将xxx.java文件保存一下）<br>        第五步：使用编译器（javac【JDK安装后自带】）对xxx.java文件进行编译。<br>        第六步：如果xxx.java文件中编写的源代码是符合语法规则的，编译会通过，如果xxx.java文件中编写的源代码违背了语法规则，那么编译器会报错，编译器报错之后class文件是不会生成的，只有编译通过了之后才会生成class字节码文件。并且一个java源文件是可以生成多个class文件的。（编译实质上是检查语法）</p><pre><code>运行期：（可以在windows上，也可以在其他的os上。）    第七步：如果实在Linux上运行，需要将windows上生成的class文件拷贝过去，不需要拷贝源代码，真正运行的是字节码。（但是源代码也不要删除，有用）    第八步：使用JDK自带的一个命名/工具：java（负责运行的命令/工具）执行字节码    第九步：往下的步骤就全部交给JVM了，就不需要程序员干涉了。        JVM会将字节码文件全部装载进去，然后JVM对字节码进行解释（解释器负责将字节码解释为1010101010..等的二进制）    第十步：JVM会将生成的二进制代码交给os操作系统，操作系统会执行二进制码和硬件进行交互。⚠注意：在以上过程中，需要使用两个重要的命令    1、javac 命令，负责编译    2、java 命令，负责运行⚠当编译不能显示中文时，输入（两种方式）：    1、javac -encoding UTF-8 ***.java    2、记事本打开java源文件，另存为选择ANSI编码⚠当编译时出现：错误: 编码 GBK 的不可映射字符 (0xBA)    输入javac  -encoding utf-8  文件名.java</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;1、Java编程语言是Sun Microsystems公司的James Gosling在1990年创建的，于1995年公布于世（一般说Java诞生于1995年）。Java是一门面向对象的编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++难以理解的多继承、指针等概念。因此Java语言具有功能强大和简单易用的两个特征。&lt;/p&gt;</summary>
    
    
    
    <category term="动力节点JavaSE" scheme="https://www.carryone.top/categories/%E5%8A%A8%E5%8A%9B%E8%8A%82%E7%82%B9JavaSE/"/>
    
    
    <category term="JavaSE" scheme="https://www.carryone.top/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>出租车计价</title>
    <link href="https://www.carryone.top/2022/01/16/%E5%87%BA%E7%A7%9F%E8%BD%A6%E8%AE%A1%E4%BB%B7-1/"/>
    <id>https://www.carryone.top/2022/01/16/%E5%87%BA%E7%A7%9F%E8%BD%A6%E8%AE%A1%E4%BB%B7-1/</id>
    <published>2022-01-15T16:14:00.000Z</published>
    <updated>2022-01-16T04:36:01.260Z</updated>
    
    <content type="html"><![CDATA[<p>根据某城市普通出租车收费标准编写程序进行车费计算。具体标准如下：</p><ul><li>起步里程为3公里，起步费10元；</li><li>超起步里程后10公里内，每公里2元；</li><li>超过10公里以上的部分加收50%的回空补贴费，即每公里3元；</li><li>营运过程中，因路阻及乘客要求临时停车的，按每5分钟2元计收（不足5分钟则不收费）。<a id="more"></a></li></ul><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h2><p>输入在一行中给出输入行驶里程（单位为公里，精确到小数点后1位）与等待时间（整数，单位为分钟），其间以空格分隔。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h2><p>在一行中输出乘客应支付的车费（单位为元），结果四舍五入，保留到元。</p><h2 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h2><blockquote><p>2.6    2</p></blockquote><h2 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h2><blockquote><p>10</p></blockquote><hr><h2 id="JavaScript代码："><a href="#JavaScript代码：" class="headerlink" title="JavaScript代码："></a>JavaScript代码：</h2><pre class="line-numbers language-handlebars" data-language="handlebars"><code class="language-handlebars">const readline =require('readline');const rl=readline.createInterface(&#123;    input:process.stdin,&#125;);let buf=[]rl.on('line',(line)=>&#123;    buf.push(line)&#125;)rl.on('close',()=>&#123;    const arr=buf[0].split(' ');    let money=10;    if(arr[0]>3&amp;&amp;arr[0]&lt;=10)&#123;        money+=(arr[0]-3) *2;    &#125;else if(arr[0]>10)&#123;        money+=7*2;        money+=(arr[0]-10) *3;    &#125;     money+=Math.floor(arr[1]/5)*2;   console.log(Math.round(money));&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;根据某城市普通出租车收费标准编写程序进行车费计算。具体标准如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;起步里程为3公里，起步费10元；&lt;/li&gt;
&lt;li&gt;超起步里程后10公里内，每公里2元；&lt;/li&gt;
&lt;li&gt;超过10公里以上的部分加收50%的回空补贴费，即每公里3元；&lt;/li&gt;
&lt;li&gt;营运过程中，因路阻及乘客要求临时停车的，按每5分钟2元计收（不足5分钟则不收费）。</summary>
    
    
    
    <category term="PTA JavaScript" scheme="https://www.carryone.top/categories/PTA-JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://www.carryone.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>DAY01:DOS命令</title>
    <link href="https://www.carryone.top/2020/08/15/DOS%E5%91%BD%E4%BB%A4/"/>
    <id>https://www.carryone.top/2020/08/15/DOS%E5%91%BD%E4%BB%A4/</id>
    <published>2020-08-15T15:35:00.000Z</published>
    <updated>2022-01-16T04:21:11.045Z</updated>
    
    <content type="html"><![CDATA[<p>1、常用DOS命令<br>    1.1、怎么打开DOS命令窗口？</p><a id="more"></a><blockquote><p><strong>win键+r（组合键）</strong>：可以打开”运行窗口”<br>在窗口文本框输入：<strong>cmd</strong><br>然后回车即可。</p></blockquote><p>1.2、什么是DOS命令呢？<br>在DOS命令窗口中才可以输入并执行DOS命令。<br>在最初的windows计算机中没有图形界面，只有DOS命令窗口。<br>也就是说通过执行DOS命令窗口可以完成文件的创建、保存、删除等一系列操作。</p><p>1.3、在DOS命令窗口中如何复制内容？</p><blockquote><p>选中内容- -&gt;按ctrl+c键复制- -&gt;在粘贴的位置点击鼠标右键<br>即可完成内容的复制粘贴</p></blockquote><p>1.4、DOS命令窗口中如何切换盘符？<br><strong>直接输入盘符即可。</strong><br>C：回车<br>D：回车<br>就🆗了。</p><p>当切换到D盘时，当前的根路径是：D:&gt;<br>当前路径就是当前所在的位置。</p><p>1.5、DOS命令窗口如何切换目录？<br>使用cd命令来完成目录的切换：cd即change directory（改变目录）<br>cd的语法格式为：</p><blockquote><p><strong>cd + 路径</strong></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200816001703606.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjYyOTkyOA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200816001758345.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjYyOTkyOA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;1、常用DOS命令&lt;br&gt;    1.1、怎么打开DOS命令窗口？&lt;/p&gt;</summary>
    
    
    
    <category term="动力节点JavaSE" scheme="https://www.carryone.top/categories/%E5%8A%A8%E5%8A%9B%E8%8A%82%E7%82%B9JavaSE/"/>
    
    
    <category term="JavaSE" scheme="https://www.carryone.top/tags/JavaSE/"/>
    
    <category term="Linux" scheme="https://www.carryone.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>在Hexo添加live2d看板娘</title>
    <link href="https://www.carryone.top/2020/08/10/Hexo%E6%B7%BB%E5%8A%A0live2d%E7%9C%8B%E6%9D%BF%E5%A8%98%E6%A8%A1%E5%9E%8B/"/>
    <id>https://www.carryone.top/2020/08/10/Hexo%E6%B7%BB%E5%8A%A0live2d%E7%9C%8B%E6%9D%BF%E5%A8%98%E6%A8%A1%E5%9E%8B/</id>
    <published>2020-08-10T06:35:00.000Z</published>
    <updated>2022-01-16T04:37:13.398Z</updated>
    
    <content type="html"><![CDATA[<p>haruto这个模型 我爱了</p><a id="more"></a><p><img src="https://img-blog.csdnimg.cn/2020081012063219.PNG" alt="在这里插入图片描述"></p><h2 id="1-首先安装npm包"><a href="#1-首先安装npm包" class="headerlink" title="1.首先安装npm包"></a>1.首先安装npm包</h2><ul><li>配置环境变量 </li><li>打开cmd.exe,输入:</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//查看版本号是否安装成功$ <span class="token function">npm</span> -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-下载hexo"><a href="#2-下载hexo" class="headerlink" title="2.下载hexo"></a>2.下载hexo</h2><ul><li>输入命令</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//下载hexo客户端$ <span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>同样环境变量</li></ul><h2 id="3-在本地新建文件myblog-作为博客资源文件夹"><a href="#3-在本地新建文件myblog-作为博客资源文件夹" class="headerlink" title="3.在本地新建文件myblog(作为博客资源文件夹)"></a>3.在本地新建文件myblog(作为博客资源文件夹)</h2><ul><li>输入命令</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//初始化刚新建的myblog文件夹$ hexo init myblog$ <span class="token builtin class-name">cd</span> blog$ hexo instal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>这时blog就会生成以下文件</li></ul><p><img src="https://img-blog.csdnimg.cn/20200810115944114.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjYyOTkyOA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="4-第一个博客出来了，我们试试运行"><a href="#4-第一个博客出来了，我们试试运行" class="headerlink" title="4.第一个博客出来了，我们试试运行"></a>4.第一个博客出来了，我们试试运行</h2><ul><li>输入命令</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//启动命令<span class="token punctuation">(</span>完整命令:hexo server<span class="token punctuation">)</span>$ hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="5-回到当前窗口myblog路径输入命令："><a href="#5-回到当前窗口myblog路径输入命令：" class="headerlink" title="5.回到当前窗口myblog路径输入命令："></a>5.回到当前窗口myblog路径输入命令：</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//下载live2d包$ <span class="token function">npm</span> <span class="token function">install</span> --save hexo-helper-live2d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>再下载模型</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//下载模型$ <span class="token function">npm</span> <span class="token function">install</span> live2d-widget-model-hibiki<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>#更多模型选择</strong></p><p>live2d-widget-model-chitose<br>live2d-widget-model-epsilon2_1<br>live2d-widget-model-gf<br>live2d-widget-model-haru/01 (use npm install –save live2d-widget-model-haru)<br>live2d-widget-model-haru/02 (use npm install –save live2d-widget-model-haru)<br>live2d-widget-model-haruto<br>live2d-widget-model-hibiki<br>live2d-widget-model-hijiki<br>live2d-widget-model-izumi<br>live2d-widget-model-koharu<br>live2d-widget-model-miku<br>live2d-widget-model-ni-j<br>live2d-widget-model-nico<br>live2d-widget-model-nietzsche<br>live2d-widget-model-nipsilon<br>live2d-widget-model-nito<br>live2d-widget-model-shizuku<br>live2d-widget-model-tororo<br>live2d-widget-model-tsumiki<br>live2d-widget-model-unitychan<br>live2d-widget-model-wanko<br>live2d-widget-model-z16</p><h2 id="6-下载完模型后在根目录的-node-modules-文件夹下找到刚才下载的live2d-widget-model-hibiki模型，将其复制到新建目录-live2d-models-下"><a href="#6-下载完模型后在根目录的-node-modules-文件夹下找到刚才下载的live2d-widget-model-hibiki模型，将其复制到新建目录-live2d-models-下" class="headerlink" title="6.下载完模型后在根目录的 node_modules 文件夹下找到刚才下载的live2d-widget-model-hibiki模型，将其复制到新建目录 live2d_models 下"></a>6.下载完模型后在根目录的 node_modules 文件夹下找到刚才下载的live2d-widget-model-hibiki模型，将其复制到新建目录 live2d_models 下</h2><p><img src="https://img-blog.csdnimg.cn/20200810120349315.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjYyOTkyOA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="7-在根目录-config-yml配置下添加以下参数，唯一改变是参数model-use-是下载模型名称"><a href="#7-在根目录-config-yml配置下添加以下参数，唯一改变是参数model-use-是下载模型名称" class="headerlink" title="7.在根目录_config.yml配置下添加以下参数，唯一改变是参数model.use 是下载模型名称"></a>7.在根目录_config.yml配置下添加以下参数，唯一改变是参数model.use 是下载模型名称</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#参数配置</span>live2d: enable: <span class="token boolean">true</span> scriptFrom: <span class="token builtin class-name">local</span> pluginRootPath: live2dw/ pluginJsPath: lib/ pluginModelPath: assets/ tagMode: <span class="token boolean">false</span> debug: <span class="token boolean">false</span> model:   use: live2d-widget-model-haruto   <span class="token comment">#下载模型参数</span> display:   position: right   width: <span class="token number">150</span>   height: <span class="token number">300</span> mobile:   show: <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="最后再次运行-hexo-s，看效果，右下角萌萌哒看板娘出来了"><a href="#最后再次运行-hexo-s，看效果，右下角萌萌哒看板娘出来了" class="headerlink" title="最后再次运行$hexo s，看效果，右下角萌萌哒看板娘出来了"></a>最后再次运行$hexo s，看效果，右下角萌萌哒看板娘出来了</h2><p><img src="https://img-blog.csdnimg.cn/20200810120617570.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjYyOTkyOA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;haruto这个模型 我爱了&lt;/p&gt;</summary>
    
    
    
    
    <category term="学习日常" scheme="https://www.carryone.top/tags/%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
</feed>
